---
http_interactions:
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($organization_name: String!, $end_cursor: String, $page_size:
        Int!) {\n            repositoryOwner(login: $organization_name) {\n              repositories(first:
        $page_size, after: $end_cursor, affiliations: OWNER) {\n                nodes
        {\n                  name\n                }\n                totalCount\n                pageInfo
        {\n                  endCursor\n                  hasNextPage\n                }\n              }\n            }\n          }","variables":{"organization_name":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '560'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:51 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4999'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '1'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF44:1B6A:80D18:109035:659D864E
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repositoryOwner":{"repositories":{"nodes":[{"name":"sjh"},{"name":"scripts"},{"name":"simple_services_monitor"},{"name":"Encryptor"},{"name":"event_manager"},{"name":"csv_parser"},{"name":"reverbdemo"},{"name":"Webdriver_Example"},{"name":"javascript-quiz"},{"name":"jquery-content-slider"},{"name":"todos"},{"name":"pagerduty"},{"name":"oratorlab"},{"name":"sublime_settings"},{"name":"DailyCodingProblems"},{"name":"tmux"},{"name":"HTB-Notes-Private"},{"name":"Hack-The-Box-Walkthroughs"},{"name":"Pentesting-Scripts"},{"name":"ftp-user-enum"},{"name":"Rspec-Capybara-Automation-Starter-Project"},{"name":"advent_of_code_2020"}],"totalCount":22,"pageInfo":{"endCursor":"Y3Vyc29yOnYyOpHOEvf1Pw==","hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"sjh","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1430'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:52 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4998'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '2'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF45:38A6:7283E:EC645:659D864F
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"scripts","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1434'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:52 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4997'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '3'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF46:6496:77B48:F6E42:659D8650
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/scripts","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"simple_services_monitor","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1450'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:52 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4996'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '4'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF47:2539:89567:11AB07:659D8650
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/simple_services_monitor","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"Encryptor","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1436'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:53 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4995'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '5'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF48:222A:8B807:11EA7E:659D8650
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/Encryptor","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"event_manager","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1440'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:53 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4994'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '6'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF49:1153:736DE:EEA40:659D8651
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/event_manager","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"csv_parser","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1437'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:53 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4993'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '7'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF4A:5714:2F9C5:64398:659D8651
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/csv_parser","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"reverbdemo","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1437'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:54 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4992'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '8'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF4B:630E:83D9A:10F8AB:659D8651
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"Webdriver_Example","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1444'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:55 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4991'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '9'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF4C:6496:77F19:F7631:659D8652
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/Webdriver_Example","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"javascript-quiz","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1442'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:55 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4990'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '10'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF4D:379C:7C282:1006F6:659D8653
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/javascript-quiz","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"jquery-content-slider","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1448'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:55 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4989'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '11'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF4E:2BE0:74AB7:F13DA:659D8653
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/jquery-content-slider","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"todos","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1432'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:56 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4988'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '12'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF4F:703D:7A68D:FCB6C:659D8653
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"pagerduty","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1436'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:57 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4987'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '13'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF50:703D:7A846:FCF06:659D8655
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/pagerduty","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"oratorlab","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1436'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:58 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4986'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '14'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF51:7CA2:75742:F27E0:659D8655
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJkYXRhIjp7InJlcG9zaXRvcnkiOnsidXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL3Nob3RvcC9vcmF0b3JsYWIiLCJ2dWxuZXJhYmlsaXR5QWxlcnRzIjp7Im5vZGVzIjpbeyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblEwTkRRMk16VXlNUT09IiwibnVtYmVyIjoxLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDE4LTAzLTIxVDIxOjUyOjM5WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJMb29mYWggYWxsb3dzIG5vbi13aGl0ZWxpc3RlZCBhdHRyaWJ1dGVzIHRvIGJlIHByZXNlbnQgaW4gc2FuaXRpemVkIG91dHB1dCB3aGVuIGlucHV0IHdpdGggc3BlY2lhbGx5LWNyYWZ0ZWQgSFRNTCBmcmFnbWVudHMuXG5cblVzZXJzIGFyZSBhZmZlY3RlZCBpZiBydW5uaW5nIExvb2ZhaCA8IDIuMi4xLCBidXQgb25seTpcblxuKiB3aGVuIHJ1bm5pbmcgb24gTVJJIG9yIFJCWCxcbiogaW4gY29tYmluYXRpb24gd2l0aCBsaWJ4bWwyID49IDIuOS4yLlxuXG5KUnVieSB1c2VycyBhcmUgbm90IGFmZmVjdGVkLiIsImN2c3MiOnsic2NvcmUiOjYuMX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EteDdydi1jcjZ2LTR2bTQifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE4LTgwNDgifV0sInN1bW1hcnkiOiJDcm9zcy1zaXRlIFNjcmlwdGluZyBpbiBsb29mYWgifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Imxvb2ZhaCJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMi4yLjEifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMi4yLjEifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblEwT0RjNU56a3pNZz09IiwibnVtYmVyIjoyLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDE4LTA0LTI3VDAwOjUzOjAyWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSBpcyBhIHBvc3NpYmxlIFhTUyB2dWxuZXJhYmlsaXR5IGluIGFsbCByYWlscy1odG1sLXNhbml0aXplciBnZW0gdmVyc2lvbnMgYmVsb3cgMS4wLjQgZm9yIFJ1YnkuIFRoZSBnZW0gYWxsb3dzIG5vbi13aGl0ZWxpc3RlZCBhdHRyaWJ1dGVzIHRvIGJlIHByZXNlbnQgaW4gc2FuaXRpemVkIG91dHB1dCB3aGVuIGlucHV0IHdpdGggc3BlY2lhbGx5LWNyYWZ0ZWQgSFRNTCBmcmFnbWVudHMsIGFuZCB0aGVzZSBhdHRyaWJ1dGVzIGNhbiBsZWFkIHRvIGFuIFhTUyBhdHRhY2sgb24gdGFyZ2V0IGFwcGxpY2F0aW9ucy4gVGhpcyBpc3N1ZSBpcyBzaW1pbGFyIHRvIENWRS0yMDE4LTgwNDggaW4gTG9vZmFoLiBBbGwgdXNlcnMgcnVubmluZyBhbiBhZmZlY3RlZCByZWxlYXNlIHNob3VsZCBlaXRoZXIgdXBncmFkZSBvciB1c2Ugb25lIG9mIHRoZSB3b3JrYXJvdW5kcyBpbW1lZGlhdGVseS4iLCJjdnNzIjp7InNjb3JlIjo2LjF9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLXB4M3Itam05Zy1jOHc4In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOC0zNzQxIn1dLCJzdW1tYXJ5IjoicmFpbHMtaHRtbC1zYW5pdGl6ZXIgQ3Jvc3Mtc2l0ZSBTY3JpcHRpbmcgdnVsbmVyYWJpbGl0eSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFpbHMtaHRtbC1zYW5pdGl6ZXIifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMC40In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuMC40In19LHsiaWQiOiJNREk0T2xKbGNHOXphWFJ2Y25sV2RXeHVaWEpoWW1sc2FYUjVRV3hsY25RMk5qUTROak13TkE9PSIsIm51bWJlciI6Mywic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAxOC0xMS0wMVQyMzo1MDoyM1oiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiSW4gdGhlIExvb2ZhaCBnZW0gZm9yIFJ1YnksIHRocm91Z2ggdmVyc2lvbiAyLjIuMiwgdW5zYW5pdGl6ZWQgSmF2YVNjcmlwdCBtYXkgb2NjdXIgaW4gc2FuaXRpemVkIG91dHB1dCB3aGVuIGEgY3JhZnRlZCBTVkcgZWxlbWVudCBpcyByZXB1Ymxpc2hlZC4gVXNlcnMgYXJlIGFkdmlzZWQgdG8gdXBncmFkZSB0byB2ZXJzaW9uIDIuMi4zLlxuXG5TZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZsYXZvcmpvbmVzL2xvb2ZhaC9pc3N1ZXMvMTU0IGZvciBtb3JlIGRldGFpbHMuIiwiY3ZzcyI6eyJzY29yZSI6NS40fSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1nNHhxLWp4NHctNGNqdiJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMTgtMTY0NjgifV0sInN1bW1hcnkiOiJMb29mYWggQ3Jvc3Mtc2l0ZSBTY3JpcHRpbmcgdnVsbmVyYWJpbGl0eSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibG9vZmFoIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjIuMyJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAyLjIuMyJ9fSx7ImlkIjoiTURJNE9sSmxjRzl6YVhSdmNubFdkV3h1WlhKaFltbHNhWFI1UVd4bGNuUTJOelUxT0RJMU5nPT0iLCJudW1iZXIiOjQsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMTgtMTEtMTVUMTc6MDE6MTVaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGEgcG9zc2libGUgRG9TIHZ1bG5lcmFiaWxpdHkgaW4gdGhlIG11bHRpcGFydCBwYXJzZXIgaW4gUmFjayBiZWZvcmUgMi4wLjYuIFNwZWNpYWxseSBjcmFmdGVkIHJlcXVlc3RzIGNhbiBjYXVzZSB0aGUgbXVsdGlwYXJ0IHBhcnNlciB0byBlbnRlciBhIHBhdGhvbG9naWNhbCBzdGF0ZSwgY2F1c2luZyB0aGUgcGFyc2VyIHRvIHVzZSBDUFUgcmVzb3VyY2VzIGRpc3Byb3BvcnRpb25hdGUgdG8gdGhlIHJlcXVlc3Qgc2l6ZS4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtaGc3OC00ZjZ4LTk5d3EifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE4LTE2NDcwIn1dLCJzdW1tYXJ5IjoiUmFjayB2dWxuZXJhYmxlIHRvIERlbmlhbCBvZiBTZXJ2aWNlIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJyYWNrIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjIuMC42In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI+PSAyLjAuNCwgPCAyLjAuNiJ9fSx7ImlkIjoiTURJNE9sSmxjRzl6YVhSdmNubFdkV3h1WlhKaFltbHNhWFI1UVd4bGNuUTJOemszTnpjeU5BPT0iLCJudW1iZXIiOjUsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMTgtMTEtMTVUMjA6Mjg6MzJaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGEgcG9zc2libGUgWFNTIHZ1bG5lcmFiaWxpdHkgaW4gUmFjayBiZWZvcmUgMi4wLjYgYW5kIDEuNi4xMS4gQ2FyZWZ1bGx5IGNyYWZ0ZWQgcmVxdWVzdHMgY2FuIGltcGFjdCB0aGUgZGF0YSByZXR1cm5lZCBieSB0aGUgYHNjaGVtZWAgbWV0aG9kIG9uIGBSYWNrOjpSZXF1ZXN0YC4gQXBwbGljYXRpb25zIHRoYXQgZXhwZWN0IHRoZSBzY2hlbWUgdG8gYmUgbGltaXRlZCB0byAnaHR0cCcgb3IgJ2h0dHBzJyBhbmQgZG8gbm90IGVzY2FwZSB0aGUgcmV0dXJuIHZhbHVlIGNvdWxkIGJlIHZ1bG5lcmFibGUgdG8gYW4gWFNTIGF0dGFjay4gTm90ZSB0aGF0IGFwcGxpY2F0aW9ucyB1c2luZyB0aGUgbm9ybWFsIGVzY2FwaW5nIG1lY2hhbmlzbXMgcHJvdmlkZWQgYnkgUmFpbHMgbWF5IG5vdCBpbXBhY3RlZCwgYnV0IGFwcGxpY2F0aW9ucyB0aGF0IGJ5cGFzcyB0aGUgZXNjYXBpbmcgbWVjaGFuaXNtcywgb3IgZG8gbm90IHVzZSB0aGVtIG1heSBiZSB2dWxuZXJhYmxlLiIsImN2c3MiOnsic2NvcmUiOjYuMX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtNXIycC1qNDdoLW1ocGcifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE4LTE2NDcxIn1dLCJzdW1tYXJ5IjoiUmFjayB2dWxuZXJhYmxlIHRvIENyb3NzLXNpdGUgU2NyaXB0aW5nIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJyYWNrIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjAuNiJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gMi4wLjAsIDwgMi4wLjYifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblEzTmpVNE5EQTJPQT09IiwibnVtYmVyIjo2LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDE5LTAxLTE3VDIxOjU1OjQ4WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJBIE5VTEwgcG9pbnRlciBkZXJlZmVyZW5jZSB2dWxuZXJhYmlsaXR5IGV4aXN0cyBpbiB0aGUgYHhwYXRoLmM6eG1sWFBhdGhDb21wT3BFdmFsKClgIGZ1bmN0aW9uIG9mIGxpYnhtbDIgdGhyb3VnaCAyLjkuOCB3aGVuIHBhcnNpbmcgYW4gaW52YWxpZCBYUGF0aCBleHByZXNzaW9uIGluIHRoZSBgWFBBVEhfT1BfQU5EYCBvciBgWFBBVEhfT1BfT1JgIGNhc2UuIEFwcGxpY2F0aW9ucyBwcm9jZXNzaW5nIHVudHJ1c3RlZCBYU0wgZm9ybWF0IGlucHV0cyB3aXRoIHRoZSB1c2Ugb2YgdGhlIGxpYnhtbDIgbGlicmFyeSBtYXkgYmUgdnVsbmVyYWJsZSB0byBhIGRlbmlhbCBvZiBzZXJ2aWNlIGF0dGFjayBkdWUgdG8gYSBjcmFzaCBvZiB0aGUgYXBwbGljYXRpb24uIiwiY3ZzcyI6eyJzY29yZSI6Ny41fSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTZxdnAtcjZyMy05cDdoIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOC0xNDQwNCJ9XSwic3VtbWFyeSI6Ik5va29naXJpIE5VTEwgUG9pbnRlciBEZXJlZmVyZW5jZSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibm9rb2dpcmkifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS44LjUifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS44LjUifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblE0TVRRME1UZzBOUT09IiwibnVtYmVyIjo3LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDE5LTAyLTIzVDAwOjA4OjI5WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJWZXJzaW9ucyBvZiBgYm9vdHN0cmFwYCBwcmlvciB0byAzLjQuMSBmb3IgMy54IGFuZCA0LjMuMSBmb3IgNC54IGFyZSB2dWxuZXJhYmxlIHRvIENyb3NzLVNpdGUgU2NyaXB0aW5nIChYU1MpLiBUaGUgIGBkYXRhLXRlbXBsYXRlYCBhdHRyaWJ1dGUgb2YgdGhlIHRvb2x0aXAgYW5kIHBvcG92ZXIgcGx1Z2lucyBsYWNrcyBpbnB1dCBzYW5pdGl6YXRpb24gYW5kIG1heSBhbGxvdyBhdHRhY2tlciB0byBleGVjdXRlIGFyYml0cmFyeSBKYXZhU2NyaXB0LlxuXG5cbiMjIFJlY29tbWVuZGF0aW9uXG5cbkZvciBgYm9vdHN0cmFwYCA0LnggdXBncmFkZSB0byA0LjMuMSBvciBsYXRlci5cbkZvciBgYm9vdHN0cmFwYCAzLnggdXBncmFkZSB0byAzLjQuMSBvciBsYXRlci4iLCJjdnNzIjp7InNjb3JlIjo2LjF9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTl2M20tOGZwOC1tajk5In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOS04MzMxIn1dLCJzdW1tYXJ5IjoiQm9vdHN0cmFwIFZ1bG5lcmFibGUgdG8gQ3Jvc3MtU2l0ZSBTY3JpcHRpbmcifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImJvb3RzdHJhcC1zYXNzIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIzLjQuMSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gMy4wLjAsIDwgMy40LjEifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblE0TXpVeU1UVXlNZz09IiwibnVtYmVyIjo4LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDE5LTAzLTEzVDIxOjQ3OjQxWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIEZpbGUgQ29udGVudCBEaXNjbG9zdXJlIGluIEFjdGlvbiBWaWV3XG5cbkltcGFjdCBcbi0tLS0tLSBcblRoZXJlIGlzIGEgcG9zc2libGUgZmlsZSBjb250ZW50IGRpc2Nsb3N1cmUgdnVsbmVyYWJpbGl0eSBpbiBBY3Rpb24gVmlldy4gIFNwZWNpYWxseSBjcmFmdGVkIGFjY2VwdCBoZWFkZXJzIGluIGNvbWJpbmF0aW9uIHdpdGggY2FsbHMgdG8gYHJlbmRlciBmaWxlOmAgIGNhbiBjYXVzZSBhcmJpdHJhcnkgZmlsZXMgb24gdGhlIHRhcmdldCBzZXJ2ZXIgdG8gYmUgcmVuZGVyZWQsIGRpc2Nsb3NpbmcgdGhlICBmaWxlIGNvbnRlbnRzLiBcblxuVGhlIGltcGFjdCBpcyBsaW1pdGVkIHRvIGNhbGxzIHRvIGByZW5kZXJgIHdoaWNoIHJlbmRlciBmaWxlIGNvbnRlbnRzIHdpdGhvdXQgIGEgc3BlY2lmaWVkIGFjY2VwdCBmb3JtYXQuICBJbXBhY3RlZCBjb2RlIGluIGEgY29udHJvbGxlciBsb29rcyBzb21ldGhpbmcgbGlrZSB0aGlzOiBcblxuYGBgIHJ1YnlcbmNsYXNzIFVzZXJDb250cm9sbGVyIDwgQXBwbGljYXRpb25Db250cm9sbGVyIFxuICBkZWYgaW5kZXggXG4gICAgcmVuZGVyIGZpbGU6IFwiI3tSYWlscy5yb290fS9zb21lL2ZpbGVcIiBcbiAgZW5kIFxuZW5kIFxuYGBgIFxuXG5SZW5kZXJpbmcgdGVtcGxhdGVzIGFzIG9wcG9zZWQgdG8gZmlsZXMgaXMgbm90IGltcGFjdGVkIGJ5IHRoaXMgdnVsbmVyYWJpbGl0eS4gXG5cbkFsbCB1c2VycyBydW5uaW5nIGFuIGFmZmVjdGVkIHJlbGVhc2Ugc2hvdWxkIGVpdGhlciB1cGdyYWRlIG9yIHVzZSBvbmUgb2YgdGhlIHdvcmthcm91bmRzIGltbWVkaWF0ZWx5LiBcblxuUmVsZWFzZXMgXG4tLS0tLS0tLSBcblRoZSA2LjAuMC5iZXRhMywgNS4yLjIuMSwgNS4xLjYuMiwgNS4wLjcuMiwgYW5kIDQuMi4xMS4xIHJlbGVhc2VzIGFyZSBhdmFpbGFibGUgYXQgdGhlIG5vcm1hbCBsb2NhdGlvbnMuIFxuXG5Xb3JrYXJvdW5kcyBcbi0tLS0tLS0tLS0tIFxuVGhpcyB2dWxuZXJhYmlsaXR5IGNhbiBiZSBtaXRpZ2F0ZWQgYnkgc3BlY2lmeWluZyBhIGZvcm1hdCBmb3IgZmlsZSByZW5kZXJpbmcsIGxpa2UgdGhpczogXG5cbmBgYCBydWJ5XG5jbGFzcyBVc2VyQ29udHJvbGxlciA8IEFwcGxpY2F0aW9uQ29udHJvbGxlciBcbiAgZGVmIGluZGV4IFxuICAgIHJlbmRlciBmaWxlOiBcIiN7UmFpbHMucm9vdH0vc29tZS9maWxlXCIsIGZvcm1hdHM6IFs6aHRtbF0gXG4gIGVuZCBcbmVuZCBcbmBgYCBcblxuSW4gc3VtbWFyeSwgaW1wYWN0ZWQgY2FsbHMgdG8gYHJlbmRlcmAgbG9vayBsaWtlIHRoaXM6IFxuXG5gYGAgXG5yZW5kZXIgZmlsZTogXCIje1JhaWxzLnJvb3R9L3NvbWUvZmlsZVwiIFxuYGBgIFxuXG5UaGUgdnVsbmVyYWJpbGl0eSBjYW4gYmUgbWl0aWdhdGVkIGJ5IGNoYW5naW5nIHRvIHRoaXM6IFxuXG5gYGAgXG5yZW5kZXIgZmlsZTogXCIje1JhaWxzLnJvb3R9L3NvbWUvZmlsZVwiLCBmb3JtYXRzOiBbOmh0bWxdIFxuYGBgIFxuXG5PdGhlciBjYWxscyB0byBgcmVuZGVyYCBhcmUgbm90IGltcGFjdGVkLiBcblxuQWx0ZXJuYXRpdmVseSwgdGhlIGZvbGxvd2luZyBtb25rZXkgcGF0Y2ggY2FuIGJlIGFwcGxpZWQgaW4gYW4gaW5pdGlhbGl6ZXI6IFxuXG5gYGAgcnVieVxuJCBjYXQgY29uZmlnL2luaXRpYWxpemVycy9mb3JtYXRzX2ZpbHRlci5yYiBcbiMgZnJvemVuX3N0cmluZ19saXRlcmFsOiB0cnVlIFxuXG5BY3Rpb25EaXNwYXRjaDo6UmVxdWVzdC5wcmVwZW5kKE1vZHVsZS5uZXcgZG8gXG4gIGRlZiBmb3JtYXRzIFxuICAgIHN1cGVyKCkuc2VsZWN0IGRvIHxmb3JtYXR8IFxuICAgICAgZm9ybWF0LnN5bWJvbCB8fCBmb3JtYXQucmVmID09IFwiKi8qXCIgXG4gICAgZW5kIFxuICBlbmQgXG5lbmQpIFxuYGBgIFxuXG5DcmVkaXRzIFxuLS0tLS0tLSBcblRoYW5rcyB0byBKb2huIEhhd3Rob3JuIDxqb2huQGhhd3Rob3JuLmVtYWlsPiBvZiBHaXRIdWIgIiwiY3ZzcyI6eyJzY29yZSI6Ny41fSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTg2ZzUtMndoMy1nYzlqIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOS01NDE4In1dLCJzdW1tYXJ5IjoiUGF0aCBUcmF2ZXJzYWwgaW4gQWN0aW9uIFZpZXcifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGlvbnZpZXcifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNS4xLjYuMiJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gNS4xLjAsIDw9IDUuMS42LjEifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblE0TXpVeU1UVXpOQT09IiwibnVtYmVyIjo5LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDE5LTAzLTEzVDIxOjQ3OjQyWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIERlbmlhbCBvZiBTZXJ2aWNlIFZ1bG5lcmFiaWxpdHkgaW4gQWN0aW9uIFZpZXdcblxuSW1wYWN0IFxuLS0tLS0tIFxuU3BlY2lhbGx5IGNyYWZ0ZWQgYWNjZXB0IGhlYWRlcnMgY2FuIGNhdXNlIHRoZSBBY3Rpb24gVmlldyB0ZW1wbGF0ZSBsb2NhdGlvbiBjb2RlIHRvIGNvbnN1bWUgMTAwJSBDUFUsIGNhdXNpbmcgdGhlIHNlcnZlciB1bmFibGUgdG8gcHJvY2VzcyByZXF1ZXN0cy4gIFRoaXMgaW1wYWN0cyBhbGwgUmFpbHMgYXBwbGljYXRpb25zIHRoYXQgcmVuZGVyIHZpZXdzLiBcblxuQWxsIHVzZXJzIHJ1bm5pbmcgYW4gYWZmZWN0ZWQgcmVsZWFzZSBzaG91bGQgZWl0aGVyIHVwZ3JhZGUgb3IgdXNlIG9uZSBvZiB0aGUgd29ya2Fyb3VuZHMgaW1tZWRpYXRlbHkuIFxuXG5SZWxlYXNlcyBcbi0tLS0tLS0tIFxuVGhlIDYuMC4wLmJldGEzLCA1LjIuMi4xLCA1LjEuNi4yLCA1LjAuNy4yLCBhbmQgNC4yLjExLjEgcmVsZWFzZXMgYXJlIGF2YWlsYWJsZSBhdCB0aGUgbm9ybWFsIGxvY2F0aW9ucy4gXG5cbldvcmthcm91bmRzIFxuLS0tLS0tLS0tLS0gXG5UaGlzIHZ1bG5lcmFiaWxpdHkgY2FuIGJlIG1pdGlnYXRlZCBieSB3cmFwcGluZyBgcmVuZGVyYCBjYWxscyB3aXRoIGByZXNwb25kX3RvYCBibG9ja3MuICBGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyBleGFtcGxlIGlzIHZ1bG5lcmFibGU6IFxuXG5gYGAgcnVieVxuY2xhc3MgVXNlckNvbnRyb2xsZXIgPCBBcHBsaWNhdGlvbkNvbnRyb2xsZXIgXG4gIGRlZiBpbmRleCBcbiAgICByZW5kZXIgXCJpbmRleFwiIFxuICBlbmQgXG5lbmQgXG5gYGAgXG5cbkJ1dCB0aGUgZm9sbG93aW5nIGNvZGUgaXMgbm90IHZ1bG5lcmFibGU6IFxuXG5gYGBydWJ5IFxuY2xhc3MgVXNlckNvbnRyb2xsZXIgPCBBcHBsaWNhdGlvbkNvbnRyb2xsZXIgXG4gIGRlZiBpbmRleCBcbiAgICByZXNwb25kX3RvIHxmb3JtYXR8IFxuICAgICAgZm9ybWF0Lmh0bWwgeyByZW5kZXIgXCJpbmRleFwiIH0gXG4gICAgZW5kIFxuICBlbmQgXG5lbmQgXG5gYGAgXG5cbkltcGxpY2l0IHJlbmRlcmluZyBpcyBpbXBhY3RlZCwgc28gdGhpcyBjb2RlIGlzIHZ1bG5lcmFibGU6IFxuXG5gYGBydWJ5IFxuY2xhc3MgVXNlckNvbnRyb2xsZXIgPCBBcHBsaWNhdGlvbkNvbnRyb2xsZXIgXG4gIGRlZiBpbmRleCBcbiAgZW5kIFxuZW5kIFxuYGBgIFxuXG5CdXQgY2FuIGJlIGNoYW5nZWQgdGhpcyB0aGlzOiBcblxuYGBgcnVieSBcbmNsYXNzIFVzZXJDb250cm9sbGVyIDwgQXBwbGljYXRpb25Db250cm9sbGVyIFxuICBkZWYgaW5kZXggXG4gICAgcmVzcG9uZF90byB8Zm9ybWF0fCBcbiAgICAgIGZvcm1hdC5odG1sIHsgcmVuZGVyIFwiaW5kZXhcIiB9IFxuICAgIGVuZCBcbiAgZW5kIFxuZW5kIFxuYGBgIFxuXG5BbHRlcm5hdGl2ZWx5IHRvIHNwZWNpZnlpbmcgdGhlIGZvcm1hdCwgdGhlIGZvbGxvd2luZyBtb25rZXkgcGF0Y2ggY2FuIGJlIGFwcGxpZWQgaW4gYW4gaW5pdGlhbGl6ZXI6IFxuXG5gYGAgXG4kIGNhdCBjb25maWcvaW5pdGlhbGl6ZXJzL2Zvcm1hdHNfZmlsdGVyLnJiIFxuIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWUgXG5cbkFjdGlvbkRpc3BhdGNoOjpSZXF1ZXN0LnByZXBlbmQoTW9kdWxlLm5ldyBkbyBcbiAgZGVmIGZvcm1hdHMgXG4gICAgc3VwZXIoKS5zZWxlY3QgZG8gfGZvcm1hdHwgXG4gICAgICBmb3JtYXQuc3ltYm9sIHx8IGZvcm1hdC5yZWYgPT0gXCIqLypcIiBcbiAgICBlbmQgXG4gIGVuZCBcbmVuZCkgXG5gYGAgXG5cblBsZWFzZSBub3RlIHRoYXQgb25seSB0aGUgNS4yLngsIDUuMS54LCA1LjAueCwgYW5kIDQuMi54IHNlcmllcyBhcmUgc3VwcG9ydGVkIGF0IHByZXNlbnQuIFVzZXJzIG9mIGVhcmxpZXIgdW5zdXBwb3J0ZWQgcmVsZWFzZXMgYXJlIGFkdmlzZWQgdG8gdXBncmFkZSBhcyBzb29uIGFzIHBvc3NpYmxlIGFzIHdlIGNhbm5vdCBndWFyYW50ZWUgdGhlIGNvbnRpbnVlZCBhdmFpbGFiaWxpdHkgb2Ygc2VjdXJpdHkgZml4ZXMgZm9yIHVuc3VwcG9ydGVkIHJlbGVhc2VzLiBcblxuQWxzbyBub3RlIHRoYXQgdGhlIHBhdGNoZXMgZm9yIHRoaXMgdnVsbmVyYWJpbGl0eSBhcmUgdGhlIHNhbWUgYXMgQ1ZFLTIwMTktNTQxOC4gXG5cbkNyZWRpdHMgXG4tLS0tLS0tIFxuVGhhbmtzIHRvIEpvaG4gSGF3dGhvcm4gPGpvaG5AaGF3dGhvcm4uZW1haWw+IG9mIEdpdEh1YiAiLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtbTYzai13aDV3LWMyNTIifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE5LTU0MTkifV0sInN1bW1hcnkiOiJEZW5pYWwgb2YgU2VydmljZSBWdWxuZXJhYmlsaXR5IGluIEFjdGlvbiBWaWV3In0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJhY3Rpb252aWV3In0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjUuMS42LjIifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDUuMS4wLCA8PSA1LjEuNi4xIn19LHsiaWQiOiJNREk0T2xKbGNHOXphWFJ2Y25sV2RXeHVaWEpoWW1sc2FYUjVRV3hsY25RNE5EZzFOVGd4TWc9PSIsIm51bWJlciI6MTAsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMTktMDMtMjBUMDM6MjQ6MTRaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IkRldmlzZSBydWJ5IGdlbSBiZWZvcmUgNC42LjAgd2hlbiB0aGUgYGxvY2thYmxlYCBtb2R1bGUgaXMgdXNlZCBpcyB2dWxuZXJhYmxlIHRvIGEgdGltZS1vZi1jaGVjayB0aW1lLW9mLXVzZSAoVE9DVE9VKSByYWNlIGNvbmRpdGlvbiBkdWUgdG8gYGluY3JlbWVudF9mYWlsZWRfYXR0ZW1wdHNgIHdpdGhpbiB0aGUgYERldmlzZTo6TW9kZWxzOjpMb2NrYWJsZWAgY2xhc3Mgbm90IGJlaW5nIGNvbmN1cnJlbmN5IHNhZmUuIiwiY3ZzcyI6eyJzY29yZSI6MC4wfSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS03M3JmLTZtcmYtNzU5cSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMTktNTQyMSJ9XSwic3VtbWFyeSI6ImRldmlzZSBUaW1lLW9mLWNoZWNrIFRpbWUtb2YtdXNlIFJhY2UgQ29uZGl0aW9uIHZ1bG5lcmFiaWxpdHkifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImRldmlzZSJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNC42LjAifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgNC42LjAifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblF4TkRRd016VTNPVGs9IiwibnVtYmVyIjoxMSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAxOS0wOC0yMFQxNDowOTozOFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiQSBjb21tYW5kIGluamVjdGlvbiB2dWxuZXJhYmlsaXR5IGluIE5va29naXJpIHYxLjEwLjMgYW5kIGVhcmxpZXIgYWxsb3dzIGNvbW1hbmRzIHRvIGJlIGV4ZWN1dGVkIGluIGEgc3VicHJvY2VzcyB2aWEgUnVieSdzIGBLZXJuZWwub3BlbmAgbWV0aG9kLiBQcm9jZXNzZXMgYXJlIHZ1bG5lcmFibGUgb25seSBpZiB0aGUgdW5kb2N1bWVudGVkIG1ldGhvZCBgTm9rb2dpcmk6OkNTUzo6VG9rZW5pemVyI2xvYWRfZmlsZWAgaXMgYmVpbmcgY2FsbGVkIHdpdGggdW5zYWZlIHVzZXIgaW5wdXQgYXMgdGhlIGZpbGVuYW1lLiBUaGlzIHZ1bG5lcmFiaWxpdHkgYXBwZWFycyBpbiBjb2RlIGdlbmVyYXRlZCBieSB0aGUgUmV4aWNhbCBnZW0gdmVyc2lvbnMgdjEuMC42IGFuZCBlYXJsaWVyLiBSZXhpY2FsIGlzIHVzZWQgYnkgTm9rb2dpcmkgdG8gZ2VuZXJhdGUgbGV4aWNhbCBzY2FubmVyIGNvZGUgZm9yIHBhcnNpbmcgQ1NTIHF1ZXJpZXMuIFRoZSB1bmRlcmx5aW5nIHZ1bG5lcmFiaWxpdHkgd2FzIGFkZHJlc3NlZCBpbiBSZXhpY2FsIHYxLjAuNyBhbmQgTm9rb2dpcmkgdXBncmFkZWQgdG8gdGhpcyB2ZXJzaW9uIG9mIFJleGljYWwgaW4gTm9rb2dpcmkgdjEuMTAuNC4iLCJjdnNzIjp7InNjb3JlIjo5Ljh9LCJzZXZlcml0eSI6IkNSSVRJQ0FMIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLWNyNWotOTUzai14dzVwIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOS01NDc3In1dLCJzdW1tYXJ5IjoiTm9rb2dpcmkgQ29tbWFuZCBJbmplY3Rpb24gVnVsbmVyYWJpbGl0eSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibm9rb2dpcmkifSwic2V2ZXJpdHkiOiJDUklUSUNBTCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMTAuNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjEwLjQifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblF4TlRZd05qazBPRGc9IiwibnVtYmVyIjoxMiwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAxOS0wOS0xMlQwMjozNTo1NFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiQW4gaXNzdWUgd2FzIGRpc2NvdmVyZWQgaW4gUGxhdGFmb3JtYXRlYyBEZXZpc2UgYmVmb3JlIDQuNy4xLiBJdCBjb25maXJtcyBhY2NvdW50cyB1cG9uIHJlY2VpdmluZyBhIHJlcXVlc3Qgd2l0aCBhIGJsYW5rIGNvbmZpcm1hdGlvbl90b2tlbiwgaWYgYSBkYXRhYmFzZSByZWNvcmQgaGFzIGEgYmxhbmsgdmFsdWUgaW4gdGhlIGNvbmZpcm1hdGlvbl90b2tlbiBjb2x1bW4uIChIb3dldmVyLCB0aGVyZSBpcyBubyBzY2VuYXJpbyB3aXRoaW4gRGV2aXNlIGl0c2VsZiBpbiB3aGljaCBzdWNoIGRhdGFiYXNlIHJlY29yZHMgd291bGQgZXhpc3QuKSIsImN2c3MiOnsic2NvcmUiOjUuM30sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtZmNqdy04cmhqLWd3d2MifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE5LTE2MTA5In1dLCJzdW1tYXJ5IjoiQXV0aGVudGljYXRpb24gQnlwYXNzIGluIERldmlzZSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoiZGV2aXNlIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI0LjcuMSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCA0LjcuMSJ9fSx7ImlkIjoiTURJNE9sSmxjRzl6YVhSdmNubFdkV3h1WlhKaFltbHNhWFI1UVd4bGNuUXhPREU1TURrNU1EQT0iLCJudW1iZXIiOjEzLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDE5LTExLTA4VDE4OjU4OjE3WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJJbiB0aGUgTG9vZmFoIGdlbSBmb3IgUnVieSB0aHJvdWdoIHYyLjMuMCwgdW5zYW5pdGl6ZWQgSmF2YVNjcmlwdCBtYXkgb2NjdXIgaW4gc2FuaXRpemVkIG91dHB1dCB3aGVuIGEgY3JhZnRlZCBTVkcgZWxlbWVudCBpcyByZXB1Ymxpc2hlZC4iLCJjdnNzIjp7InNjb3JlIjo1LjR9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLWMzZ3YtOWN4Zi02ZjU3In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOS0xNTU4NyJ9XSwic3VtbWFyeSI6Ikxvb2ZhaCBBbGxvd3MgQ3Jvc3Mtc2l0ZSBTY3JpcHRpbmcifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Imxvb2ZhaCJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMi4zLjEifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMi4zLjEifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblF4T1RRNU1UZ3lNRFk9IiwibnVtYmVyIjoxNCwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAxOS0xMi0wNlQwMzoyOTowMloiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMgS2VlcGFsaXZlIHRocmVhZCBvdmVybG9hZC9Eb1NcblxuIyMjIEltcGFjdFxuXG5BIHBvb3JseS1iZWhhdmVkIGNsaWVudCBjb3VsZCB1c2Uga2VlcGFsaXZlIHJlcXVlc3RzIHRvIG1vbm9wb2xpemUgUHVtYSdzIHJlYWN0b3IgYW5kIGNyZWF0ZSBhIGRlbmlhbCBvZiBzZXJ2aWNlIGF0dGFjay5cblxuSWYgbW9yZSBrZWVwYWxpdmUgY29ubmVjdGlvbnMgdG8gUHVtYSBhcmUgb3BlbmVkIHRoYW4gdGhlcmUgYXJlIHRocmVhZHMgYXZhaWxhYmxlLCBhZGRpdGlvbmFsIGNvbm5lY3Rpb25zIHdpbGwgd2FpdCBwZXJtYW5lbnRseSBpZiB0aGUgYXR0YWNrZXIgc2VuZHMgcmVxdWVzdHMgZnJlcXVlbnRseSBlbm91Z2guXG5cbiMjIyBQYXRjaGVzXG5cblRoaXMgdnVsbmVyYWJpbGl0eSBpcyBwYXRjaGVkIGluIFB1bWEgNC4zLjEgYW5kIDMuMTIuMi5cblxuIyMjIFdvcmthcm91bmRzXG5cblJldmVyc2UgcHJveGllcyBpbiBmcm9udCBvZiBQdW1hIGNvdWxkIGJlIGNvbmZpZ3VyZWQgdG8gYWx3YXlzIGFsbG93IGxlc3MgdGhhbiBYIGtlZXBhbGl2ZSBjb25uZWN0aW9ucyB0byBhIFB1bWEgY2x1c3RlciBvciBwcm9jZXNzLCB3aGVyZSBYIGlzIHRoZSBudW1iZXIgb2YgdGhyZWFkcyBjb25maWd1cmVkIGluIFB1bWEncyB0aHJlYWQgcG9vbC5cblxuIyMjIEZvciBtb3JlIGluZm9ybWF0aW9uXG5cbklmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgb3IgY29tbWVudHMgYWJvdXQgdGhpcyBhZHZpc29yeTpcblxuKiBPcGVuIGFuIGlzc3VlIGF0IFtwdW1hXShnaXRodWIuY29tL3B1bWEvcHVtYSkuIiwiY3ZzcyI6eyJzY29yZSI6NS4zfSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS03eHgzLW01ODQteDk5NCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMTktMTY3NzAifV0sInN1bW1hcnkiOiJBIHBvb3JseS1iZWhhdmVkIGNsaWVudCBjb3VsZCB1c2Uga2VlcGFsaXZlIHJlcXVlc3RzIHRvIG1vbm9wb2xpemUgUHVtYSdzIHJlYWN0b3IgYW5kIGNyZWF0ZSBhIGRlbmlhbCBvZiBzZXJ2aWNlIGF0dGFjayJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicHVtYSJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMy4xMi4yIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDMuMTIuMiJ9fSx7ImlkIjoiTURJNE9sSmxjRzl6YVhSdmNubFdkV3h1WlhKaFltbHNhWFI1UVd4bGNuUXlNREl3TnpReU56RT0iLCJudW1iZXIiOjE1LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDE5LTEyLTE5VDA0OjIxOjM5WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSdzIGEgcG9zc2libGUgaW5mb3JtYXRpb24gbGVhayAvIHNlc3Npb24gaGlqYWNrIHZ1bG5lcmFiaWxpdHkgaW4gUmFjay4gQXR0YWNrZXJzIG1heSBiZSBhYmxlIHRvIGZpbmQgYW5kIGhpamFjayBzZXNzaW9ucyBieSB1c2luZyB0aW1pbmcgYXR0YWNrcyB0YXJnZXRpbmcgdGhlIHNlc3Npb24gaWQuIFNlc3Npb24gaWRzIGFyZSB1c3VhbGx5IHN0b3JlZCBhbmQgaW5kZXhlZCBpbiBhIGRhdGFiYXNlIHRoYXQgdXNlcyBzb21lIGtpbmQgb2Ygc2NoZW1lIGZvciBzcGVlZGluZyB1cCBsb29rdXBzIG9mIHRoYXQgc2Vzc2lvbiBpZC4gQnkgY2FyZWZ1bGx5IG1lYXN1cmluZyB0aGUgYW1vdW50IG9mIHRpbWUgaXQgdGFrZXMgdG8gbG9vayB1cCBhIHNlc3Npb24sIGFuIGF0dGFja2VyIG1heSBiZSBhYmxlIHRvIGZpbmQgYSB2YWxpZCBzZXNzaW9uIGlkIGFuZCBoaWphY2sgdGhlIHNlc3Npb24uXG5cblRoZSBzZXNzaW9uIGlkIGl0c2VsZiBtYXkgYmUgZ2VuZXJhdGVkIHJhbmRvbWx5LCBidXQgdGhlIHdheSB0aGUgc2Vzc2lvbiBpcyBpbmRleGVkIGJ5IHRoZSBiYWNraW5nIHN0b3JlIGRvZXMgbm90IHVzZSBhIHNlY3VyZSBjb21wYXJpc29uLlxuXG4jIyMgSW1wYWN0XG5cblRoZSBzZXNzaW9uIGlkIHN0b3JlZCBpbiBhIGNvb2tpZSBpcyB0aGUgc2FtZSBpZCB0aGF0IGlzIHVzZWQgd2hlbiBxdWVyeWluZyB0aGUgYmFja2luZyBzZXNzaW9uIHN0b3JhZ2UgZW5naW5lLiAgTW9zdCBzdG9yYWdlIG1lY2hhbmlzbXMgKGZvciBleGFtcGxlIGEgZGF0YWJhc2UpIHVzZSBzb21lIHNvcnQgb2YgaW5kZXhpbmcgaW4gb3JkZXIgdG8gc3BlZWQgdXAgdGhlIGxvb2t1cCBvZiB0aGF0IGlkLiAgQnkgY2FyZWZ1bGx5IHRpbWluZyByZXF1ZXN0cyBhbmQgc2Vzc2lvbiBsb29rdXAgZmFpbHVyZXMsIGFuIGF0dGFja2VyIG1heSBiZSBhYmxlIHRvIHBlcmZvcm0gYSB0aW1pbmcgYXR0YWNrIHRvIGRldGVybWluZSBhbiBleGlzdGluZyBzZXNzaW9uIGlkIGFuZCBoaWphY2sgdGhhdCBzZXNzaW9uLlxuXG4jIyBSZWxlYXNlc1xuXG5UaGUgMS42LjEyIGFuZCAyLjAuOCByZWxlYXNlcyBhcmUgYXZhaWxhYmxlIGF0IHRoZSBub3JtYWwgbG9jYXRpb25zLlxuXG4jIyMgV29ya2Fyb3VuZHNcblxuVGhlcmUgYXJlIG5vIGtub3duIHdvcmthcm91bmRzLlxuXG4jIyMgUGF0Y2hlc1xuXG5UbyBhaWQgdXNlcnMgd2hvIGFyZW4ndCBhYmxlIHRvIHVwZ3JhZGUgaW1tZWRpYXRlbHkgd2UgaGF2ZSBwcm92aWRlZCBwYXRjaGVzIGZvclxudGhlIHR3byBzdXBwb3J0ZWQgcmVsZWFzZSBzZXJpZXMuIFRoZXkgYXJlIGluIGdpdC1hbSBmb3JtYXQgYW5kIGNvbnNpc3Qgb2YgYVxuc2luZ2xlIGNoYW5nZXNldC5cblxuKiAxLTYtc2Vzc2lvbi10aW1pbmctYXR0YWNrLnBhdGNoIC0gUGF0Y2ggZm9yIDEuNiBzZXJpZXNcbiogMi0wLXNlc3Npb24tdGltaW5nLWF0dGFjay5wYXRjaCAtIFBhdGNoIGZvciAyLjYgc2VyaWVzXG5cbiMjIyBDcmVkaXRzXG5cblRoYW5rcyBXaWxsIExlaW53ZWJlciBmb3IgcmVwb3J0aW5nIHRoaXMhIiwiY3ZzcyI6eyJzY29yZSI6Ni4zfSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1ocnFyLWh4cHAtY2hyMyJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMTktMTY3ODIifV0sInN1bW1hcnkiOiJQb3NzaWJsZSBJbmZvcm1hdGlvbiBMZWFrIC8gU2Vzc2lvbiBIaWphY2sgVnVsbmVyYWJpbGl0eSBpbiBSYWNrIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJyYWNrIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjAuOCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gMi4wLjAsIDwgMi4wLjgifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblF5TWpNMU1UWTJOelE9IiwibnVtYmVyIjoxNiwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMC0wMi0yNVQwOTo1MDowNFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoieG1sU3RyaW5nTGVuRGVjb2RlRW50aXRpZXMgaW4gcGFyc2VyLmMgaW4gbGlieG1sMiAyLjkuMTAgaGFzIGFuIGluZmluaXRlIGxvb3AgaW4gYSBjZXJ0YWluIGVuZC1vZi1maWxlIHNpdHVhdGlvbi5cblRoZSBOb2tvZ2lyaSBSdWJ5R2VtIGhhcyBwYXRjaGVkIGl0cyB2ZW5kb3JlZCBjb3B5IG9mIGxpYnhtbDIgaW4gb3JkZXIgdG8gcHJldmVudCB0aGlzIGlzc3VlIGZyb20gYWZmZWN0aW5nIG5va29naXJpLiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS03NTUzLWpyOTgtdng0NyJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjAtNzU5NSJ9XSwic3VtbWFyeSI6ImxpYnhtbCBhcyB1c2VkIGluIE5va29naXJpIGhhcyBhbiBpbmZpbml0ZSBsb29wIGluIGEgY2VydGFpbiBlbmQtb2YtZmlsZSBzaXR1YXRpb24ifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMTAuOCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjEwLjgifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblF5TWpVek9ESXlOelE9IiwibnVtYmVyIjoxNywic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMC0wMi0yOFQyMToyNjozMFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiSW4gUHVtYSAoUnVieUdlbSkgYmVmb3JlIDQuMy4yIGFuZCAzLjEyLjMsIGlmIGFuIGFwcGxpY2F0aW9uIHVzaW5nIFB1bWEgYWxsb3dzIHVudHJ1c3RlZCBpbnB1dCBpbiBhIHJlc3BvbnNlIGhlYWRlciwgYW4gYXR0YWNrZXIgY2FuIHVzZSBuZXdsaW5lIGNoYXJhY3RlcnMgKGkuZS4gYENSYCwgYExGYCBvcmAvcmAsIGAvbmApIHRvIGVuZCB0aGUgaGVhZGVyIGFuZCBpbmplY3QgbWFsaWNpb3VzIGNvbnRlbnQsIHN1Y2ggYXMgYWRkaXRpb25hbCBoZWFkZXJzIG9yIGFuIGVudGlyZWx5IG5ldyByZXNwb25zZSBib2R5LiBUaGlzIHZ1bG5lcmFiaWxpdHkgaXMga25vd24gYXMgSFRUUCBSZXNwb25zZSBTcGxpdHRpbmcuXG5cbldoaWxlIG5vdCBhbiBhdHRhY2sgaW4gaXRzZWxmLCByZXNwb25zZSBzcGxpdHRpbmcgaXMgYSB2ZWN0b3IgZm9yIHNldmVyYWwgb3RoZXIgYXR0YWNrcywgc3VjaCBhcyBjcm9zcy1zaXRlIHNjcmlwdGluZyAoWFNTKS5cblxuVGhpcyBpcyByZWxhdGVkIHRvIENWRS0yMDE5LTE2MjU0LCB3aGljaCBmaXhlZCB0aGlzIHZ1bG5lcmFiaWxpdHkgZm9yIHRoZSBXRUJyaWNrIFJ1Ynkgd2ViIHNlcnZlci5cblxuVGhpcyBoYXMgYmVlbiBmaXhlZCBpbiB2ZXJzaW9ucyA0LjMuMiBhbmQgMy4xMi4zIGJ5IGNoZWNraW5nIGFsbCBoZWFkZXJzIGZvciBsaW5lIGVuZGluZ3MgYW5kIHJlamVjdGluZyBoZWFkZXJzIHdpdGggdGhvc2UgY2hhcmFjdGVycy4gICIsImN2c3MiOnsic2NvcmUiOjYuNX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtODRqNy00NzVwLWhwOHYifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIwLTUyNDcifV0sInN1bW1hcnkiOiJIVFRQIFJlc3BvbnNlIFNwbGl0dGluZyBpbiBQdW1hIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJwdW1hIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIzLjEyLjQifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMy4xMi4zIn19LHsiaWQiOiJNREk0T2xKbGNHOXphWFJ2Y25sV2RXeHVaWEpoWW1sc2FYUjVRV3hsY25ReU1qWXpOamt6TmpZPSIsIm51bWJlciI6MTgsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjAtMDItMjlUMTA6NDI6NDlaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGFuIE9TIGNvbW1hbmQgaW5qZWN0aW9uIHZ1bG5lcmFiaWxpdHkgaW4gUnVieSBSYWtlIGJlZm9yZSAxMi4zLjMgaW4gYFJha2U6OkZpbGVMaXN0YCB3aGVuIHN1cHBseWluZyBhIGZpbGVuYW1lIHRoYXQgYmVnaW5zIHdpdGggdGhlIHBpcGUgY2hhcmFjdGVyIGB8YC4iLCJjdnNzIjp7InNjb3JlIjo2LjR9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLWpwcHYtZ3czci13M3E4In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMC04MTMwIn1dLCJzdW1tYXJ5IjoiT1MgQ29tbWFuZCBJbmplY3Rpb24gaW4gUmFrZSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFrZSJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMTIuMy4zIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8PSAxMi4zLjIifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblF5TWpjMk9URTVOVGM9IiwibnVtYmVyIjoxOSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMC0wMy0wNFQwOTozMjo1NVoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMjIEltcGFjdFxuSWYgYW4gYXBwbGljYXRpb24gdXNpbmcgUHVtYSBhbGxvd3MgdW50cnVzdGVkIGlucHV0IGluIGFuIGVhcmx5LWhpbnRzIGhlYWRlciwgYW4gYXR0YWNrZXIgY2FuIHVzZSBhIGNhcnJpYWdlIHJldHVybiBjaGFyYWN0ZXIgdG8gZW5kIHRoZSBoZWFkZXIgYW5kIGluamVjdCBtYWxpY2lvdXMgY29udGVudCwgc3VjaCBhcyBhZGRpdGlvbmFsIGhlYWRlcnMgb3IgYW4gZW50aXJlbHkgbmV3IHJlc3BvbnNlIGJvZHkuIFRoaXMgdnVsbmVyYWJpbGl0eSBpcyBrbm93biBhcyBbSFRUUCBSZXNwb25zZSBTcGxpdHRpbmddKGh0dHBzOi8vb3dhc3Aub3JnL3d3dy1jb21tdW5pdHkvYXR0YWNrcy9IVFRQX1Jlc3BvbnNlX1NwbGl0dGluZykuXG5cbldoaWxlIG5vdCBhbiBhdHRhY2sgaW4gaXRzZWxmLCByZXNwb25zZSBzcGxpdHRpbmcgaXMgYSB2ZWN0b3IgZm9yIHNldmVyYWwgb3RoZXIgYXR0YWNrcywgc3VjaCBhcyBjcm9zcy1zaXRlIHNjcmlwdGluZyAoWFNTKS5cblxuVGhpcyBpcyByZWxhdGVkIHRvIFtDVkUtMjAyMC01MjQ3XShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hL3NlY3VyaXR5L2Fkdmlzb3JpZXMvR0hTQS04NGo3LTQ3NXAtaHA4diksIHdoaWNoIGZpeGVkIHRoaXMgdnVsbmVyYWJpbGl0eSBidXQgb25seSBmb3IgcmVndWxhciByZXNwb25zZXMuXG5cbiMjIyBQYXRjaGVzXG5UaGlzIGhhcyBiZWVuIGZpeGVkIGluIDQuMy4zIGFuZCAzLjEyLjQuXG5cbiMjIyBXb3JrYXJvdW5kc1xuVXNlcnMgY2FuIG5vdCBhbGxvdyB1bnRydXN0ZWQvdXNlciBpbnB1dCBpbiB0aGUgRWFybHkgSGludHMgcmVzcG9uc2UgaGVhZGVyLlxuXG4jIyMgRm9yIG1vcmUgaW5mb3JtYXRpb25cbklmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgb3IgY29tbWVudHMgYWJvdXQgdGhpcyBhZHZpc29yeTpcbiogT3BlbiBhbiBpc3N1ZSBpbiBbcHVtYV0oaHR0cHM6Ly9naXRodWIuY29tL3B1bWEvcHVtYSlcbiogRW1haWwgdXMgYSBwcm9qZWN0IG1haW50YWluZXIuIFtFbWFpbCBhZGRyZXNzZXMgYXJlIGxpc3RlZCBpbiBvdXIgQ29kZSBvZiBDb25kdWN0XShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hL2Jsb2IvbWFzdGVyL0NPREVfT0ZfQ09ORFVDVC5tZCNlbmZvcmNlbWVudCkuIiwiY3ZzcyI6eyJzY29yZSI6Ni41fSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS0zM3ZmLTR4Z2ctOXI1OCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjAtNTI0OSJ9XSwic3VtbWFyeSI6IkhUVFAgUmVzcG9uc2UgU3BsaXR0aW5nIChFYXJseSBIaW50cykgaW4gUHVtYSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicHVtYSJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMy4xMi40In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDMuMTIuNCJ9fSx7ImlkIjoiTURJNE9sSmxjRzl6YVhSdmNubFdkV3h1WlhKaFltbHNhWFI1UVd4bGNuUXlOREUxT1RRM09UVT0iLCJudW1iZXIiOjIwLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIwLTAzLTIwVDAzOjI2OjU3WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSBpcyBhIHBvc3NpYmxlIGNyb3NzIHNpdGUgc2NyaXB0aW5nIChYU1MpIHZ1bG5lcmFiaWxpdHkgaW4gQWN0aW9uVmlldydzIEphdmFTY3JpcHQgbGl0ZXJhbCBlc2NhcGUgaGVscGVycy4gIFZpZXdzIHRoYXQgdXNlIHRoZSBgamAgb3IgYGVzY2FwZV9qYXZhc2NyaXB0YCBtZXRob2RzIG1heSBiZSBzdXNjZXB0aWJsZSB0byBYU1MgYXR0YWNrcy5cblxuIyMjIEltcGFjdFxuXG5UaGVyZSBpcyBhIHBvc3NpYmxlIFhTUyB2dWxuZXJhYmlsaXR5IGluIHRoZSBgamAgYW5kIGBlc2NhcGVfamF2YXNjcmlwdGAgbWV0aG9kcyBpbiBBY3Rpb25WaWV3LiAgVGhlc2UgbWV0aG9kcyBhcmUgdXNlZCBmb3IgZXNjYXBpbmcgSmF2YVNjcmlwdCBzdHJpbmcgbGl0ZXJhbHMuICBJbXBhY3RlZCBjb2RlIHdpbGwgbG9vayBzb21ldGhpbmcgbGlrZSB0aGlzOlxuXG5gYGBlcmJcbjxzY3JpcHQ+bGV0IGEgPSBgPCU9IGogdW5rbm93bl9pbnB1dCAlPmA8L3NjcmlwdD5cbmBgYFxuXG5vclxuXG5gYGBlcmJcbjxzY3JpcHQ+bGV0IGEgPSBgPCU9IGVzY2FwZV9qYXZhc2NyaXB0IHVua25vd25faW5wdXQgJT5gPC9zY3JpcHQ+XG5gYGBcblxuIyMjIFJlbGVhc2VzXG5cblRoZSA2LjAuMi4yIGFuZCA1LjIuNC4yIHJlbGVhc2VzIGFyZSBhdmFpbGFibGUgYXQgdGhlIG5vcm1hbCBsb2NhdGlvbnMuXG5cbiMjIyBXb3JrYXJvdW5kc1xuXG5Gb3IgdGhvc2UgdGhhdCBjYW4ndCB1cGdyYWRlLCB0aGUgZm9sbG93aW5nIG1vbmtleSBwYXRjaCBtYXkgYmUgdXNlZDpcblxuYGBgcnVieVxuQWN0aW9uVmlldzo6SGVscGVyczo6SmF2YVNjcmlwdEhlbHBlcjo6SlNfRVNDQVBFX01BUC5tZXJnZSEoXG4gIHtcbiAgICBcImBcIiA9PiBcIlxcXFxgXCIsXG4gICAgXCIkXCIgPT4gXCJcXFxcJFwiXG4gIH1cbilcblxubW9kdWxlIEFjdGlvblZpZXc6OkhlbHBlcnM6OkphdmFTY3JpcHRIZWxwZXJcbiAgYWxpYXMgOm9sZF9laiA6ZXNjYXBlX2phdmFzY3JpcHRcbiAgYWxpYXMgOm9sZF9qIDpqXG5cbiAgZGVmIGVzY2FwZV9qYXZhc2NyaXB0KGphdmFzY3JpcHQpXG4gICAgamF2YXNjcmlwdCA9IGphdmFzY3JpcHQudG9fc1xuICAgIGlmIGphdmFzY3JpcHQuZW1wdHk/XG4gICAgICByZXN1bHQgPSBcIlwiXG4gICAgZWxzZVxuICAgICAgcmVzdWx0ID0gamF2YXNjcmlwdC5nc3ViKC8oXFxcXHw8XFwvfFxcclxcbnxcXDM0MlxcMjAwXFwyNTB8XFwzNDJcXDIwMFxcMjUxfFtcXG5cXHJcIiddfFtgXXxbJF0pL3UsIEpTX0VTQ0FQRV9NQVApXG4gICAgZW5kXG4gICAgamF2YXNjcmlwdC5odG1sX3NhZmU/ID8gcmVzdWx0Lmh0bWxfc2FmZSA6IHJlc3VsdFxuICBlbmRcblxuICBhbGlhcyA6aiA6ZXNjYXBlX2phdmFzY3JpcHRcbmVuZFxuYGBgXG5cbiMjIyBQYXRjaGVzXG5cblRvIGFpZCB1c2VycyB3aG8gYXJlbid0IGFibGUgdG8gdXBncmFkZSBpbW1lZGlhdGVseSB3ZSBoYXZlIHByb3ZpZGVkIHBhdGNoZXMgZm9yXG50aGUgdHdvIHN1cHBvcnRlZCByZWxlYXNlIHNlcmllcy4gVGhleSBhcmUgaW4gZ2l0LWFtIGZvcm1hdCBhbmQgY29uc2lzdCBvZiBhXG5zaW5nbGUgY2hhbmdlc2V0LlxuXG4qIFs1LTItanMtaGVscGVyLXhzcy5wYXRjaF0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vdGVuZGVybG92ZS9jMDQyZmY0OWYwMzQ3YzM3ZTk5MTgzYTY1MDJhY2NjNiNmaWxlLTUtMi1qcy1oZWxwZXIteHNzLXBhdGNoKSAtIFBhdGNoIGZvciA1LjIgc2VyaWVzXG4qIFs2LTAtanMtaGVscGVyLXhzcy5wYXRjaF0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vdGVuZGVybG92ZS9jMDQyZmY0OWYwMzQ3YzM3ZTk5MTgzYTY1MDJhY2NjNiNmaWxlLTYtMC1qcy1oZWxwZXIteHNzLXBhdGNoKSAtIFBhdGNoIGZvciA2LjAgc2VyaWVzXG5cblBsZWFzZSBub3RlIHRoYXQgb25seSB0aGUgNS4yIGFuZCA2LjAgc2VyaWVzIGFyZSBzdXBwb3J0ZWQgYXQgcHJlc2VudC4gVXNlcnNcbm9mIGVhcmxpZXIgdW5zdXBwb3J0ZWQgcmVsZWFzZXMgYXJlIGFkdmlzZWQgdG8gdXBncmFkZSBhcyBzb29uIGFzIHBvc3NpYmxlIGFzIHdlXG5jYW5ub3QgZ3VhcmFudGVlIHRoZSBjb250aW51ZWQgYXZhaWxhYmlsaXR5IG9mIHNlY3VyaXR5IGZpeGVzIGZvciB1bnN1cHBvcnRlZFxucmVsZWFzZXMuXG5cbiMjIyBDcmVkaXRzXG5cblRoYW5rcyB0byBKZXNzZSBDYW1wb3MgZnJvbSBDaGVmIFNlY3VyZSIsImN2c3MiOnsic2NvcmUiOjQuOH0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtNjVjdi1yNng3LTc5aHYifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIwLTUyNjcifV0sInN1bW1hcnkiOiJDcm9zcyBzaXRlIHNjcmlwdGluZyB2dWxuZXJhYmlsaXR5IGluIEFjdGlvblZpZXcifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGlvbnZpZXcifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjUuMi40LjIifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ijw9IDUuMi40LjEifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblF5T1RneE16RTNOamM9IiwibnVtYmVyIjoyMSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMC0wNS0yNlQxOTo0Mzo0OFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiSXQgaXMgcG9zc2libGUgdG8sIGdpdmVuIGEgZ2xvYmFsIENTUkYgdG9rZW4gc3VjaCBhcyB0aGUgb25lIHByZXNlbnQgaW4gdGhlIGF1dGhlbnRpY2l0eV90b2tlbiBtZXRhIHRhZywgZm9yZ2UgYSBwZXItZm9ybSBDU1JGIHRva2VuIGZvciBhbnkgYWN0aW9uIGZvciB0aGF0IHNlc3Npb24uXG5cbkltcGFjdFxuLS0tLS0tXG5cbkdpdmVuIHRoZSBhYmlsaXR5IHRvIGV4dHJhY3QgdGhlIGdsb2JhbCBDU1JGIHRva2VuLCBhbiBhdHRhY2tlciB3b3VsZCBiZSBhYmxlIHRvIGNvbnN0cnVjdCBhIHBlci1mb3JtIENTUkYgdG9rZW4gZm9yIHRoYXQgc2Vzc2lvbi5cblxuV29ya2Fyb3VuZHNcbi0tLS0tLS0tLS0tXG5cblRoaXMgaXMgYSBsb3ctc2V2ZXJpdHkgc2VjdXJpdHkgaXNzdWUuIEFzIHN1Y2gsIG5vIHdvcmthcm91bmQgaXMgbmVjZXNzYXJpbHkgdW50aWwgc3VjaCB0aW1lIGFzIHRoZSBhcHBsaWNhdGlvbiBjYW4gYmUgdXBncmFkZWQuIiwiY3ZzcyI6eyJzY29yZSI6NC4zfSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1qcDV2LTVneDQtam1qOSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjAtODE2NiJ9XSwic3VtbWFyeSI6IkFiaWxpdHkgdG8gZm9yZ2UgcGVyLWZvcm0gQ1NSRiB0b2tlbnMgaW4gUmFpbHMifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGlvbnBhY2sifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjUuMi40LjMifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDUuMC4wLCA8PSA1LjIuNC4yIn19LHsiaWQiOiJNREk0T2xKbGNHOXphWFJ2Y25sV2RXeHVaWEpoWW1sc2FYUjVRV3hsY25ReU9UZ3hNekUzT1RBPSIsIm51bWJlciI6MjIsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjAtMDUtMjZUMTk6NDM6NDhaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGEgc3Ryb25nIHBhcmFtZXRlcnMgYnlwYXNzIHZlY3RvciBpbiBBY3Rpb25QYWNrLlxuXG5WZXJzaW9ucyBBZmZlY3RlZDogIHJhaWxzIDw9IDYuMC4zXG5Ob3QgYWZmZWN0ZWQ6ICAgICAgIHJhaWxzIDwgNS4wLjBcbkZpeGVkIFZlcnNpb25zOiAgICAgcmFpbHMgPj0gNS4yLjQuMywgcmFpbHMgPj0gNi4wLjMuMVxuXG5JbXBhY3Rcbi0tLS0tLVxuSW4gc29tZSBjYXNlcyB1c2VyIHN1cHBsaWVkIGluZm9ybWF0aW9uIGNhbiBiZSBpbmFkdmVydGVudGx5IGxlYWtlZCBmcm9tXG5TdHJvbmcgUGFyYW1ldGVycy4gIFNwZWNpZmljYWxseSB0aGUgcmV0dXJuIHZhbHVlIG9mIGBlYWNoYCwgb3IgYGVhY2hfdmFsdWVgLFxub3IgYGVhY2hfcGFpcmAgd2lsbCByZXR1cm4gdGhlIHVuZGVybHlpbmcgXCJ1bnRydXN0ZWRcIiBoYXNoIG9mIGRhdGEgdGhhdCB3YXNcbnJlYWQgZnJvbSB0aGUgcGFyYW1ldGVycy4gIEFwcGxpY2F0aW9ucyB0aGF0IHVzZSB0aGlzIHJldHVybiB2YWx1ZSBtYXkgYmVcbmluYWR2ZXJ0ZW50bHkgdXNlIHVudHJ1c3RlZCB1c2VyIGlucHV0LlxuXG5JbXBhY3RlZCBjb2RlIHdpbGwgbG9vayBzb21ldGhpbmcgbGlrZSB0aGlzOlxuXG5gYGBcbmRlZiB1cGRhdGVcbiAgIyBBdHRhY2tlciBoYXMgaW5jbHVkZWQgdGhlIHBhcmFtZXRlcjogYHsgaXNfYWRtaW46IHRydWUgfWBcbiAgVXNlci51cGRhdGUoY2xlYW5fdXBfcGFyYW1zKVxuZW5kXG5cbmRlZiBjbGVhbl91cF9wYXJhbXNcbiAgIHBhcmFtcy5lYWNoIHsgfGssIHZ8ICBTb21lTW9kZWwuY2hlY2sodikgaWYgayA9PSA6bmFtZSB9XG5lbmRcbmBgYFxuXG5Ob3RlIHRoZSBtaXN0YWtlbiB1c2Ugb2YgYGVhY2hgIGluIHRoZSBgY2xlYW5fdXBfcGFyYW1zYCBtZXRob2QgaW4gdGhlIGFib3ZlXG5leGFtcGxlLlxuXG5Xb3JrYXJvdW5kc1xuLS0tLS0tLS0tLS1cbkRvIG5vdCB1c2UgdGhlIHJldHVybiB2YWx1ZXMgb2YgYGVhY2hgLCBgZWFjaF92YWx1ZWAsIG9yIGBlYWNoX3BhaXJgIGluIHlvdXJcbmFwcGxpY2F0aW9uLiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS04NzI3LW02Z2otbWMzNyJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjAtODE2NCJ9XSwic3VtbWFyeSI6IlBvc3NpYmxlIFN0cm9uZyBQYXJhbWV0ZXJzIEJ5cGFzcyBpbiBBY3Rpb25QYWNrIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJhY3Rpb25wYWNrIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjUuMi40LjMifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDUuMC4wLCA8PSA1LjIuNC4yIn19LHsiaWQiOiJNREk0T2xKbGNHOXphWFJ2Y25sV2RXeHVaWEpoWW1sc2FYUjVRV3hsY25ReU9UZ3hOemcxTnprPSIsIm51bWJlciI6MjMsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjAtMDUtMjZUMTk6NTk6NTdaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IkluIEFjdGl2ZVN1cHBvcnQsIHRoZXJlIGlzIHBvdGVudGlhbGx5IHVuZXhwZWN0ZWQgYmVoYXZpb3VyIGluIHRoZSBNZW1DYWNoZVN0b3JlIGFuZCBSZWRpc0NhY2hlU3RvcmUgd2hlcmUsIHdoZW5cbnVudHJ1c3RlZCB1c2VyIGlucHV0IGlzIHdyaXR0ZW4gdG8gdGhlIGNhY2hlIHN0b3JlIHVzaW5nIHRoZSBgcmF3OiB0cnVlYCBwYXJhbWV0ZXIsIHJlLXJlYWRpbmcgdGhlIHJlc3VsdFxuZnJvbSB0aGUgY2FjaGUgY2FuIGV2YWx1YXRlIHRoZSB1c2VyIGlucHV0IGFzIGEgTWFyc2hhbGxlZCBvYmplY3QgaW5zdGVhZCBvZiBwbGFpbiB0ZXh0LiBWdWxuZXJhYmxlIGNvZGUgbG9va3MgbGlrZTpcblxuYGBgXG5kYXRhID0gY2FjaGUuZmV0Y2goXCJkZW1vXCIsIHJhdzogdHJ1ZSkgeyB1bnRydXN0ZWRfc3RyaW5nIH1cbmBgYFxuVmVyc2lvbnMgQWZmZWN0ZWQ6ICByYWlscyA8IDUuMi41LCByYWlscyA8IDYuMC40XG5Ob3QgYWZmZWN0ZWQ6ICAgICAgIEFwcGxpY2F0aW9ucyBub3QgdXNpbmcgTWVtQ2FjaGVTdG9yZSBvciBSZWRpc0NhY2hlU3RvcmUuIEFwcGxpY2F0aW9ucyB0aGF0IGRvIG5vdCB1c2UgdGhlIGByYXdgIG9wdGlvbiB3aGVuIHN0b3JpbmcgdW50cnVzdGVkIHVzZXIgaW5wdXQuXG5GaXhlZCBWZXJzaW9uczogICAgIHJhaWxzID49IDUuMi40LjMsIHJhaWxzID49IDYuMC4zLjFcbiAgXG5JbXBhY3Rcbi0tLS0tLVxuVW5tYXJzaGFsbGluZyBvZiB1bnRydXN0ZWQgdXNlciBpbnB1dCBjYW4gaGF2ZSBpbXBhY3QgdXAgdG8gYW5kIGluY2x1ZGluZyBSQ0UuIEF0IGEgbWluaW11bSxcbnRoaXMgdnVsbmVyYWJpbGl0eSBhbGxvd3MgYW4gYXR0YWNrZXIgdG8gaW5qZWN0IHVudHJ1c3RlZCBSdWJ5IG9iamVjdHMgaW50byBhIHdlYiBhcHBsaWNhdGlvbi5cbkluIGFkZGl0aW9uIHRvIHVwZ3JhZGluZyB0byB0aGUgbGF0ZXN0IHZlcnNpb25zIG9mIFJhaWxzLCBkZXZlbG9wZXJzIHNob3VsZCBlbnN1cmUgdGhhdCB3aGVuZXZlclxudGhleSBhcmUgY2FsbGluZyBgUmFpbHMuY2FjaGUuZmV0Y2hgIHRoZXkgYXJlIHVzaW5nIGNvbnNpc3RlbnQgdmFsdWVzIG9mIHRoZSBgcmF3YCBwYXJhbWV0ZXIgZm9yIGJvdGhcbnJlYWRpbmcgYW5kIHdyaXRpbmcsIGVzcGVjaWFsbHkgaW4gdGhlIGNhc2Ugb2YgdGhlIFJlZGlzQ2FjaGVTdG9yZSB3aGljaCBkb2VzIG5vdCwgcHJpb3IgdG8gdGhlc2UgY2hhbmdlcyxcbmRldGVjdCBpZiBkYXRhIHdhcyBzZXJpYWxpemVkIHVzaW5nIHRoZSByYXcgb3B0aW9uIHVwb24gZGVzZXJpYWxpemF0aW9uLlxuXG5Xb3JrYXJvdW5kc1xuLS0tLS0tLS0tLS1cbkl0IGlzIHJlY29tbWVuZGVkIHRoYXQgYXBwbGljYXRpb24gZGV2ZWxvcGVycyBhcHBseSB0aGUgc3VnZ2VzdGVkIHBhdGNoIG9yIHVwZ3JhZGUgdG8gdGhlIGxhdGVzdCByZWxlYXNlIGFzXG5zb29uIGFzIHBvc3NpYmxlLiBJZiB0aGlzIGlzIG5vdCBwb3NzaWJsZSwgd2UgcmVjb21tZW5kIGVuc3VyaW5nIHRoYXQgYWxsIHVzZXItcHJvdmlkZWQgc3RyaW5ncyBjYWNoZWQgdXNpbmdcbnRoZSBgcmF3YCBhcmd1bWVudCBzaG91bGQgYmUgZG91YmxlLWNoZWNrZWQgdG8gZW5zdXJlIHRoYXQgdGhleSBjb25mb3JtIHRvIHRoZSBleHBlY3RlZCBmb3JtYXQuIiwiY3ZzcyI6eyJzY29yZSI6OS44fSwic2V2ZXJpdHkiOiJDUklUSUNBTCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS0ycDY4LWY3NHYtOXdjNiJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjAtODE2NSJ9XSwic3VtbWFyeSI6IkFjdGl2ZVN1cHBvcnQgcG90ZW50aWFsbHkgdW5pbnRlbmRlZCB1bm1hcnNoYWxsaW5nIG9mIHVzZXItcHJvdmlkZWQgb2JqZWN0cyBpbiBNZW1DYWNoZVN0b3JlIGFuZCBSZWRpc0NhY2hlU3RvcmUifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGl2ZXN1cHBvcnQifSwic2V2ZXJpdHkiOiJDUklUSUNBTCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjUuMi40LjMifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDUuMC4wLCA8PSA1LjIuNC4yIn19LHsiaWQiOiJNREk0T2xKbGNHOXphWFJ2Y25sV2RXeHVaWEpoWW1sc2FYUjVRV3hsY25Rek1ETTVORFl6TkRBPSIsIm51bWJlciI6MjQsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjAtMDYtMDVUMTQ6NDY6NThaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIyBJbXBhY3RcblxuVGhlIFJlRG9TIGZsYXcgYWxsb3dzIGFuIGF0dGFja2VyIHRvIGV4aGF1c3QgdGhlIHNlcnZlcidzIGNhcGFjaXR5IHRvIHByb2Nlc3MgaW5jb21pbmcgcmVxdWVzdHMgYnkgc2VuZGluZyBhIFdlYlNvY2tldCBoYW5kc2hha2UgcmVxdWVzdCBjb250YWluaW5nIGEgaGVhZGVyIG9mIHRoZSBmb2xsb3dpbmcgZm9ybTpcblxuICAgIFNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9uczogYTsgYj1cIlxcY1xcY1xcY1xcY1xcY1xcY1xcY1xcY1xcY1xcYyAuLi5cblxuVGhhdCBpcywgYSBoZWFkZXIgY29udGFpbmluZyBhbiB1bmNsb3NlZCBzdHJpbmcgcGFyYW1ldGVyIHZhbHVlIHdob3NlIGNvbnRlbnQgaXMgYSByZXBlYXRpbmcgdHdvLWJ5dGUgc2VxdWVuY2Ugb2YgYSBiYWNrc2xhc2ggYW5kIHNvbWUgb3RoZXIgY2hhcmFjdGVyLiBUaGUgcGFyc2VyIHRha2VzIGV4cG9uZW50aWFsIHRpbWUgdG8gcmVqZWN0IHRoaXMgaGVhZGVyIGFzIGludmFsaWQsIGFuZCB0aGlzIHdpbGwgYmxvY2sgdGhlIHByb2Nlc3Npbmcgb2YgYW55IG90aGVyIHdvcmsgb24gdGhlIHNhbWUgdGhyZWFkLiBUaHVzIGlmIHlvdSBhcmUgcnVubmluZyBhIHNpbmdsZS10aHJlYWRlZCBzZXJ2ZXIsIHN1Y2ggYSByZXF1ZXN0IGNhbiByZW5kZXIgeW91ciBzZXJ2aWNlIGNvbXBsZXRlbHkgdW5hdmFpbGFibGUuXG5cbiMjIyBQYXRjaGVzXG5cblVzZXJzIHNob3VsZCB1cGdyYWRlIHRvIHZlcnNpb24gMC4xLjUuXG5cbiMjIyBXb3JrYXJvdW5kc1xuXG5UaGVyZSBhcmUgbm8ga25vd24gd29yay1hcm91bmRzIG90aGVyIHRoYW4gZGlzYWJsaW5nIGFueSBwdWJsaWMtZmFjaW5nIFdlYlNvY2tldCBmdW5jdGlvbmFsaXR5IHlvdSBhcmUgb3BlcmF0aW5nLlxuXG4jIyMgUmVmZXJlbmNlc1xuXG4tIGh0dHBzOi8vYmxvZy5qY29nbGFuLmNvbS8yMDIwLzA2LzAyL3JlZG9zLXZ1bG5lcmFiaWxpdHktaW4td2Vic29ja2V0LWV4dGVuc2lvbnMvIiwiY3ZzcyI6eyJzY29yZSI6OC4yfSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLWc2d3EtcWN3bS1qNWcyIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMC03NjYzIn1dLCJzdW1tYXJ5IjoiUmVndWxhciBFeHByZXNzaW9uIERlbmlhbCBvZiBTZXJ2aWNlIGluIHdlYnNvY2tldC1leHRlbnNpb25zIChSdWJ5R2VtKSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoid2Vic29ja2V0LWV4dGVuc2lvbnMifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMC4xLjUifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMC4xLjUifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblF6TVRVMk56WXlNVEU9IiwibnVtYmVyIjoyNSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMC0wNi0yNVQwMjoyNjoxMloiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiQSByZWxpYW5jZSBvbiBjb29raWVzIHdpdGhvdXQgdmFsaWRhdGlvbi9pbnRlZ3JpdHkgY2hlY2sgc2VjdXJpdHkgdnVsbmVyYWJpbGl0eSBleGlzdHMgaW4gcmFjayA8IDIuMi4zLCByYWNrIDwgMi4xLjQgdGhhdCBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgYW4gYXR0YWNrZXIgdG8gZm9yZ2UgYSBzZWN1cmUgb3IgaG9zdC1vbmx5IGNvb2tpZSBwcmVmaXguIiwiY3ZzcyI6eyJzY29yZSI6Ny41fSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLWo2dzktZnY2cS0zcTUyIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMC04MTg0In1dLCJzdW1tYXJ5IjoiUmFjayBhbGxvd3MgUGVyY2VudC1lbmNvZGVkIGNvb2tpZXMgdG8gb3ZlcndyaXRlIGV4aXN0aW5nIHByZWZpeGVkIGNvb2tpZSBuYW1lcyJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFjayJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjEuNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAyLjEuNCJ9fSx7ImlkIjoiTURJNE9sSmxjRzl6YVhSdmNubFdkV3h1WlhKaFltbHNhWFI1UVd4bGNuUXpNak16TnpZd016Yz0iLCJudW1iZXIiOjI2LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIwLTA3LTA3VDE5OjAxOjM1WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSBpcyBhIHZ1bG5lcmFiaWxpdHkgaW4gcmFpbHMtdWpzIHRoYXQgYWxsb3dzIGF0dGFja2VycyB0byBzZW5kIENTUkYgdG9rZW5zIHRvIHdyb25nIGRvbWFpbnMuXG5cblZlcnNpb25zIEFmZmVjdGVkOiAgcmFpbHMgPD0gNi4wLjNcbk5vdCBhZmZlY3RlZDogICAgICAgQXBwbGljYXRpb25zIHdoaWNoIGRvbid0IHVzZSByYWlscy11anMuXG5GaXhlZCBWZXJzaW9uczogICAgIHJhaWxzID49IDUuMi40LjMsIHJhaWxzID49IDYuMC4zLjFcblxuSW1wYWN0XG4tLS0tLS1cblxuVGhpcyBpcyBhIHJlZ3Jlc3Npb24gb2YgQ1ZFLTIwMTUtMTg0MC5cblxuSW4gdGhlIHNjZW5hcmlvIHdoZXJlIGFuIGF0dGFja2VyIG1pZ2h0IGJlIGFibGUgdG8gY29udHJvbCB0aGUgaHJlZiBhdHRyaWJ1dGUgb2YgYW4gYW5jaG9yIHRhZyBvciB0aGUgYWN0aW9uIGF0dHJpYnV0ZSBvZiBhIGZvcm0gdGFnIHRoYXQgd2lsbCB0cmlnZ2VyIGEgUE9TVCBhY3Rpb24sIHRoZSBhdHRhY2tlciBjYW4gc2V0IHRoZSBocmVmIG9yIGFjdGlvbiB0byBhIGNyb3NzLW9yaWdpbiBVUkwsIGFuZCB0aGUgQ1NSRiB0b2tlbiB3aWxsIGJlIHNlbnQuXG5cbldvcmthcm91bmRzXG4tLS0tLS0tLS0tLVxuXG5UbyB3b3JrIGFyb3VuZCB0aGlzIHByb2JsZW0sIGNoYW5nZSBjb2RlIHRoYXQgYWxsb3dzIHVzZXJzIHRvIGNvbnRyb2wgdGhlIGhyZWYgYXR0cmlidXRlIG9mIGFuIGFuY2hvciB0YWcgb3IgdGhlIGFjdGlvbiBhdHRyaWJ1dGUgb2YgYSBmb3JtIHRhZyB0byBmaWx0ZXIgdGhlIHVzZXIgcGFyYW1ldGVycy5cblxuRm9yIGV4YW1wbGUsIGNvZGUgbGlrZSB0aGlzOlxuXG4gICAgbGlua190byBwYXJhbXNcblxudG8gY29kZSBsaWtlIHRoaXM6XG5cbiAgICBsaW5rX3RvIGZpbHRlcmVkX3BhcmFtc1xuXG4gICAgZGVmIGZpbHRlcmVkX3BhcmFtc1xuICAgICAgIyBGaWx0ZXIganVzdCB0aGUgcGFyYW1ldGVycyB0aGF0IHlvdSB0cnVzdFxuICAgIGVuZCIsImN2c3MiOnsic2NvcmUiOjYuNX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EteHE1ai1ndzdmLWpnajgifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIwLTgxNjcifV0sInN1bW1hcnkiOiJDU1JGIFZ1bG5lcmFiaWxpdHkgaW4gcmFpbHMtdWpzIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJhY3Rpb252aWV3In0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI1LjIuNC4zIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI+PSA1LjAuMCwgPD0gNS4yLjQuMiJ9fSx7ImlkIjoiTURJNE9sSmxjRzl6YVhSdmNubFdkV3h1WlhKaFltbHNhWFI1UVd4bGNuUTBOVEUzT1RnM05UQT0iLCJudW1iZXIiOjI3LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIwLTEyLTMwVDIzOjQ2OjM3WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyMgU2V2ZXJpdHlcblxuTm9rb2dpcmkgbWFpbnRhaW5lcnMgaGF2ZSBldmFsdWF0ZWQgdGhpcyBhcyBbX19Mb3cgU2V2ZXJpdHlfXyAoQ1ZTUzMgMi42KV0oaHR0cHM6Ly93d3cuZmlyc3Qub3JnL2N2c3MvY2FsY3VsYXRvci8zLjAjQ1ZTUzozLjAvQVY6Ti9BQzpIL1BSOkwvVUk6Ui9TOlUvQzpML0k6Ti9BOk4pLlxuXG5cbiMjIyBEZXNjcmlwdGlvblxuXG5JbiBOb2tvZ2lyaSB2ZXJzaW9ucyA8PSAxLjExLjAucmMzLCBYTUwgU2NoZW1hcyBwYXJzZWQgYnkgYE5va29naXJpOjpYTUw6OlNjaGVtYWAgYXJlICoqdHJ1c3RlZCoqIGJ5IGRlZmF1bHQsIGFsbG93aW5nIGV4dGVybmFsIHJlc291cmNlcyB0byBiZSBhY2Nlc3NlZCBvdmVyIHRoZSBuZXR3b3JrLCBwb3RlbnRpYWxseSBlbmFibGluZyBYWEUgb3IgU1NSRiBhdHRhY2tzLlxuXG5UaGlzIGJlaGF2aW9yIGlzIGNvdW50ZXIgdG8gdGhlIHNlY3VyaXR5IHBvbGljeSBmb2xsb3dlZCBieSBOb2tvZ2lyaSBtYWludGFpbmVycywgd2hpY2ggaXMgdG8gdHJlYXQgYWxsIGlucHV0IGFzICoqdW50cnVzdGVkKiogYnkgZGVmYXVsdCB3aGVuZXZlciBwb3NzaWJsZS5cblxuUGxlYXNlIG5vdGUgdGhhdCB0aGlzIHNlY3VyaXR5IGZpeCB3YXMgcHVzaGVkIGludG8gYSBuZXcgbWlub3IgdmVyc2lvbiwgMS4xMS54LCByYXRoZXIgdGhhbiBhIHBhdGNoIHJlbGVhc2UgdG8gdGhlIDEuMTAueCBicmFuY2gsIGJlY2F1c2UgaXQgaXMgYSBicmVha2luZyBjaGFuZ2UgZm9yIHNvbWUgc2NoZW1hcyBhbmQgdGhlIHJpc2sgd2FzIGFzc2Vzc2VkIHRvIGJlIFwiTG93IFNldmVyaXR5XCIuXG5cblxuIyMjIEFmZmVjdGVkIFZlcnNpb25zXG5cbk5va29naXJpIGA8PSAxLjEwLjEwYCBhcyB3ZWxsIGFzIHByZXJlbGVhc2VzIGAxLjExLjAucmMxYCwgYDEuMTEuMC5yYzJgLCBhbmQgYDEuMTEuMC5yYzNgXG5cblxuIyMjIE1pdGlnYXRpb25cblxuVGhlcmUgYXJlIG5vIGtub3duIHdvcmthcm91bmRzIGZvciBhZmZlY3RlZCB2ZXJzaW9ucy4gVXBncmFkZSB0byBOb2tvZ2lyaSBgMS4xMS4wLnJjNGAgb3IgbGF0ZXIuXG5cbklmLCBhZnRlciB1cGdyYWRpbmcgdG8gYDEuMTEuMC5yYzRgIG9yIGxhdGVyLCB5b3Ugd2lzaCB0byByZS1lbmFibGUgbmV0d29yayBhY2Nlc3MgZm9yIHJlc29sdXRpb24gb2YgZXh0ZXJuYWwgcmVzb3VyY2VzIChpLmUuLCByZXR1cm4gdG8gdGhlIHByZXZpb3VzIGJlaGF2aW9yKTpcblxuMS4gRW5zdXJlIHRoZSBpbnB1dCBpcyB0cnVzdGVkLiBEbyBub3QgZW5hYmxlIHRoaXMgb3B0aW9uIGZvciB1bnRydXN0ZWQgaW5wdXQuXG4yLiBXaGVuIGludm9raW5nIHRoZSBgTm9rb2dpcmk6OlhNTDo6U2NoZW1hYCBjb25zdHJ1Y3RvciwgcGFzcyBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlciBhbiBpbnN0YW5jZSBvZiBgTm9rb2dpcmk6OlhNTDo6UGFyc2VPcHRpb25zYCB3aXRoIHRoZSBgTk9ORVRgIGZsYWcgdHVybmVkIG9mZi5cblxuU28gaWYgeW91ciBwcmV2aW91cyBjb2RlIHdhczpcblxuYGBgIHJ1YnlcbiMgaW4gdjEuMTEuMC5yYzMgYW5kIGVhcmxpZXIsIHRoaXMgY2FsbCBhbGxvd3MgcmVzb3VyY2VzIHRvIGJlIGFjY2Vzc2VkIG92ZXIgdGhlIG5ldHdvcmtcbiMgYnV0IGluIHYxLjExLjAucmM0IGFuZCBsYXRlciwgdGhpcyBjYWxsIHdpbGwgZGlzYWxsb3cgbmV0d29yayBhY2Nlc3MgZm9yIGV4dGVybmFsIHJlc291cmNlc1xuc2NoZW1hID0gTm9rb2dpcmk6OlhNTDo6U2NoZW1hLm5ldyhzY2hlbWEpXG5cbiMgaW4gdjEuMTEuMC5yYzQgYW5kIGxhdGVyLCB0aGUgZm9sbG93aW5nIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGNvZGUgYWJvdmVcbiMgKHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIG9wdGlvbmFsLCBhbmQgdGhpcyBkZW1vbnN0cmF0ZXMgaXRzIGRlZmF1bHQgdmFsdWUpXG5zY2hlbWEgPSBOb2tvZ2lyaTo6WE1MOjpTY2hlbWEubmV3KHNjaGVtYSwgTm9rb2dpcmk6OlhNTDo6UGFyc2VPcHRpb25zOjpERUZBVUxUX1NDSEVNQSlcbmBgYFxuXG5UaGVuIHlvdSBjYW4gYWRkIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGluZGljYXRlIHRoYXQgdGhlIGlucHV0IGlzIHRydXN0ZWQgYnkgY2hhbmdpbmcgaXQgdG86XG5cbmBgYCBydWJ5XG4jIGluIHYxLjExLjAucmMzIGFuZCBlYXJsaWVyLCB0aGlzIHdvdWxkIHJhaXNlIGFuIEFyZ3VtZW50RXJyb3IgXG4jIGJ1dCBpbiB2MS4xMS4wLnJjNCBhbmQgbGF0ZXIsIHRoaXMgYWxsb3dzIHJlc291cmNlcyB0byBiZSBhY2Nlc3NlZCBvdmVyIHRoZSBuZXR3b3JrXG5zY2hlbWEgPSBOb2tvZ2lyaTo6WE1MOjpTY2hlbWEubmV3KHRydXN0ZWRfc2NoZW1hLCBOb2tvZ2lyaTo6WE1MOjpQYXJzZU9wdGlvbnMubmV3Lm5vbm9uZXQpXG5gYGBcblxuXG4jIyMgUmVmZXJlbmNlc1xuXG4tIFtUaGlzIGlzc3VlJ3MgcHVibGljIGFkdmlzb3J5XShodHRwczovL2dpdGh1Yi5jb20vc3BhcmtsZW1vdGlvbi9ub2tvZ2lyaS9zZWN1cml0eS9hZHZpc29yaWVzL0dIU0EtdnI4cS1nNWM3LW01NG0pXG4tIFtPcmlnaW5hbCBIYWNrZXJvbmUgcmVwb3J0IChwcml2YXRlKV0oaHR0cHM6Ly9oYWNrZXJvbmUuY29tL3JlcG9ydHMvNzQ3NDg5KVxuLSBbT1dBU1AgZGVzY3JpcHRpb24gb2YgWFhFIGF0dGFja10oaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YTUxfRXh0ZXJuYWxfRW50aXR5XyhYWEUpX1Byb2Nlc3NpbmcpXG4tIFtPV0FTUCBkZXNjcmlwdGlvbiBvZiBTU1JGIGF0dGFja10oaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9TZXJ2ZXJfU2lkZV9SZXF1ZXN0X0ZvcmdlcnkpXG5cblxuIyMjIENyZWRpdCBcblxuVGhpcyB2dWxuZXJhYmlsaXR5IHdhcyBpbmRlcGVuZGVudGx5IHJlcG9ydGVkIGJ5IEBlcmljLXRoZXJvbmQgYW5kIEBndWNraS5cblxuVGhlIE5va29naXJpIG1haW50YWluZXJzIHdvdWxkIGxpa2UgdG8gdGhhbmsgW0hhY2tlck9uZV0oaHR0cHM6Ly9oYWNrZXJvbmUuY29tL25va29naXJpKSBmb3IgcHJvdmlkaW5nIGEgc2VjdXJlLCByZXNwb25zaWJsZSBtZWNoYW5pc20gZm9yIHJlcG9ydGluZywgYW5kIGZvciBwcm92aWRpbmcgdGhlaXIgZmFudGFzdGljIHNlcnZpY2UgdG8gdXMuIiwiY3ZzcyI6eyJzY29yZSI6NC4zfSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS12cjhxLWc1YzctbTU0bSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjAtMjYyNDcifV0sInN1bW1hcnkiOiJOb2tvZ2lyaTo6WE1MOjpTY2hlbWEgdHJ1c3RzIGlucHV0IGJ5IGRlZmF1bHQsIGV4cG9zaW5nIHJpc2sgb2YgWFhFIHZ1bG5lcmFiaWxpdHkifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjExLjAifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ijw9IDEuMTAuMTAifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblExTXprek9EUTFOek09IiwibnVtYmVyIjoyOCwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMS0wMy0wMlQwNTo1MjoxN1oiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlIFBvc3RncmVTUUwgYWRhcHRlciBpbiBBY3RpdmUgUmVjb3JkIGJlZm9yZSA2LjEuMi4xLCA2LjAuMy41LCA1LjIuNC41IHN1ZmZlcnMgZnJvbSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBkZW5pYWwgb2Ygc2VydmljZSAoUkVEb1MpIHZ1bG5lcmFiaWxpdHkuIENhcmVmdWxseSBjcmFmdGVkIGlucHV0IGNhbiBjYXVzZSB0aGUgaW5wdXQgdmFsaWRhdGlvbiBpbiB0aGUgYG1vbmV5YCB0eXBlIG9mIHRoZSBQb3N0Z3JlU1FMIGFkYXB0ZXIgaW4gQWN0aXZlIFJlY29yZCB0byBzcGVuZCB0b28gbXVjaCB0aW1lIGluIGEgcmVndWxhciBleHByZXNzaW9uLCByZXN1bHRpbmcgaW4gdGhlIHBvdGVudGlhbCBmb3IgYSBEb1MgYXR0YWNrLiBUaGlzIG9ubHkgaW1wYWN0cyBSYWlscyBhcHBsaWNhdGlvbnMgdGhhdCBhcmUgdXNpbmcgUG9zdGdyZVNRTCBhbG9uZyB3aXRoIG1vbmV5IHR5cGUgY29sdW1ucyB0aGF0IHRha2UgdXNlciBpbnB1dC4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtOGhjNC14eG0zLTVwcHAifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIxLTIyODgwIn1dLCJzdW1tYXJ5IjoiQWN0aXZlIFJlY29yZCBzdWJqZWN0IHRvIFJlZ3VsYXIgRXhwcmVzc2lvbiBEZW5pYWwtb2YtU2VydmljZSAoUmVEb1MpIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJhY3RpdmVyZWNvcmQifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNS4yLjQuNSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gNS4wLjAsIDw9IDUuMi40LjQifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblEyTURZeU1qWXhORGs9IiwibnVtYmVyIjoyOSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMS0wNS0wNlQwMjoxOTo0OFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiSW1wYWN0XG4tLS0tLS1cblRoZXJlIGlzIGEgcG9zc2libGUgaW5mb3JtYXRpb24gZGlzY2xvc3VyZSAvIHVuaW50ZW5kZWQgbWV0aG9kIGV4ZWN1dGlvbiB2dWxuZXJhYmlsaXR5IGluIEFjdGlvbiBQYWNrIHdoZW4gdXNpbmcgdGhlIGByZWRpcmVjdF90b2Agb3IgYHBvbHltb3JwaGljX3VybGAgaGVscGVyIHdpdGggdW50cnVzdGVkIHVzZXIgaW5wdXQuXG5cblZ1bG5lcmFibGUgY29kZSB3aWxsIGxvb2sgbGlrZSB0aGlzLlxuXG5gYGBcbnJlZGlyZWN0X3RvKHBhcmFtc1s6c29tZV9wYXJhbV0pXG5gYGBcblxuQWxsIHVzZXJzIHJ1bm5pbmcgYW4gYWZmZWN0ZWQgcmVsZWFzZSBzaG91bGQgZWl0aGVyIHVwZ3JhZGUgb3IgdXNlIG9uZSBvZiB0aGUgd29ya2Fyb3VuZHMgaW1tZWRpYXRlbHkuXG5cblJlbGVhc2VzXG4tLS0tLS0tLVxuVGhlIEZJWEVEIHJlbGVhc2VzIGFyZSBhdmFpbGFibGUgYXQgdGhlIG5vcm1hbCBsb2NhdGlvbnMuXG5cbldvcmthcm91bmRzXG4tLS0tLS0tLS0tLVxuVG8gd29yayBhcm91bmQgdGhpcyBwcm9ibGVtLCBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgYW4gYWxsb3cgbGlzdCBmb3IgdmFsaWQgcGFyYW1ldGVycyBwYXNzZWQgZnJvbSB0aGUgdXNlci4gIEZvciBleGFtcGxlLFxuXG5gYGBydWJ5XG5wcml2YXRlIGRlZiBjaGVjayhwYXJhbSlcbiAgY2FzZSBwYXJhbVxuICB3aGVuIFwidmFsaWRcIlxuICAgIHBhcmFtXG4gIGVsc2VcbiAgICBcIi9cIlxuICBlbmRcbmVuZFxuXG5kZWYgaW5kZXhcbiAgcmVkaXJlY3RfdG8oY2hlY2socGFyYW1zWzpzb21lX3BhcmFtXSkpXG5lbmRcbmBgYFxuXG5PciBmb3JjZSB0aGUgdXNlciBpbnB1dCB0byBiZSBjYXN0IHRvIGEgc3RyaW5nIGxpa2UgdGhpcyxcblxuYGBgcnVieVxuZGVmIGluZGV4XG4gIHJlZGlyZWN0X3RvKHBhcmFtc1s6c29tZV9wYXJhbV0udG9fcylcbmVuZFxuYGBgXG5cblBhdGNoZXNcbi0tLS0tLS1cblRvIGFpZCB1c2VycyB3aG8gYXJlbid0IGFibGUgdG8gdXBncmFkZSBpbW1lZGlhdGVseSB3ZSBoYXZlIHByb3ZpZGVkIHBhdGNoZXMgZm9yIHRoZSB0d28gc3VwcG9ydGVkIHJlbGVhc2Ugc2VyaWVzLiBUaGV5IGFyZSBpbiBnaXQtYW0gZm9ybWF0IGFuZCBjb25zaXN0IG9mIGEgc2luZ2xlIGNoYW5nZXNldC5cblxuKiA1LTItaW5mb3JtYXRpb24tZGlzY2xvc3VyZS5wYXRjaCAtIFBhdGNoIGZvciA1LjIgc2VyaWVzXG4qIDYtMC1pbmZvcm1hdGlvbi1kaXNjbG9zdXJlLnBhdGNoIC0gUGF0Y2ggZm9yIDYuMCBzZXJpZXNcbiogNi0xLWluZm9ybWF0aW9uLWRpc2Nsb3N1cmUucGF0Y2ggLSBQYXRjaCBmb3IgNi4xIHNlcmllc1xuXG5QbGVhc2Ugbm90ZSB0aGF0IG9ubHkgdGhlIDUuMiwgNi4wLCBhbmQgNi4xIHNlcmllcyBhcmUgc3VwcG9ydGVkIGF0IHByZXNlbnQuIFVzZXJzIG9mIGVhcmxpZXIgdW5zdXBwb3J0ZWQgcmVsZWFzZXMgYXJlIGFkdmlzZWQgdG8gdXBncmFkZSBhcyBzb29uIGFzIHBvc3NpYmxlIGFzIHdlIGNhbm5vdCBndWFyYW50ZWUgdGhlIGNvbnRpbnVlZCBhdmFpbGFiaWxpdHkgb2Ygc2VjdXJpdHkgZml4ZXMgZm9yIHVuc3VwcG9ydGVkIHJlbGVhc2VzLlxuXG5DcmVkaXRzXG4tLS0tLS0tXG5cblRoYW5rcyB0byBCZW5vaXQgQ8O0dMOpLUpvZG9pbiBmcm9tIFNob3BpZnkgZm9yIHJlcG9ydGluZyB0aGlzLiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1oamc0LThxNWYteDZmbSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjEtMjI4ODUifV0sInN1bW1hcnkiOiJBY3Rpb24gUGFjayBjb250YWlucyBJbmZvcm1hdGlvbiBEaXNjbG9zdXJlIC8gVW5pbnRlbmRlZCBNZXRob2QgRXhlY3V0aW9uIHZ1bG5lcmFiaWxpdHkifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGlvbnBhY2sifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNS4yLjQuNiJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gMi4wLjAsIDw9IDUuMi40LjUifX0seyJpZCI6Ik1ESTRPbEpsY0c5emFYUnZjbmxXZFd4dVpYSmhZbWxzYVhSNVFXeGxjblEzTURJMU16TXpOelE9IiwibnVtYmVyIjozMCwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMS0wNS0xOFQxNToyMzowMFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhpcyB2dWxuZXJhYmlsaXR5IGlzIHJlbGF0ZWQgdG8gW0NWRS0yMDE5LTE2NzcwXShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hL3NlY3VyaXR5L2Fkdmlzb3JpZXMvR0hTQS03eHgzLW01ODQteDk5NCkuXG5cbiMjIyBJbXBhY3RcblxuVGhlIGZpeCBmb3IgQ1ZFLTIwMTktMTY3NzAgd2FzIGluY29tcGxldGUuIFRoZSBvcmlnaW5hbCBmaXggb25seSBwcm90ZWN0ZWQgZXhpc3RpbmcgY29ubmVjdGlvbnMgdGhhdCBoYWQgYWxyZWFkeSBiZWVuIGFjY2VwdGVkIGZyb20gaGF2aW5nIHRoZWlyIHJlcXVlc3RzIHN0YXJ2ZWQgYnkgZ3JlZWR5IHBlcnNpc3RlbnQtY29ubmVjdGlvbnMgc2F0dXJhdGluZyBhbGwgdGhyZWFkcyBpbiB0aGUgc2FtZSBwcm9jZXNzLiBIb3dldmVyLCBuZXcgY29ubmVjdGlvbnMgbWF5IHN0aWxsIGJlIHN0YXJ2ZWQgYnkgZ3JlZWR5IHBlcnNpc3RlbnQtY29ubmVjdGlvbnMgc2F0dXJhdGluZyBhbGwgdGhyZWFkcyBpbiBhbGwgcHJvY2Vzc2VzIGluIHRoZSBjbHVzdGVyLlxuXG5BIGBwdW1hYCBzZXJ2ZXIgd2hpY2ggcmVjZWl2ZWQgbW9yZSBjb25jdXJyZW50IGBrZWVwLWFsaXZlYCBjb25uZWN0aW9ucyB0aGFuIHRoZSBzZXJ2ZXIgaGFkIHRocmVhZHMgaW4gaXRzIHRocmVhZHBvb2wgd291bGQgc2VydmljZSBvbmx5IGEgc3Vic2V0IG9mIGNvbm5lY3Rpb25zLCBkZW55aW5nIHNlcnZpY2UgdG8gdGhlIHVuc2VydmVkIGNvbm5lY3Rpb25zLlxuXG4jIyMgUGF0Y2hlc1xuXG5UaGlzIHByb2JsZW0gaGFzIGJlZW4gZml4ZWQgaW4gYHB1bWFgIDQuMy44IGFuZCA1LjMuMS5cblxuIyMjIFdvcmthcm91bmRzXG5cblNldHRpbmcgYHF1ZXVlX3JlcXVlc3RzIGZhbHNlYCBhbHNvIGZpeGVzIHRoZSBpc3N1ZS4gVGhpcyBpcyBub3QgYWR2aXNlZCB3aGVuIHVzaW5nIGBwdW1hYCB3aXRob3V0IGEgcmV2ZXJzZSBwcm94eSwgc3VjaCBhcyBgbmdpbnhgIG9yIGBhcGFjaGVgLCBiZWNhdXNlIHlvdSB3aWxsIG9wZW4geW91cnNlbGYgdG8gc2xvdyBjbGllbnQgYXR0YWNrcyAoZS5nLiBbc2xvd2xvcmlzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbG93bG9yaXNfKGNvbXB1dGVyX3NlY3VyaXR5KSkpLlxuXG5UaGUgZml4IGlzIHZlcnkgc21hbGwuIFtBIGdpdCBwYXRjaCBpcyBhdmFpbGFibGUgaGVyZV0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbmF0ZWJlcmtvcGVjLzRiM2VhNTY3NmMwZDcwY2JiMzdjODJkNTRiZTI1ODM3KSBmb3IgdGhvc2UgdXNpbmcgW3Vuc3VwcG9ydGVkIHZlcnNpb25zXShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hL3NlY3VyaXR5L3BvbGljeSNzdXBwb3J0ZWQtdmVyc2lvbnMpIG9mIFB1bWEuXG5cbiMjIyBGb3IgbW9yZSBpbmZvcm1hdGlvblxuXG5JZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IHRoaXMgYWR2aXNvcnk6XG5cbiogT3BlbiBhbiBpc3N1ZSBpbiBbUHVtYV0oaHR0cHM6Ly9naXRodWIuY29tL3B1bWEvcHVtYSkuXG4qIFRvIHJlcG9ydCBwcm9ibGVtcyB3aXRoIHRoaXMgZml4IG9yIHRvIHJlcG9ydCBhbm90aGVyIHZ1bG5lcmFiaWxpdHksIHNlZSBbb3VyIHNlY3VyaXR5IHBvbGljeS5dKGh0dHBzOi8vZ2l0aHViLmNvbS9wdW1hL3B1bWEvc2VjdXJpdHkvcG9saWN5KVxuXG4jIyMgQWNrbm93bGVkZ2VtZW50c1xuXG5UaGFuayB5b3UgdG8gQE1TUC1HcmVnLCBAd2pvcmRhbiBhbmQgQGV2YW5waHggZm9yIHRoZWlyIHJldmlldyBvbiB0aGlzIGlzc3VlLiBcblxuVGhhbmsgeW91IHRvIEBpb3F1YXRpeCBmb3IgcHJvdmlkaW5nIGEgbW9kaWZpZWQgZm9yayBvZiBgd3JrYCB3aGljaCBtYWRlIGRlYnVnZ2luZyB0aGlzIGlzc3VlIG11Y2ggZWFzaWVyLiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1xMjhtLTh4anctOHZyNSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjEtMjk1MDkifV0sInN1bW1hcnkiOiJQdW1hJ3MgS2VlcGFsaXZlIENvbm5lY3Rpb25zIENhdXNpbmcgRGVuaWFsIE9mIFNlcnZpY2UifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InB1bWEifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNC4zLjgifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ijw9IDQuMy43In19LHsiaWQiOiJNREk0T2xKbGNHOXphWFJ2Y25sV2RXeHVaWEpoWW1sc2FYUjVRV3hsY25RM01ETTBPRFk1TXpZPSIsIm51bWJlciI6MzEsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjEtMDUtMTlUMDY6NDc6NDBaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIyBTdW1tYXJ5XG5cbk5va29naXJpIHYxLjExLjQgdXBkYXRlcyB0aGUgdmVuZG9yZWQgbGlieG1sMiBmcm9tIHYyLjkuMTAgdG8gdjIuOS4xMiB3aGljaCBhZGRyZXNzZXM6XG5cbi0gW0NWRS0yMDE5LTIwMzg4XShodHRwczovL3NlY3VyaXR5LmFyY2hsaW51eC5vcmcvQ1ZFLTIwMTktMjAzODgpIChNZWRpdW0gc2V2ZXJpdHkpXG4tIFtDVkUtMjAyMC0yNDk3N10oaHR0cHM6Ly9zZWN1cml0eS5hcmNobGludXgub3JnL0NWRS0yMDIwLTI0OTc3KSAoTWVkaXVtIHNldmVyaXR5KVxuLSBbQ1ZFLTIwMjEtMzUxN10oaHR0cHM6Ly9zZWN1cml0eS5hcmNobGludXgub3JnL0NWRS0yMDIxLTM1MTcpIChNZWRpdW0gc2V2ZXJpdHkpXG4tIFtDVkUtMjAyMS0zNTE4XShodHRwczovL3NlY3VyaXR5LmFyY2hsaW51eC5vcmcvQ1ZFLTIwMjEtMzUxOCkgKE1lZGl1bSBzZXZlcml0eSlcbi0gW0NWRS0yMDIxLTM1MzddKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAyMS0zNTM3KSAoTG93IHNldmVyaXR5KVxuLSBbQ1ZFLTIwMjEtMzU0MV0oaHR0cHM6Ly9zZWN1cml0eS5hcmNobGludXgub3JnL0NWRS0yMDIxLTM1NDEpIChMb3cgc2V2ZXJpdHkpXG5cbk5vdGUgdGhhdCB0d28gYWRkaXRpb25hbCBDVkVzIHdlcmUgYWRkcmVzc2VkIHVwc3RyZWFtIGJ1dCBhcmUgbm90IHJlbGV2YW50IHRvIHRoaXMgcmVsZWFzZS4gW0NWRS0yMDIxLTM1MTZdKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAyMS0zNTE2KSB2aWEgYHhtbGxpbnRgIGlzIG5vdCBwcmVzZW50IGluIE5va29naXJpLCBhbmQgW0NWRS0yMDIwLTc1OTVdKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAyMC03NTk1KSBoYXMgYmVlbiBwYXRjaGVkIGluIE5va29naXJpIHNpbmNlIHYxLjEwLjggKHNlZSAjMTk5MikuXG5cblBsZWFzZSBub3RlIHRoYXQgdGhpcyBhZHZpc29yeSBvbmx5IGFwcGxpZXMgdG8gdGhlIENSdWJ5IGltcGxlbWVudGF0aW9uIG9mIE5va29naXJpIGA8IDEuMTEuNGAsIGFuZCBvbmx5IGlmIHRoZSBwYWNrYWdlZCB2ZXJzaW9uIG9mIGxpYnhtbDIgaXMgYmVpbmcgdXNlZC4gSWYgeW91J3ZlIG92ZXJyaWRkZW4gZGVmYXVsdHMgYXQgaW5zdGFsbGF0aW9uIHRpbWUgdG8gdXNlIHN5c3RlbSBsaWJyYXJpZXMgaW5zdGVhZCBvZiBwYWNrYWdlZCBsaWJyYXJpZXMsIHlvdSBzaG91bGQgaW5zdGVhZCBwYXkgYXR0ZW50aW9uIHRvIHlvdXIgZGlzdHJvJ3MgYGxpYnhtbDJgIHJlbGVhc2UgYW5ub3VuY2VtZW50cy5cblxuXG4jIyMgTWl0aWdhdGlvblxuXG5VcGdyYWRlIHRvIE5va29naXJpIGA+PSAxLjExLjRgLlxuXG5cbiMjIyBJbXBhY3RcblxuSSd2ZSBkb25lIGEgYnJpZWYgYW5hbHlzaXMgb2YgdGhlIHB1Ymxpc2hlZCBDVkVzIHRoYXQgYXJlIGFkZHJlc3NlZCBpbiB0aGlzIHVwc3RyZWFtIHJlbGVhc2UuIFRoZSBsaWJ4bWwyIG1haW50YWluZXJzIGhhdmUgbm90IHJlbGVhc2VkIGEgY2Fub25pY2FsIHNldCBvZiBDVkVzLCBhbmQgc28gdGhpcyBsaXN0IGlzIHBpZWNlZCB0b2dldGhlciBmcm9tIHNlY29uZGFyeSBzb3VyY2VzIGFuZCBtYXkgYmUgaW5jb21wbGV0ZS5cblxuQWxsIGluZm9ybWF0aW9uIGJlbG93IGlzIHNvdXJjZWQgZnJvbSBbc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZ10oaHR0cHM6Ly9zZWN1cml0eS5hcmNobGludXgub3JnKSwgd2hpY2ggYXBwZWFycyB0byBoYXZlIHRoZSBtb3N0IHVwLXRvLWRhdGUgaW5mb3JtYXRpb24gYXMgb2YgdGhpcyBhbmFseXNpcy5cblxuIyMjIyBbQ1ZFLTIwMTktMjAzODhdKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAxOS0yMDM4OClcblxuLSAqKlNldmVyaXR5Kio6IE1lZGl1bVxuLSAqKlR5cGUqKjogRGVuaWFsIG9mIHNlcnZpY2Vcbi0gKipEZXNjcmlwdGlvbioqOiBBIG1lbW9yeSBsZWFrIHdhcyBmb3VuZCBpbiB0aGUgeG1sU2NoZW1hVmFsaWRhdGVTdHJlYW0gZnVuY3Rpb24gb2YgbGlieG1sMi4gQXBwbGljYXRpb25zIHRoYXQgdXNlIHRoaXMgbGlicmFyeSBtYXkgYmUgdnVsbmVyYWJsZSB0byBtZW1vcnkgbm90IGJlaW5nIGZyZWVkIGxlYWRpbmcgdG8gYSBkZW5pYWwgb2Ygc2VydmljZS5cbi0gKipGaXhlZCoqOiBodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi9jb21taXQvN2ZmY2Q0NGQ3ZTZjNDY3MDRmOGFmMDMyMWQ5MzE0Y2QyNmUwZTE4YVxuXG5WZXJpZmllZCB0aGF0IHRoZSBmaXggY29tbWl0IGZpcnN0IGFwcGVhcnMgaW4gdjIuOS4xMS4gSXQgc2VlbXMgcG9zc2libGUgdGhhdCB0aGlzIGlzc3VlIHdvdWxkIGJlIHByZXNlbnQgaW4gcHJvZ3JhbXMgdXNpbmcgTm9rb2dpcmkgPCB2MS4xMS40LlxuXG5cbiMjIyMgW0NWRS0yMDIwLTc1OTVdKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAyMC03NTk1KVxuXG4tICoqU2V2ZXJpdHkqKjogTWVkaXVtXG4tICoqVHlwZSoqOiBEZW5pYWwgb2Ygc2VydmljZVxuLSAqKkRlc2NyaXB0aW9uKio6IHhtbFN0cmluZ0xlbkRlY29kZUVudGl0aWVzIGluIHBhcnNlci5jIGluIGxpYnhtbDIgMi45LjEwIGhhcyBhbiBpbmZpbml0ZSBsb29wIGluIGEgY2VydGFpbiBlbmQtb2YtZmlsZSBzaXR1YXRpb24uXG4tICoqRml4ZWQqKjogaHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2xpYnhtbDIvY29tbWl0LzBlMWE0OWM4OTA3NjQ1ZDJlMTU1ZjBkODlkNGQ5ODk1YWM1MTEyYjVcblxuVGhpcyBoYXMgYmVlbiBwYXRjaGVkIGluIE5va29naXJpIHNpbmNlIHYxLjEwLjggKHNlZSAjMTk5MikuXG5cblxuIyMjIyBbQ1ZFLTIwMjAtMjQ5NzddKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAyMC0yNDk3NylcblxuLSAqKlNldmVyaXR5Kio6IE1lZGl1bVxuLSAqKlR5cGUqKjogSW5mb3JtYXRpb24gZGlzY2xvc3VyZVxuLSAqKkRlc2NyaXB0aW9uKio6IEdOT01FIHByb2plY3QgbGlieG1sMiA8PSAyLjkuMTAgaGFzIGEgZ2xvYmFsIGJ1ZmZlciBvdmVyLXJlYWQgdnVsbmVyYWJpbGl0eSBpbiB4bWxFbmNvZGVFbnRpdGllc0ludGVybmFsIGF0IGxpYnhtbDIvZW50aXRpZXMuYy5cbi0gKipGaXhlZCoqOiBodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi9jb21taXQvNTBmMDZiM2VmYjYzOGVmYjBhYmQ5NWRjNjJkY2EwNWFlNjc4ODJjMlxuXG5WZXJpZmllZCB0aGF0IHRoZSBmaXggY29tbWl0IGZpcnN0IGFwcGVhcnMgaW4gdjIuOS4xMS4gSXQgc2VlbXMgcG9zc2libGUgdGhhdCB0aGlzIGlzc3VlIHdvdWxkIGJlIHByZXNlbnQgaW4gcHJvZ3JhbXMgdXNpbmcgTm9rb2dpcmkgPCB2MS4xMS40LlxuXG5cbiMjIyMgW0NWRS0yMDIxLTM1MTZdKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAyMS0zNTE2KVxuXG4tICoqU2V2ZXJpdHkqKjogTWVkaXVtXG4tICoqVHlwZSoqOiBBcmJpdHJhcnkgY29kZSBleGVjdXRpb24gKG5vIHJlbW90ZSB2ZWN0b3IpXG4tICoqRGVzY3JpcHRpb24qKjogQSB1c2UtYWZ0ZXItZnJlZSBzZWN1cml0eSBpc3N1ZSB3YXMgZm91bmQgbGlieG1sMiBiZWZvcmUgdmVyc2lvbiAyLjkuMTEgd2hlbiBcInhtbGxpbnQgLS1odG1sIC0tcHVzaFwiIGlzIHVzZWQgdG8gcHJvY2VzcyBjcmFmdGVkIGZpbGVzLlxuLSAqKklzc3VlKio6IGh0dHBzOi8vZ2l0bGFiLmdub21lLm9yZy9HTk9NRS9saWJ4bWwyLy0vaXNzdWVzLzIzMFxuLSAqKkZpeGVkKio6IGh0dHBzOi8vZ2l0bGFiLmdub21lLm9yZy9HTk9NRS9saWJ4bWwyLy0vY29tbWl0LzEzNThkMTU3ZDBiZDgzYmUxZGZlMzU2YTY5MjEzZGY5ZmFjMGI1MzlcblxuVmVyaWZpZWQgdGhhdCB0aGUgZml4IGNvbW1pdCBmaXJzdCBhcHBlYXJzIGluIHYyLjkuMTEuIFRoaXMgdmVjdG9yIGRvZXMgbm90IGV4aXN0IHdpdGhpbiBOb2tvZ2lyaSwgd2hpY2ggZG9lcyBub3Qgc2hpcCBgeG1sbGludGAuXG5cblxuIyMjIyBbQ1ZFLTIwMjEtMzUxN10oaHR0cHM6Ly9zZWN1cml0eS5hcmNobGludXgub3JnL0NWRS0yMDIxLTM1MTcpXG5cbi0gKipTZXZlcml0eSoqOiBNZWRpdW1cbi0gKipUeXBlKio6IEFyYml0cmFyeSBjb2RlIGV4ZWN1dGlvblxuLSAqKkRlc2NyaXB0aW9uKio6IEEgaGVhcC1iYXNlZCBidWZmZXIgb3ZlcmZsb3cgd2FzIGZvdW5kIGluIGxpYnhtbDIgYmVmb3JlIHZlcnNpb24gMi45LjExIHdoZW4gcHJvY2Vzc2luZyB0cnVuY2F0ZWQgVVRGLTggaW5wdXQuXG4tICoqSXNzdWUqKjogaHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2xpYnhtbDIvLS9pc3N1ZXMvMjM1XG4tICoqRml4ZWQqKjogaHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2xpYnhtbDIvLS9jb21taXQvYmYyMjcxMzUwN2ZlMWZjM2EyYzRiNTI1Y2YwYTg4YzJkYzg3YTNhMlxuXG5WZXJpZmllZCB0aGF0IHRoZSBmaXggY29tbWl0IGZpcnN0IGFwcGVhcnMgaW4gdjIuOS4xMS4gSXQgc2VlbXMgcG9zc2libGUgdGhhdCB0aGlzIGlzc3VlIHdvdWxkIGJlIHByZXNlbnQgaW4gcHJvZ3JhbXMgdXNpbmcgTm9rb2dpcmkgPCB2MS4xMS40LlxuXG5cbiMjIyMgW0NWRS0yMDIxLTM1MThdKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAyMS0zNTE4KVxuXG4tICoqU2V2ZXJpdHkqKjogTWVkaXVtXG4tICoqVHlwZSoqOiBBcmJpdHJhcnkgY29kZSBleGVjdXRpb25cbi0gKipEZXNjcmlwdGlvbioqOiBBIHVzZS1hZnRlci1mcmVlIHNlY3VyaXR5IGlzc3VlIHdhcyBmb3VuZCBpbiBsaWJ4bWwyIGJlZm9yZSB2ZXJzaW9uIDIuOS4xMSBpbiB4bWxYSW5jbHVkZURvUHJvY2VzcygpIGluIHhpbmNsdWRlLmMgd2hlbiBwcm9jZXNzaW5nIGNyYWZ0ZWQgZmlsZXMuXG4tICoqSXNzdWUqKjogaHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2xpYnhtbDIvLS9pc3N1ZXMvMjM3XG4tICoqRml4ZWQqKjogaHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2xpYnhtbDIvLS9jb21taXQvMTA5OGMzMGEwNDBlNzJhNDY1NDk2ODU0N2Y0MTViZTRlNGM0MGZlN1xuXG5WZXJpZmllZCB0aGF0IHRoZSBmaXggY29tbWl0IGZpcnN0IGFwcGVhcnMgaW4gdjIuOS4xMS4gSXQgc2VlbXMgcG9zc2libGUgdGhhdCB0aGlzIGlzc3VlIHdvdWxkIGJlIHByZXNlbnQgaW4gcHJvZ3JhbXMgdXNpbmcgTm9rb2dpcmkgPCB2MS4xMS40LlxuXG5cbiMjIyMgW0NWRS0yMDIxLTM1MzddKGh0dHBzOi8vc2VjdXJpdHkuYXJjaGxpbnV4Lm9yZy9DVkUtMjAyMS0zNTM3KVxuXG4tICoqU2V2ZXJpdHkqKjogTG93XG4tICoqVHlwZSoqOiBEZW5pYWwgb2Ygc2VydmljZVxuLSAqKkRlc2NyaXB0aW9uKio6IEl0IHdhcyBmb3VuZCB0aGF0IGxpYnhtbDIgYmVmb3JlIHZlcnNpb24gMi45LjExIGRpZCBub3QgcHJvcGFnYXRlIGVycm9ycyB3aGlsZSBwYXJzaW5nIFhNTCBtaXhlZCBjb250ZW50LCBjYXVzaW5nIGEgTlVMTCBkZXJlZmVyZW5jZS4gSWYgYW4gdW50cnVzdGVkIFhNTCBkb2N1bWVudCB3YXMgcGFyc2VkIGluIHJlY292ZXJ5IG1vZGUgYW5kIHBvc3QtdmFsaWRhdGVkLCB0aGUgZmxhdyBjb3VsZCBiZSB1c2VkIHRvIGNyYXNoIHRoZSBhcHBsaWNhdGlvbi5cbi0gKipJc3N1ZSoqOiBodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi8tL2lzc3Vlcy8yNDNcbi0gKipGaXhlZCoqOiBodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi8tL2NvbW1pdC9iYWJlNzUwMzBjN2Y2NGEzNzgyNmJiMzM0MjMxNzEzNDU2OGJlZjYxXG5cblZlcmlmaWVkIHRoYXQgdGhlIGZpeCBjb21taXQgZmlyc3QgYXBwZWFycyBpbiB2Mi45LjExLiBJdCBzZWVtcyBwb3NzaWJsZSB0aGF0IHRoaXMgaXNzdWUgd291bGQgYmUgcHJlc2VudCBpbiBwcm9ncmFtcyB1c2luZyBOb2tvZ2lyaSA8IHYxLjExLjQuXG5cblxuIyMjIyBbQ1ZFLTIwMjEtMzU0MV0oaHR0cHM6Ly9zZWN1cml0eS5hcmNobGludXgub3JnL0NWRS0yMDIxLTM1NDEpXG5cbi0gKipTZXZlcml0eSoqOiBMb3dcbi0gKipUeXBlKio6IERlbmlhbCBvZiBzZXJ2aWNlXG4tICoqRGVzY3JpcHRpb24qKjogQSBzZWN1cml0eSBpc3N1ZSB3YXMgZm91bmQgaW4gbGlieG1sMiBiZWZvcmUgdmVyc2lvbiAyLjkuMTEuIEV4cG9uZW50aWFsIGVudGl0eSBleHBhbnNpb24gYXR0YWNrIGl0cyBwb3NzaWJsZSBieXBhc3NpbmcgYWxsIGV4aXN0aW5nIHByb3RlY3Rpb24gbWVjaGFuaXNtcyBhbmQgbGVhZGluZyB0byBkZW5pYWwgb2Ygc2VydmljZS5cbi0gKipGaXhlZCoqOiBodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi8tL2NvbW1pdC84NTk4MDYwYmFjYWRhNDFhMGViMDlkOTVjOTc3NDRmZjRlNDI4ZjhlXG5cblZlcmlmaWVkIHRoYXQgdGhlIGZpeCBjb21taXQgZmlyc3QgYXBwZWFycyBpbiB2Mi45LjExLiBJdCBzZWVtcyBwb3NzaWJsZSB0aGF0IHRoaXMgaXNzdWUgd291bGQgYmUgcHJlc2VudCBpbiBwcm9ncmFtcyB1c2luZyBOb2tvZ2lyaSA8IHYxLjExLjQsIGhvd2V2ZXIgTm9rb2dpcmkncyBkZWZhdWx0IHBhcnNlIG9wdGlvbnMgcHJldmVudCB0aGUgYXR0YWNrIGZyb20gc3VjY2VlZGluZyAoaXQgaXMgbmVjZXNzYXJ5IHRvIG9wdCBpbnRvIGBEVERMT0FEYCB3aGljaCBpcyBvZmYgYnkgZGVmYXVsdCkuXG5cbkZvciBtb3JlIGRldGFpbHMgc3VwcG9ydGluZyB0aGlzIGFuYWx5c2lzIG9mIHRoaXMgQ1ZFLCBwbGVhc2UgdmlzaXQgIzIyMzMuXG4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTdycm0tdjQ1Zi1qcDY0In1dLCJzdW1tYXJ5IjoiTm9rb2dpcmkgdXBkYXRlcyBwYWNrYWdlZCBkZXBlbmRlbmN5IG9uIGxpYnhtbDIgZnJvbSAyLjkuMTAgdG8gMi45LjEyIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJub2tvZ2lyaSJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS4xMS40In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuMTEuNCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ001WG93ci0iLCJudW1iZXIiOjMzLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIxLTEwLTEyVDE4OjI5OjMxWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyMgSW1wYWN0XG5cblByaW9yIHRvIGBwdW1hYCB2ZXJzaW9uIDUuNS4wLCB1c2luZyBgcHVtYWAgd2l0aCBhIHByb3h5IHdoaWNoIGZvcndhcmRzIExGIGNoYXJhY3RlcnMgYXMgbGluZSBlbmRpbmdzIGNvdWxkIGFsbG93IEhUVFAgcmVxdWVzdCBzbXVnZ2xpbmcuIEEgY2xpZW50IGNvdWxkIHNtdWdnbGUgYSByZXF1ZXN0IHRocm91Z2ggYSBwcm94eSwgY2F1c2luZyB0aGUgcHJveHkgdG8gc2VuZCBhIHJlc3BvbnNlIGJhY2sgdG8gYW5vdGhlciB1bmtub3duIGNsaWVudC5cblxuVGhpcyBiZWhhdmlvciAoZm9yd2FyZGluZyBMRiBjaGFyYWN0ZXJzIGFzIGxpbmUgZW5kaW5ncykgaXMgdmVyeSB1bmNvbW1vbiBhbW9uZ3N0IHByb3h5IHNlcnZlcnMsIHNvIHdlIGhhdmUgZ3JhZGVkIHRoZSBpbXBhY3QgaGVyZSBhcyBcImxvd1wiLiBQdW1hIGlzIG9ubHkgYXdhcmUgb2YgYSBzaW5nbGUgcHJveHkgc2VydmVyIHdoaWNoIGhhcyB0aGlzIGJlaGF2aW9yLlxuXG5JZiB0aGUgcHJveHkgdXNlcyBwZXJzaXN0ZW50IGNvbm5lY3Rpb25zIGFuZCB0aGUgY2xpZW50IGFkZHMgYW5vdGhlciByZXF1ZXN0IGluIHZpYSBIVFRQIHBpcGVsaW5pbmcsIHRoZSBwcm94eSBtYXkgbWlzdGFrZSBpdCBhcyB0aGUgZmlyc3QgcmVxdWVzdCdzIGJvZHkuIFB1bWEsIGhvd2V2ZXIsIHdvdWxkIHNlZSBpdCBhcyB0d28gcmVxdWVzdHMsIGFuZCB3aGVuIHByb2Nlc3NpbmcgdGhlIHNlY29uZCByZXF1ZXN0LCBzZW5kIGJhY2sgYSByZXNwb25zZSB0aGF0IHRoZSBwcm94eSBkb2VzIG5vdCBleHBlY3QuIElmIHRoZSBwcm94eSBoYXMgcmV1c2VkIHRoZSBwZXJzaXN0ZW50IGNvbm5lY3Rpb24gdG8gUHVtYSB0byBzZW5kIGFub3RoZXIgcmVxdWVzdCBmb3IgYSBkaWZmZXJlbnQgY2xpZW50LCB0aGUgc2Vjb25kIHJlc3BvbnNlIGZyb20gdGhlIGZpcnN0IGNsaWVudCB3aWxsIGJlIHNlbnQgdG8gdGhlIHNlY29uZCBjbGllbnQuXG5cbiMjIyBQYXRjaGVzXG5cblRoaXMgdnVsbmVyYWJpbGl0eSB3YXMgcGF0Y2hlZCBpbiBQdW1hIDUuNS4xIGFuZCA0LjMuOS5cblxuIyMjIFdvcmthcm91bmRzXG5cblRoaXMgdnVsbmVyYWJpbGl0eSBvbmx5IGFmZmVjdHMgUHVtYSBpbnN0YWxsYXRpb25zIHdpdGhvdXQgYW55IHByb3h5IGluIGZyb250LlxuXG5Vc2UgYSBwcm94eSB3aGljaCBkb2VzIG5vdCBmb3J3YXJkIExGIGNoYXJhY3RlcnMgYXMgbGluZSBlbmRpbmdzLlxuXG5Qcm94aWVzIHdoaWNoIGRvIG5vdCBmb3J3YXJkIExGIGNoYXJhY3RlcnMgYXMgbGluZSBlbmRpbmdzOlxuXG4qIE5naW54XG4qIEFwYWNoZSAoPjIuNC4yNSlcbiogSGFwcm94eVxuKiBDYWRkeVxuKiBUcmFlZmlrXG5cbiMjIyBQb3NzaWJsZSBCcmVha2FnZVxuXG5JZiB5b3UgYXJlIFtkZWFsaW5nIHdpdGggbGVnYWN5IGNsaWVudHMgdGhhdCB3YW50IHRvIHNlbmQgYExGYCBhcyBhIGxpbmUgZW5kaW5nXShodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MzU3NDQyOC9oYXZlLWFwYWNoZS1hY2NlcHQtbGYtdnMtY3JsZi1pbi1yZXF1ZXN0LWhlYWRlcnMpIGluIGFuIEhUVFAgaGVhZGVyLCB0aGlzIHdpbGwgY2F1c2UgdGhvc2UgY2xpZW50cyB0byByZWNlaXZlIGEgYDQwMGAgZXJyb3IuXG5cbiMjIyBSZWZlcmVuY2VzXG5cbiogW0hUVFAgUmVxdWVzdCBTbXVnZ2xpbmddKGh0dHBzOi8vcG9ydHN3aWdnZXIubmV0L3dlYi1zZWN1cml0eS9yZXF1ZXN0LXNtdWdnbGluZylcblxuIyMjIEZvciBtb3JlIGluZm9ybWF0aW9uXG5cbklmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgb3IgY29tbWVudHMgYWJvdXQgdGhpcyBhZHZpc29yeTpcblxuKiBPcGVuIGFuIGlzc3VlIGluIFtQdW1hXShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hKVxuKiBTZWUgb3VyIFtzZWN1cml0eSBwb2xpY3ldKGh0dHBzOi8vZ2l0aHViLmNvbS9wdW1hL3B1bWEvc2VjdXJpdHkvcG9saWN5KVxuIiwiY3ZzcyI6eyJzY29yZSI6My43fSwic2V2ZXJpdHkiOiJMT1ciLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtNDh3Mi1ybTY1LTYyeHgifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIxLTQxMTM2In1dLCJzdW1tYXJ5IjoiUHVtYSB3aXRoIHByb3h5IHdoaWNoIGZvcndhcmRzIExGIGNoYXJhY3RlcnMgYXMgbGluZSBlbmRpbmdzIGNvdWxkIGFsbG93IEhUVFAgcmVxdWVzdCBzbXVnZ2xpbmcifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InB1bWEifSwic2V2ZXJpdHkiOiJMT1ciLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI0LjMuOSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCA0LjMuOSJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ001WlB0MHQiLCJudW1iZXIiOjM0LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIxLTExLTA0VDE5OjMyOjEyWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyMgU2V2ZXJpdHlcblxuVGhlIE5va29naXJpIG1haW50YWluZXJzIGhhdmUgZXZhbHVhdGVkIHRoaXMgYXMgWyoqSGlnaCBTZXZlcml0eSoqIDcuNSAoQ1ZTUzMuMCldKGh0dHBzOi8vd3d3LmZpcnN0Lm9yZy9jdnNzL2NhbGN1bGF0b3IvMy4wI0NWU1M6My4wL0FWOk4vQUM6TC9QUjpOL1VJOk4vUzpVL0M6SC9JOk4vQTpOL0U6SC9STDpPL1JDOkMvTUFWOk4vTUFDOkwpIGZvciBKUnVieSB1c2Vycy4gKFRoaXMgc2VjdXJpdHkgYWR2aXNvcnkgZG9lcyBub3QgYXBwbHkgdG8gQ1J1YnkgdXNlcnMuKVxuXG5cbiMjIyBJbXBhY3RcblxuSW4gTm9rb2dpcmkgdjEuMTIuNCBhbmQgZWFybGllciwgKipvbiBKUnVieSBvbmx5KiosIHRoZSBTQVggcGFyc2VyIHJlc29sdmVzIGV4dGVybmFsIGVudGl0aWVzIGJ5IGRlZmF1bHQuXG5cblVzZXJzIG9mIE5va29naXJpIG9uIEpSdWJ5IHdobyBwYXJzZSB1bnRydXN0ZWQgZG9jdW1lbnRzIHVzaW5nIGFueSBvZiB0aGVzZSBjbGFzc2VzIGFyZSBhZmZlY3RlZDpcblxuLSBOb2tvZ2lyaTo6WE1MOjpTQVg6OlBhcnNlclxuLSBOb2tvZ2lyaTo6SFRNTDQ6OlNBWDo6UGFyc2VyIG9yIGl0cyBhbGlhcyBOb2tvZ2lyaTo6SFRNTDo6U0FYOjpQYXJzZXJcbi0gTm9rb2dpcmk6OlhNTDo6U0FYOjpQdXNoUGFyc2VyXG4tIE5va29naXJpOjpIVE1MNDo6U0FYOjpQdXNoUGFyc2VyIG9yIGl0cyBhbGlhcyBOb2tvZ2lyaTo6SFRNTDo6U0FYOjpQdXNoUGFyc2VyXG5cblxuIyMjIE1pdGlnYXRpb25cblxuSlJ1YnkgdXNlcnMgc2hvdWxkIHVwZ3JhZGUgdG8gTm9rb2dpcmkgdjEuMTIuNSBvciBsYXRlci4gVGhlcmUgYXJlIG5vIHdvcmthcm91bmRzIGF2YWlsYWJsZSBmb3IgdjEuMTIuNCBvciBlYXJsaWVyLlxuXG5DUnVieSB1c2VycyBhcmUgbm90IGFmZmVjdGVkLiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS0ycnI1LThxMzctMnc3aCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjEtNDEwOTgifV0sInN1bW1hcnkiOiJJbXByb3BlciBSZXN0cmljdGlvbiBvZiBYTUwgRXh0ZXJuYWwgRW50aXR5IFJlZmVyZW5jZSAoWFhFKSBpbiBOb2tvZ2lyaSBvbiBKUnVieSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibm9rb2dpcmkifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS4xMi41In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8PSAxLjEyLjQifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNNWo0QllvIiwibnVtYmVyIjozNSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMi0wMi0xMVQyMTozMTowOFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMjIEltcGFjdFxuXG5VbmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMgcmVzcG9uc2UgYm9kaWVzIHdpbGwgbm90IGJlIGNsb3NlZCwgZm9yIGV4YW1wbGUgYSBbYnVnIGluIGEgd2Vic2VydmVyXShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hL3B1bGwvMjgxMikgb3IgYSBidWcgaW4gYSBSYWNrIG1pZGRsZXdhcmUuICBJbiB0aGUgZXZlbnQgYSByZXNwb25zZSBpcyAqbm90KiBub3RpZmllZCBvZiBhIGBjbG9zZWAsIGBBY3Rpb25EaXNwYXRjaDo6RXhlY3V0b3JgIHdpbGwgbm90IGtub3cgdG8gcmVzZXQgdGhyZWFkIGxvY2FsIHN0YXRlIGZvciB0aGUgbmV4dCByZXF1ZXN0LiAgVGhpcyBjYW4gbGVhZCB0byBkYXRhIGJlaW5nIGxlYWtlZCB0byBzdWJzZXF1ZW50IHJlcXVlc3RzLCBlc3BlY2lhbGx5IHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBgQWN0aXZlU3VwcG9ydDo6Q3VycmVudEF0dHJpYnV0ZXNgLlxuXG5VcGdyYWRpbmcgdG8gdGhlIEZJWEVEIHZlcnNpb25zIG9mIFJhaWxzIHdpbGwgZW5zdXJlIG1pdGlnYXRpb24gb2YgdGhpcyBpc3N1ZSBldmVuIGluIHRoZSBjb250ZXh0IG9mIGEgYnVnZ3kgd2Vic2VydmVyIG9yIG1pZGRsZXdhcmUgaW1wbGVtZW50YXRpb24uXG5cbiMjIyBQYXRjaGVzXG5cblRoaXMgaGFzIGJlZW4gZml4ZWQgaW4gUmFpbHMgNy4wLjIuMiwgNi4xLjQuNiwgNi4wLjQuNiwgYW5kIDUuMi42LjIuXG5cbiMjIyBXb3JrYXJvdW5kc1xuXG5VcGdyYWRpbmcgaXMgaGlnaGx5IHJlY29tbWVuZGVkLCBidXQgdG8gd29yayBhcm91bmQgdGhpcyBwcm9ibGVtIHRoZSBmb2xsb3dpbmcgbWlkZGxld2FyZSBjYW4gYmUgdXNlZDpcblxuYGBgcnVieVxuY2xhc3MgR3VhcmRlZEV4ZWN1dG9yIDwgQWN0aW9uRGlzcGF0Y2g6OkV4ZWN1dG9yXG4gIGRlZiBjYWxsKGVudilcbiAgICBlbnN1cmVfY29tcGxldGVkIVxuICAgIHN1cGVyXG4gIGVuZFxuXG4gIHByaXZhdGVcblxuICAgIGRlZiBlbnN1cmVfY29tcGxldGVkIVxuICAgICAgQGV4ZWN1dG9yLm5ldy5jb21wbGV0ZSEgaWYgQGV4ZWN1dG9yLmFjdGl2ZT9cbiAgICBlbmRcbmVuZFxuXG4jIEVuc3VyZSB0aGUgZ3VhcmQgaXMgaW5zZXJ0ZWQgYmVmb3JlIEFjdGlvbkRpc3BhdGNoOjpFeGVjdXRvclxuUmFpbHMuYXBwbGljYXRpb24uY29uZmlndXJlIGRvXG4gIGNvbmZpZy5taWRkbGV3YXJlLnN3YXAgQWN0aW9uRGlzcGF0Y2g6OkV4ZWN1dG9yLCBHdWFyZGVkRXhlY3V0b3IsIGV4ZWN1dG9yXG5lbmRcbmBgYCIsImN2c3MiOnsic2NvcmUiOjcuNH0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS13aDk4LXAyOHItdnJjOSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjItMjM2MzMifV0sInN1bW1hcnkiOiJFeHBvc3VyZSBvZiBpbmZvcm1hdGlvbiBpbiBBY3Rpb24gUGFjayJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoiYWN0aW9ucGFjayJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI1LjIuNi4yIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI+PSA1LjAuMC4wLCA8PSA1LjIuNi4xIn19LHsiaWQiOiJSVkFfa3dET0J6bURnTTVqNTlfZyIsIm51bWJlciI6MzYsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjItMDItMTFUMjI6MDg6MDlaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIyBJbXBhY3RcblByaW9yIHRvIGBwdW1hYCB2ZXJzaW9uIGA1LjYuMmAsIGBwdW1hYCBtYXkgbm90IGFsd2F5cyBjYWxsIGBjbG9zZWAgb24gdGhlIHJlc3BvbnNlIGJvZHkuIFJhaWxzLCBwcmlvciB0byB2ZXJzaW9uIGA3LjAuMi4yYCwgZGVwZW5kZWQgb24gdGhlIHJlc3BvbnNlIGJvZHkgYmVpbmcgY2xvc2VkIGluIG9yZGVyIGZvciBpdHMgYEN1cnJlbnRBdHRyaWJ1dGVzYCBpbXBsZW1lbnRhdGlvbiB0byB3b3JrIGNvcnJlY3RseS5cblxuRnJvbSBSYWlsczpcblxuPiBVbmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMgcmVzcG9uc2UgYm9kaWVzIHdpbGwgbm90IGJlIGNsb3NlZCwgZm9yIGV4YW1wbGUgYSBidWcgaW4gYSB3ZWJzZXJ2ZXJbMV0gb3IgYSBidWcgaW4gYSBSYWNrIG1pZGRsZXdhcmUuIEluIHRoZSBldmVudCBhIHJlc3BvbnNlIGlzIG5vdCBub3RpZmllZCBvZiBhIGNsb3NlLCBBY3Rpb25EaXNwYXRjaDo6RXhlY3V0b3Igd2lsbCBub3Qga25vdyB0byByZXNldCB0aHJlYWQgbG9jYWwgc3RhdGUgZm9yIHRoZSBuZXh0IHJlcXVlc3QuIFRoaXMgY2FuIGxlYWQgdG8gZGF0YSBiZWluZyBsZWFrZWQgdG8gc3Vic2VxdWVudCByZXF1ZXN0cywgZXNwZWNpYWxseSB3aGVuIGludGVyYWN0aW5nIHdpdGggQWN0aXZlU3VwcG9ydDo6Q3VycmVudEF0dHJpYnV0ZXMuXG5cblRoZSBjb21iaW5hdGlvbiBvZiB0aGVzZSB0d28gYmVoYXZpb3JzIChQdW1hIG5vdCBjbG9zaW5nIHRoZSBib2R5ICsgUmFpbHMnIEV4ZWN1dG9yIGltcGxlbWVudGF0aW9uKSBjYXVzZXMgaW5mb3JtYXRpb24gbGVha2FnZS5cblxuIyMjIFBhdGNoZXNcblRoaXMgcHJvYmxlbSBpcyBmaXhlZCBpbiBQdW1hIHZlcnNpb25zIDUuNi4yIGFuZCA0LjMuMTEuXG5cblRoaXMgcHJvYmxlbSBpcyBmaXhlZCBpbiBSYWlscyB2ZXJzaW9ucyA3LjAyLjIsIDYuMS40LjYsIDYuMC40LjYsIGFuZCA1LjIuNi4yLlxuXG5TZWU6IFxuaHR0cHM6Ly9naXRodWIuY29tL2Fkdmlzb3JpZXMvR0hTQS13aDk4LXAyOHItdnJjOSBcbmZvciBkZXRhaWxzIGFib3V0IHRoZSByYWlscyB2dWxuZXJhYmlsaXR5XG5cblVwZ3JhZGluZyB0byBhIHBhdGNoZWQgUmFpbHMgX29yXyBQdW1hIHZlcnNpb24gZml4ZXMgdGhlIHZ1bG5lcmFiaWxpdHkuXG5cbiMjIyBXb3JrYXJvdW5kc1xuXG5VcGdyYWRlIHRvIFJhaWxzIHZlcnNpb25zIDcuMDIuMiwgNi4xLjQuNiwgNi4wLjQuNiwgYW5kIDUuMi42LjIuXG5cblRoZSBbUmFpbHMgQ1ZFXShodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvcnVieS1zZWN1cml0eS1hbm4vYy9Ga1RNLV83elNOQS9tL0syUmlNSkJsQkFBSj91dG1fbWVkaXVtPWVtYWlsJnV0bV9zb3VyY2U9Zm9vdGVyJnBsaT0xKSBpbmNsdWRlcyBhIG1pZGRsZXdhcmUgdGhhdCBjYW4gYmUgdXNlZCBpbnN0ZWFkLlxuXG4jIyMgUmVmZXJlbmNlc1xuXG4qIFJhaWxzIENWRTogW0NWRS0yMDIyLTIzNjMzXShodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvcnVieS1zZWN1cml0eS1hbm4vYy9Ga1RNLV83elNOQS9tL0syUmlNSkJsQkFBSj91dG1fbWVkaXVtPWVtYWlsJnV0bV9zb3VyY2U9Zm9vdGVyJnBsaT0xKVxuXG4jIyMgRm9yIG1vcmUgaW5mb3JtYXRpb25cbklmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgb3IgY29tbWVudHMgYWJvdXQgdGhpcyBhZHZpc29yeTpcbiogT3BlbiBhbiBpc3N1ZSBpbiBbcHVtYV0oaHR0cHM6Ly9naXRodWIuY29tL3B1bWEvcHVtYSlcbiogU2VlIG91ciBbc2VjdXJpdHkgcG9saWN5XShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hL3NlY3VyaXR5L3BvbGljeSkiLCJjdnNzIjp7InNjb3JlIjo4LjB9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0Etcm1qOC04aGhoLWd2NWgifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIyLTIzNjM0In1dLCJzdW1tYXJ5IjoiUHVtYSB1c2VkIHdpdGggUmFpbHMgbWF5IGxlYWQgdG8gSW5mb3JtYXRpb24gRXhwb3N1cmUifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InB1bWEifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNC4zLjExIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDQuMy4xMSJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ001blpDQzYiLCJudW1iZXIiOjM3LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTAyLTI2VDAzOjQxOjQ4WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyMgU3VtbWFyeVxuXG5Ob2tvZ2lyaSBbdjEuMTMuMl0oaHR0cHM6Ly9naXRodWIuY29tL3NwYXJrbGVtb3Rpb24vbm9rb2dpcmkvcmVsZWFzZXMvdGFnL3YxLjEzLjIpIHVwZ3JhZGVzIHR3byBvZiBpdHMgcGFja2FnZWQgZGVwZW5kZW5jaWVzOlxuXG4tIHZlbmRvcmVkIGxpYnhtbDIgZnJvbSB2Mi45LjEyIHRvIFt2Mi45LjEzXShodHRwczovL2Rvd25sb2FkLmdub21lLm9yZy9zb3VyY2VzL2xpYnhtbDIvMi45L2xpYnhtbDItMi45LjEzLm5ld3MpXG4tIHZlbmRvcmVkIGxpYnhzbHQgZnJvbSB2MS4xLjM0IHRvIFt2MS4xLjM1XShodHRwczovL2Rvd25sb2FkLmdub21lLm9yZy9zb3VyY2VzL2xpYnhzbHQvMS4xL2xpYnhzbHQtMS4xLjM1Lm5ld3MpXG5cblRob3NlIGxpYnJhcnkgdmVyc2lvbnMgYWRkcmVzcyB0aGUgZm9sbG93aW5nIHVwc3RyZWFtIENWRXM6XG5cbi0gbGlieHNsdDogW0NWRS0yMDIxLTMwNTYwXShodHRwczovL252ZC5uaXN0Lmdvdi92dWxuL2RldGFpbC9DVkUtMjAyMS0zMDU2MCkgKENWU1MgOC44LCBIaWdoIHNldmVyaXR5KVxuLSBsaWJ4bWwyOiBbQ1ZFLTIwMjItMjMzMDhdKGh0dHBzOi8vbnZkLm5pc3QuZ292L3Z1bG4vZGV0YWlsL0NWRS0yMDIyLTIzMzA4KSAoVW5zcGVjaWZpZWQgc2V2ZXJpdHksIHNlZSBtb3JlIGluZm9ybWF0aW9uIGJlbG93KVxuXG5UaG9zZSBsaWJyYXJ5IHZlcnNpb25zIGFsc28gYWRkcmVzcyBudW1lcm91cyBvdGhlciBpc3N1ZXMgaW5jbHVkaW5nIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cywgcmVncmVzc2lvbiBmaXhlcywgYW5kIGJ1ZyBmaXhlcywgYXMgd2VsbCBhcyBtZW1vcnkgbGVha3MgYW5kIG90aGVyIHVzZS1hZnRlci1mcmVlIGlzc3VlcyB0aGF0IHdlcmUgbm90IGFzc2lnbmVkIENWRXMuXG5cblBsZWFzZSBub3RlIHRoYXQgdGhpcyBhZHZpc29yeSBvbmx5IGFwcGxpZXMgdG8gdGhlIENSdWJ5IGltcGxlbWVudGF0aW9uIG9mIE5va29naXJpIGA8IDEuMTMuMmAsIGFuZCBvbmx5IGlmIHRoZSBfcGFja2FnZWRfIGxpYnJhcmllcyBhcmUgYmVpbmcgdXNlZC4gSWYgeW91J3ZlIG92ZXJyaWRkZW4gZGVmYXVsdHMgYXQgaW5zdGFsbGF0aW9uIHRpbWUgdG8gdXNlIF9zeXN0ZW1fIGxpYnJhcmllcyBpbnN0ZWFkIG9mIHBhY2thZ2VkIGxpYnJhcmllcywgeW91IHNob3VsZCBpbnN0ZWFkIHBheSBhdHRlbnRpb24gdG8geW91ciBkaXN0cm8ncyBgbGlieG1sMmAgYW5kIGBsaWJ4c2x0YCByZWxlYXNlIGFubm91bmNlbWVudHMuXG5cblxuIyMjIE1pdGlnYXRpb25cblxuVXBncmFkZSB0byBOb2tvZ2lyaSBgPj0gMS4xMy4yYC5cblxuVXNlcnMgd2hvIGFyZSB1bmFibGUgdG8gdXBncmFkZSBOb2tvZ2lyaSBtYXkgYWxzbyBjaG9vc2UgYSBtb3JlIGNvbXBsaWNhdGVkIG1pdGlnYXRpb246IGNvbXBpbGUgYW5kIGxpbmsgYW4gb2xkZXIgdmVyc2lvbiBOb2tvZ2lyaSBhZ2FpbnN0IGV4dGVybmFsIGxpYnJhcmllcyBsaWJ4bWwyIGA+PSAyLjkuMTNgIGFuZCBsaWJ4c2x0IGA+PSAxLjEuMzVgLCB3aGljaCB3aWxsIGFsc28gYWRkcmVzcyB0aGVzZSBzYW1lIENWRXMuXG5cblxuIyMjIEltcGFjdFxuXG4jIyMjIGxpYnhzbHQgW0NWRS0yMDIxLTMwNTYwXShodHRwczovL252ZC5uaXN0Lmdvdi92dWxuL2RldGFpbC9DVkUtMjAyMS0zMDU2MClcblxuLSBDVlNTMyBzY29yZTogOC44IChIaWdoKVxuLSBGaXhlZCBieSBodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieHNsdC8tL2NvbW1pdC81MGY5YzljXG5cbkFsbCB2ZXJzaW9ucyBvZiBsaWJ4c2x0IHByaW9yIHRvIHYxLjEuMzUgYXJlIGFmZmVjdGVkLlxuXG5BcHBsaWNhdGlvbnMgdXNpbmcgKip1bnRydXN0ZWQqKiBYU0wgc3R5bGVzaGVldHMgdG8gdHJhbnNmb3JtIFhNTCBhcmUgdnVsbmVyYWJsZSB0byBhIGRlbmlhbC1vZi1zZXJ2aWNlIGF0dGFjayBhbmQgc2hvdWxkIGJlIHVwZ3JhZGVkIGltbWVkaWF0ZWx5LlxuXG5cbiMjIyMgbGlieG1sMiBbQ1ZFLTIwMjItMjMzMDhdKGh0dHBzOi8vbnZkLm5pc3QuZ292L3Z1bG4vZGV0YWlsL0NWRS0yMDIyLTIzMzA4KVxuXG4tIEFzIG9mIHRoZSB0aW1lIHRoaXMgc2VjdXJpdHkgYWR2aXNvcnkgd2FzIHB1Ymxpc2hlZCwgdGhlcmUgaXMgbm8gb2ZmaWNpYWxseSBwdWJsaXNoZWQgaW5mb3JtYXRpb24gYXZhaWxhYmxlIGFib3V0IHRoaXMgQ1ZFJ3Mgc2V2ZXJpdHkuIFRoZSBhYm92ZSBOSVNUIGxpbmsgZG9lcyBub3QgeWV0IGhhdmUgYSBwdWJsaXNoZWQgcmVjb3JkLCBhbmQgdGhlIGxpYnhtbDIgbWFpbnRhaW5lciBoYXMgZGVjbGluZWQgdG8gcHJvdmlkZSBhIHNldmVyaXR5IHNjb3JlLlxuLSBGaXhlZCBieSBodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi8tL2NvbW1pdC82NTJkZDEyXG4tIEZ1cnRoZXIgZXhwbGFuYXRpb24gaXMgYXQgaHR0cHM6Ly9tYWlsLmdub21lLm9yZy9hcmNoaXZlcy94bWwvMjAyMi1GZWJydWFyeS9tc2cwMDAxNS5odG1sXG5cblRoZSB1cHN0cmVhbSBjb21taXQgYW5kIHRoZSBleHBsYW5hdGlvbiBsaW5rZWQgYWJvdmUgaW5kaWNhdGUgdGhhdCBhbiBhcHBsaWNhdGlvbiBtYXkgYmUgdnVsbmVyYWJsZSB0byBhIGRlbmlhbCBvZiBzZXJ2aWNlLCBtZW1vcnkgZGlzY2xvc3VyZSwgb3IgY29kZSBleGVjdXRpb24gaWYgaXQgcGFyc2VzIGFuICoqdW50cnVzdGVkKiogZG9jdW1lbnQgd2l0aCBwYXJzZSBvcHRpb25zIGBEVERWQUxJRGAgc2V0IHRvIHRydWUsIGFuZCBgTk9FTlRgIHNldCB0byBmYWxzZS5cblxuQW4gYW5hbHlzaXMgb2YgdGhlc2UgcGFyc2Ugb3B0aW9uczpcblxuLSBXaGlsZSBgTk9FTlRgIGlzIG9mZiBieSBkZWZhdWx0IGZvciBEb2N1bWVudCwgRG9jdW1lbnRGcmFnbWVudCwgUmVhZGVyLCBhbmQgU2NoZW1hIHBhcnNpbmcsIGl0IGlzIG9uIGJ5IGRlZmF1bHQgZm9yIFhTTFQgKHN0eWxlc2hlZXQpIHBhcnNpbmcgaW4gTm9rb2dpcmkgdjEuMTIuMCBhbmQgbGF0ZXIuXG4tIGBEVERWQUxJRGAgaXMgYW4gb3B0aW9uIHRoYXQgTm9rb2dpcmkgZG9lcyBub3Qgc2V0IGZvciBhbnkgb3BlcmF0aW9ucywgYW5kIHNvIHRoaXMgQ1ZFIGFwcGxpZXMgb25seSB0byBhcHBsaWNhdGlvbnMgc2V0dGluZyB0aGlzIG9wdGlvbiBleHBsaWNpdGx5LlxuXG5JdCBzZWVtcyByZWFzb25hYmxlIHRvIGFzc3VtZSB0aGF0IGFueSBhcHBsaWNhdGlvbiBleHBsaWNpdGx5IHNldHRpbmcgdGhlIHBhcnNlIG9wdGlvbiBgRFREVkFMSURgIHdoZW4gcGFyc2luZyAqKnVudHJ1c3RlZCoqIGRvY3VtZW50cyBpcyB2dWxuZXJhYmxlIGFuZCBzaG91bGQgYmUgdXBncmFkZWQgaW1tZWRpYXRlbHkuXG4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtZnE0Mi1jNXJnLTkyYzIifV0sInN1bW1hcnkiOiJWdWxuZXJhYmxlIGRlcGVuZGVuY2llcyBpbiBOb2tvZ2lyaSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibm9rb2dpcmkifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS4xMy4yIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuMTMuMiJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ002QmhLcmkiLCJudW1iZXIiOjM4LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTAzLTMwVDIyOjMyOjAzWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJXaGVuIHVzaW5nIFB1bWEgYmVoaW5kIGEgcHJveHkgdGhhdCBkb2VzIG5vdCBwcm9wZXJseSB2YWxpZGF0ZSB0aGF0IHRoZSBpbmNvbWluZyBIVFRQIHJlcXVlc3QgbWF0Y2hlcyB0aGUgUkZDNzIzMCBzdGFuZGFyZCwgUHVtYSBhbmQgdGhlIGZyb250ZW5kIHByb3h5IG1heSBkaXNhZ3JlZSBvbiB3aGVyZSBhIHJlcXVlc3Qgc3RhcnRzIGFuZCBlbmRzLiBUaGlzIHdvdWxkIGFsbG93IHJlcXVlc3RzIHRvIGJlIHNtdWdnbGVkIHZpYSB0aGUgZnJvbnQtZW5kIHByb3h5IHRvIFB1bWEuXG5cblRoZSBmb2xsb3dpbmcgdnVsbmVyYWJpbGl0aWVzIGFyZSBhZGRyZXNzZWQgYnkgdGhpcyBhZHZpc29yeTpcbi0gTGVuaWVudCBwYXJzaW5nIG9mIGBUcmFuc2Zlci1FbmNvZGluZ2AgaGVhZGVycywgd2hlbiB1bnN1cHBvcnRlZCBlbmNvZGluZ3Mgc2hvdWxkIGJlIHJlamVjdGVkIGFuZCB0aGUgZmluYWwgZW5jb2RpbmcgbXVzdCBiZSBgY2h1bmtlZGAuXG4tIExlbmllbnQgcGFyc2luZyBvZiBtYWxmb3JtZWQgYENvbnRlbnQtTGVuZ3RoYCBoZWFkZXJzIGFuZCBjaHVuayBzaXplcywgd2hlbiBvbmx5IGRpZ2l0cyBhbmQgaGV4IGRpZ2l0cyBzaG91bGQgYmUgYWxsb3dlZC5cbi0gTGVuaWVudCBwYXJzaW5nIG9mIGR1cGxpY2F0ZSBgQ29udGVudC1MZW5ndGhgIGhlYWRlcnMsIHdoZW4gdGhleSBzaG91bGQgYmUgcmVqZWN0ZWQuXG4tIExlbmllbnQgcGFyc2luZyBvZiB0aGUgZW5kaW5nIG9mIGNodW5rZWQgc2VnbWVudHMsIHdoZW4gdGhleSBzaG91bGQgZW5kIHdpdGggYFxcclxcbmAuXG5cblRoZSB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGZpeGVkIGluIDUuNi40IGFuZCA0LjMuMTIuIFdoZW4gZGVwbG95aW5nIGEgcHJveHkgaW4gZnJvbnQgb2YgUHVtYSwgdHVybmluZyBvbiBhbnkgYW5kIGFsbCBmdW5jdGlvbmFsaXR5IHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSByZXF1ZXN0IG1hdGNoZXMgdGhlIFJGQzcyMzAgc3RhbmRhcmQuIFxuXG5UaGVzZSBwcm94eSBzZXJ2ZXJzIGFyZSBrbm93biB0byBoYXZlIFwiZ29vZFwiIGJlaGF2aW9yIHJlOiB0aGlzIHN0YW5kYXJkIGFuZCB1cGdyYWRpbmcgUHVtYSBtYXkgbm90IGJlIG5lY2Vzc2FyeS4gVXNlcnMgYXJlIGVuY291cmFnZWQgdG8gdmFsaWRhdGUgZm9yIHRoZW1zZWx2ZXMuXG5cbi0gTmdpbnggKGxhdGVzdClcbi0gQXBhY2hlIChsYXRlc3QpXG4tIEhhcHJveHkgMi41K1xuLSBDYWRkeSAobGF0ZXN0KVxuLSBUcmFlZmlrIChsYXRlc3QpIiwiY3ZzcyI6eyJzY29yZSI6OS4xfSwic2V2ZXJpdHkiOiJDUklUSUNBTCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1oOTl3LTlxNXItZ2pxOSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjItMjQ3OTAifV0sInN1bW1hcnkiOiJQdW1hIHZ1bG5lcmFibGUgdG8gSFRUUCBSZXF1ZXN0IFNtdWdnbGluZyJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicHVtYSJ9LCJzZXZlcml0eSI6IkNSSVRJQ0FMIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNC4zLjEyIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDQuMy4xMiJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ002RUJBck8iLCJudW1iZXIiOjM5LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTA0LTExVDIzOjQ4OjIwWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyBTdW1tYXJ5XG5cbk5va29naXJpIHYxLjEzLjQgdXBkYXRlcyB0aGUgdmVuZG9yZWQgemxpYiBmcm9tIDEuMi4xMSB0byAxLjIuMTIsIHdoaWNoIGFkZHJlc3NlcyBbQ1ZFLTIwMTgtMjUwMzJdKGh0dHBzOi8vbnZkLm5pc3QuZ292L3Z1bG4vZGV0YWlsL0NWRS0yMDE4LTI1MDMyKS4gVGhhdCBDVkUgaXMgc2NvcmVkIGFzIENWU1MgNy40IFwiSGlnaFwiIG9uIHRoZSBOVkQgcmVjb3JkIGFzIG9mIDIwMjItMDQtMDUuXG5cblBsZWFzZSBub3RlIHRoYXQgdGhpcyBhZHZpc29yeSBvbmx5IGFwcGxpZXMgdG8gdGhlIENSdWJ5IGltcGxlbWVudGF0aW9uIG9mIE5va29naXJpIGA8IDEuMTMuNGAsIGFuZCBvbmx5IGlmIHRoZSBwYWNrYWdlZCB2ZXJzaW9uIG9mIGB6bGliYCBpcyBiZWluZyB1c2VkLiBQbGVhc2Ugc2VlIFt0aGlzIGRvY3VtZW50XShodHRwczovL25va29naXJpLm9yZy9MSUNFTlNFLURFUEVOREVOQ0lFUy5odG1sI2RlZmF1bHQtcGxhdGZvcm0tcmVsZWFzZS1ydWJ5KSBmb3IgYSBjb21wbGV0ZSBkZXNjcmlwdGlvbiBvZiB3aGljaCBwbGF0Zm9ybSBnZW1zIHZlbmRvciBgemxpYmAuIElmIHlvdSd2ZSBvdmVycmlkZGVuIGRlZmF1bHRzIGF0IGluc3RhbGxhdGlvbiB0aW1lIHRvIHVzZSBzeXN0ZW0gbGlicmFyaWVzIGluc3RlYWQgb2YgcGFja2FnZWQgbGlicmFyaWVzLCB5b3Ugc2hvdWxkIGluc3RlYWQgcGF5IGF0dGVudGlvbiB0byB5b3VyIGRpc3RybydzIGB6bGliYCByZWxlYXNlIGFubm91bmNlbWVudHMuIFxuXG4jIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gTm9rb2dpcmkgYD49IHYxLjEzLjRgLlxuXG4jIyBJbXBhY3RcblxuIyMjIFtDVkUtMjAxOC0yNTAzMl0oaHR0cHM6Ly9udmQubmlzdC5nb3YvdnVsbi9kZXRhaWwvQ1ZFLTIwMTgtMjUwMzIpIGluIHpsaWJcblxuLSAqKlNldmVyaXR5Kio6IEhpZ2hcbi0gKipUeXBlKio6IFtDV0UtNzg3XShodHRwczovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy83ODcuaHRtbCkgT3V0IG9mIGJvdW5kcyB3cml0ZVxuLSAqKkRlc2NyaXB0aW9uKio6IHpsaWIgYmVmb3JlIDEuMi4xMiBhbGxvd3MgbWVtb3J5IGNvcnJ1cHRpb24gd2hlbiBkZWZsYXRpbmcgKGkuZS4sIHdoZW4gY29tcHJlc3NpbmcpIGlmIHRoZSBpbnB1dCBoYXMgbWFueSBkaXN0YW50IG1hdGNoZXMuXG5cbiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS12NmdwLTltbW0tYzZwNSJ9XSwic3VtbWFyeSI6Ik91dC1vZi1ib3VuZHMgV3JpdGUgaW4gemxpYiBhZmZlY3RzIE5va29naXJpIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJub2tvZ2lyaSJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjEzLjQifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS4xMy40In19LHsiaWQiOiJSVkFfa3dET0J6bURnTTZFQkFzTiIsIm51bWJlciI6NDAsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjItMDQtMTFUMjM6NDg6MjBaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIFN1bW1hcnlcblxuTm9rb2dpcmkgYDwgdjEuMTMuNGAgY29udGFpbnMgYW4gaW5lZmZpY2llbnQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgc3VzY2VwdGlibGUgdG8gZXhjZXNzaXZlIGJhY2t0cmFja2luZyB3aGVuIGF0dGVtcHRpbmcgdG8gZGV0ZWN0IGVuY29kaW5nIGluIEhUTUwgZG9jdW1lbnRzLlxuXG4jIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gTm9rb2dpcmkgYD49IDEuMTMuNGAuXG5cblxuIyMgU2V2ZXJpdHlcblxuVGhlIE5va29naXJpIG1haW50YWluZXJzIGhhdmUgZXZhbHVhdGVkIHRoaXMgYXMgWyoqSGlnaCBTZXZlcml0eSoqIDcuNSAoQ1ZTUzMuMSldKGh0dHBzOi8vd3d3LmZpcnN0Lm9yZy9jdnNzL2NhbGN1bGF0b3IvMy4xI0NWU1M6My4xL0FWOk4vQUM6TC9QUjpOL1VJOk4vUzpVL0M6Ti9JOk4vQTpIKS5cblxuXG4jIyBSZWZlcmVuY2VzXG5cbltDV0UtMTMzM10oaHR0cHM6Ly9jd2UubWl0cmUub3JnL2RhdGEvZGVmaW5pdGlvbnMvMTMzMy5odG1sKSBJbmVmZmljaWVudCBSZWd1bGFyIEV4cHJlc3Npb24gQ29tcGxleGl0eVxuXG5cbiMjIENyZWRpdFxuXG5UaGlzIHZ1bG5lcmFiaWxpdHkgd2FzIHJlcG9ydGVkIGJ5IEhhY2tlck9uZSB1c2VyIG9vb29vb29fcSAo44Gq44Gq44GK44GPKS5cbiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1jcmpyLTlyYzUtZ2h3OCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjItMjQ4MzYifV0sInN1bW1hcnkiOiJOb2tvZ2lyaSBJbmVmZmljaWVudCBSZWd1bGFyIEV4cHJlc3Npb24gQ29tcGxleGl0eSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibm9rb2dpcmkifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS4xMy40In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuMTMuNCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ002RUJBdW8iLCJudW1iZXIiOjQxLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTA0LTExVDIzOjQ4OjIxWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyBTdW1tYXJ5XG5cbk5va29naXJpIHYxLjEzLjQgdXBkYXRlcyB0aGUgdmVuZG9yZWQgYHhlcmNlczp4ZXJjZXNJbXBsYCBmcm9tIDIuMTIuMCB0byAyLjEyLjIsIHdoaWNoIGFkZHJlc3NlcyBbQ1ZFLTIwMjItMjM0MzddKGh0dHBzOi8vbnZkLm5pc3QuZ292L3Z1bG4vZGV0YWlsL0NWRS0yMDIyLTIzNDM3KS4gVGhhdCBDVkUgaXMgc2NvcmVkIGFzIENWU1MgNi41IFwiTWVkaXVtXCIgb24gdGhlIE5WRCByZWNvcmQuXG5cblBsZWFzZSBub3RlIHRoYXQgdGhpcyBhZHZpc29yeSBvbmx5IGFwcGxpZXMgdG8gdGhlICoqSlJ1YnkqKiBpbXBsZW1lbnRhdGlvbiBvZiBOb2tvZ2lyaSBgPCAxLjEzLjRgLlxuXG4jIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gTm9rb2dpcmkgYD49IHYxLjEzLjRgLlxuXG4jIyBJbXBhY3RcblxuIyMjIFtDVkUtMjAyMi0yMzQzN10oaHR0cHM6Ly9udmQubmlzdC5nb3YvdnVsbi9kZXRhaWwvQ1ZFLTIwMjItMjM0MzcpIGluIHhlcmNlcy1KXG5cbi0gKipTZXZlcml0eSoqOiBNZWRpdW1cbi0gKipUeXBlKio6IFtDV0UtOTFdKGh0dHBzOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzkxLmh0bWwpIFhNTCBJbmplY3Rpb24gKGFrYSBCbGluZCBYUGF0aCBJbmplY3Rpb24pXG4tICoqRGVzY3JpcHRpb24qKjogVGhlcmUncyBhIHZ1bG5lcmFiaWxpdHkgd2l0aGluIHRoZSBBcGFjaGUgWGVyY2VzIEphdmEgKFhlcmNlc0opIFhNTCBwYXJzZXIgd2hlbiBoYW5kbGluZyBzcGVjaWFsbHkgY3JhZnRlZCBYTUwgZG9jdW1lbnQgcGF5bG9hZHMuIFRoaXMgY2F1c2VzLCB0aGUgWGVyY2VzSiBYTUwgcGFyc2VyIHRvIHdhaXQgaW4gYW4gaW5maW5pdGUgbG9vcCwgd2hpY2ggbWF5IHNvbWV0aW1lcyBjb25zdW1lIHN5c3RlbSByZXNvdXJjZXMgZm9yIHByb2xvbmdlZCBkdXJhdGlvbi4gVGhpcyB2dWxuZXJhYmlsaXR5IGlzIHByZXNlbnQgd2l0aGluIFhlcmNlc0ogdmVyc2lvbiAyLjEyLjEgYW5kIHRoZSBwcmV2aW91cyB2ZXJzaW9ucy5cbi0gKipTZWUgYWxzbyoqOiBodHRwczovL2dpdGh1Yi5jb20vYWR2aXNvcmllcy9HSFNBLWg2NWYtanZxdy1tOWZqXG5cbiIsImN2c3MiOnsic2NvcmUiOjYuNX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EteHh4OS0zeGNyLWdqajMifV0sInN1bW1hcnkiOiJYTUwgSW5qZWN0aW9uIGluIFhlcmNlcyBKYXZhIGFmZmVjdHMgTm9rb2dpcmkifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjEzLjQifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS4xMy40In19LHsiaWQiOiJSVkFfa3dET0J6bURnTTZFQlFMQyIsIm51bWJlciI6NDIsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjItMDQtMTFUMjM6NTI6NTBaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIFN1bW1hcnlcblxuTm9rb2dpcmkgYHYxLjEzLjRgIHVwZGF0ZXMgdGhlIHZlbmRvcmVkIGBvcmcuY3liZXJuZWtvLmh0bWxgIGxpYnJhcnkgdG8gYDEuOS4yMi5ub2tvMmAgd2hpY2ggYWRkcmVzc2VzIFtDVkUtMjAyMi0yNDgzOV0oaHR0cHM6Ly9naXRodWIuY29tL3NwYXJrbGVtb3Rpb24vbmVrb2h0bWwvc2VjdXJpdHkvYWR2aXNvcmllcy9HSFNBLTk4NDktcDdqYy05cm12KS4gVGhhdCBDVkUgaXMgcmF0ZWQgNy41IChIaWdoIFNldmVyaXR5KS5cblxuU2VlIFtHSFNBLTk4NDktcDdqYy05cm12XShodHRwczovL2dpdGh1Yi5jb20vc3BhcmtsZW1vdGlvbi9uZWtvaHRtbC9zZWN1cml0eS9hZHZpc29yaWVzL0dIU0EtOTg0OS1wN2pjLTlybXYpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG5QbGVhc2Ugbm90ZSB0aGF0IHRoaXMgYWR2aXNvcnkgb25seSBhcHBsaWVzIHRvIHRoZSAqKkpSdWJ5KiogaW1wbGVtZW50YXRpb24gb2YgTm9rb2dpcmkgYDwgMS4xMy40YC5cblxuXG4jIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gTm9rb2dpcmkgYD49IDEuMTMuNGAuXG5cblxuIyMgSW1wYWN0XG5cbiMjIyBbQ1ZFLTIwMjItMjQ4MzldKGh0dHBzOi8vZ2l0aHViLmNvbS9zcGFya2xlbW90aW9uL25la29odG1sL3NlY3VyaXR5L2Fkdmlzb3JpZXMvR0hTQS05ODQ5LXA3amMtOXJtdikgaW4gbmVrb2h0bWxcblxuLSAqKlNldmVyaXR5Kio6IEhpZ2ggNy41XG4tICoqVHlwZSoqOiBbQ1dFLTQwMF0oaHR0cHM6Ly9jd2UubWl0cmUub3JnL2RhdGEvZGVmaW5pdGlvbnMvNDAwLmh0bWwpIFVuY29udHJvbGxlZCBSZXNvdXJjZSBDb25zdW1wdGlvblxuLSAqKkRlc2NyaXB0aW9uKio6IFRoZSBmb3JrIG9mIGBvcmcuY3liZXJuZWtvLmh0bWxgIHVzZWQgYnkgTm9rb2dpcmkgKFJ1YnlnZW0pIHJhaXNlcyBhIGBqYXZhLmxhbmcuT3V0T2ZNZW1vcnlFcnJvcmAgZXhjZXB0aW9uIHdoZW4gcGFyc2luZyBpbGwtZm9ybWVkIEhUTUwgbWFya3VwLlxuLSAqKlNlZSBhbHNvKio6IFtHSFNBLTk4NDktcDdqYy05cm12XShodHRwczovL2dpdGh1Yi5jb20vc3BhcmtsZW1vdGlvbi9uZWtvaHRtbC9zZWN1cml0eS9hZHZpc29yaWVzL0dIU0EtOTg0OS1wN2pjLTlybXYpXG4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtZ3g4eC1nODdtLWg1cTYifV0sInN1bW1hcnkiOiJEZW5pYWwgb2YgU2VydmljZSAoRG9TKSBpbiBOb2tvZ2lyaSBvbiBKUnVieSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibm9rb2dpcmkifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS4xMy40In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuMTMuNCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ002Sk9pa2oiLCJudW1iZXIiOjQzLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTA0LTI4VDA3OjIyOjMwWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSBpcyBhIHBvc3NpYmxlIFhTUyB2dWxuZXJhYmlsaXR5IGluIEFjdGlvbiBWaWV3IHRhZyBoZWxwZXJzLiBQYXNzaW5nIHVudHJ1c3RlZCBpbnB1dCBhcyBoYXNoIGtleXMgY2FuIGxlYWQgdG8gYSBwb3NzaWJsZSBYU1MgdnVsbmVyYWJpbGl0eS4gVGhpcyB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGFzc2lnbmVkIHRoZSBDVkUgaWRlbnRpZmllciBDVkUtMjAyMi0yNzc3Ny5cblxuVmVyc2lvbnMgQWZmZWN0ZWQ6ICBBTExcbk5vdCBhZmZlY3RlZDogICAgICAgTk9ORVxuRml4ZWQgVmVyc2lvbnM6ICAgICA3LjAuMi40LCA2LjEuNS4xLCA2LjAuNC44LCA1LjIuNy4xXG5cbiMjIEltcGFjdFxuXG5JZiB1bnRydXN0ZWQgZGF0YSBpcyBwYXNzZWQgYXMgdGhlIGhhc2gga2V5IGZvciB0YWcgYXR0cmlidXRlcywgdGhlcmUgaXMgYSBwb3NzaWJpbGl0eSB0aGF0IHRoZSB1bnRydXN0ZWQgZGF0YSBtYXkgbm90IGJlIHByb3Blcmx5IGVzY2FwZWQgd2hpY2ggY2FuIGxlYWQgdG8gYW4gWFNTIHZ1bG5lcmFiaWxpdHkuXG5cbkltcGFjdGVkIGNvZGUgd2lsbCBsb29rIHNvbWV0aGluZyBsaWtlIHRoaXM6XG5cbmBgYFxuY2hlY2tfYm94X3RhZygndGhlbmFtZScsICd0aGV2YWx1ZScsIGZhbHNlLCBhcmlhOiB7IG1hbGljaW91c19pbnB1dCA9PiAndGhldmFsdWVvZmFyaWEnIH0pXG5gYGBcblxuV2hlcmUgdGhlIFwibWFsaWNpb3VzX2lucHV0XCIgdmFyaWFibGUgY29udGFpbnMgdW50cnVzdGVkIGRhdGEuXG5cbkFsbCB1c2VycyBydW5uaW5nIGFuIGFmZmVjdGVkIHJlbGVhc2Ugc2hvdWxkIGVpdGhlciB1cGdyYWRlIG9yIHVzZSBvbmUgb2YgdGhlIHdvcmthcm91bmRzIGltbWVkaWF0ZWx5LlxuXG4jIyBSZWxlYXNlc1xuXG5UaGUgRklYRUQgcmVsZWFzZXMgYXJlIGF2YWlsYWJsZSBhdCB0aGUgbm9ybWFsIGxvY2F0aW9ucy5cblxuIyMgV29ya2Fyb3VuZHNcblxuRXNjYXBlIHRoZSB1bnRydXN0ZWQgZGF0YSBiZWZvcmUgdXNpbmcgaXQgYXMgYSBrZXkgZm9yIHRhZyBoZWxwZXIgbWV0aG9kcy5cbiIsImN2c3MiOnsic2NvcmUiOjYuMX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtY2gzaC1qMnZmLTk1cHYifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIyLTI3Nzc3In1dLCJzdW1tYXJ5IjoiWFNTIFZ1bG5lcmFiaWxpdHkgaW4gQWN0aW9uIFZpZXcgdGFnIGhlbHBlcnMifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGlvbnZpZXcifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjUuMi43LjEifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ijw9IDUuMi43LjAifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNNk9Rc0dtIiwibnVtYmVyIjo0NCwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMi0wNS0xOFQyMToyNjozM1oiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMjIFN1bW1hcnlcblxuTm9rb2dpcmkgdjEuMTMuNSB1cGdyYWRlcyB0aGUgcGFja2FnZWQgdmVyc2lvbiBvZiBpdHMgZGVwZW5kZW5jeSBsaWJ4bWwyIGZyb20gdjIuOS4xMyB0byBbdjIuOS4xNF0oaHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2xpYnhtbDIvLS9yZWxlYXNlcy92Mi45LjE0KS5cblxubGlieG1sMiB2Mi45LjE0IGFkZHJlc3NlcyBbQ1ZFLTIwMjItMjk4MjRdKGh0dHBzOi8vbnZkLm5pc3QuZ292L3Z1bG4vZGV0YWlsL0NWRS0yMDIyLTI5ODI0KS4gVGhpcyB2ZXJzaW9uIGFsc28gaW5jbHVkZXMgc2V2ZXJhbCBzZWN1cml0eS1yZWxhdGVkIGJ1ZyBmaXhlcyBmb3Igd2hpY2ggQ1ZFcyB3ZXJlIG5vdCBjcmVhdGVkLCBpbmNsdWRpbmcgYSBwb3RlbnRpYWwgZG91YmxlLWZyZWUsIHBvdGVudGlhbCBtZW1vcnkgbGVha3MsIGFuZCBpbnRlZ2VyLW92ZXJmbG93LlxuXG5QbGVhc2Ugbm90ZSB0aGF0IHRoaXMgYWR2aXNvcnkgb25seSBhcHBsaWVzIHRvIHRoZSBDUnVieSBpbXBsZW1lbnRhdGlvbiBvZiBOb2tvZ2lyaSBgPCAxLjEzLjVgLCBhbmQgb25seSBpZiB0aGUgX3BhY2thZ2VkXyBsaWJyYXJpZXMgYXJlIGJlaW5nIHVzZWQuIElmIHlvdSd2ZSBvdmVycmlkZGVuIGRlZmF1bHRzIGF0IGluc3RhbGxhdGlvbiB0aW1lIHRvIHVzZSBfc3lzdGVtXyBsaWJyYXJpZXMgaW5zdGVhZCBvZiBwYWNrYWdlZCBsaWJyYXJpZXMsIHlvdSBzaG91bGQgaW5zdGVhZCBwYXkgYXR0ZW50aW9uIHRvIHlvdXIgZGlzdHJvJ3MgYGxpYnhtbDJgIGFuZCBgbGlieHNsdGAgcmVsZWFzZSBhbm5vdW5jZW1lbnRzLlxuXG5cbiMjIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gTm9rb2dpcmkgYD49IDEuMTMuNWAuXG5cblVzZXJzIHdobyBhcmUgdW5hYmxlIHRvIHVwZ3JhZGUgTm9rb2dpcmkgbWF5IGFsc28gY2hvb3NlIGEgbW9yZSBjb21wbGljYXRlZCBtaXRpZ2F0aW9uOiBjb21waWxlIGFuZCBsaW5rIE5va29naXJpIGFnYWluc3QgZXh0ZXJuYWwgbGlicmFyaWVzIGxpYnhtbDIgYD49IDIuOS4xNGAgd2hpY2ggd2lsbCBhbHNvIGFkZHJlc3MgdGhlc2Ugc2FtZSBpc3N1ZXMuXG5cblxuIyMjIEltcGFjdFxuXG4jIyMjIGxpYnhtbDIgW0NWRS0yMDIyLTI5ODI0XShodHRwczovL252ZC5uaXN0Lmdvdi92dWxuL2RldGFpbC9DVkUtMjAyMi0yOTgyNClcblxuLSAqKkNWU1MzIHNjb3JlKio6XG4gIC0gVW5zcGVjaWZpZWQgdXBzdHJlYW1cbiAgLSBOb2tvZ2lyaSBtYWludGFpbmVycyBldmFsdWF0ZSBhdCA4LjYgKEhpZ2gpIChbQ1ZTUzozLjEvQVY6Ti9BQzpML1BSOk4vVUk6Ti9TOlUvQzpML0k6TC9BOkhdKGh0dHBzOi8vd3d3LmZpcnN0Lm9yZy9jdnNzL2NhbGN1bGF0b3IvMy4xI0NWU1M6My4xL0FWOk4vQUM6TC9QUjpOL1VJOk4vUzpVL0M6TC9JOkwvQTpIKSkuIE5vdGUgdGhhdCB0aGlzIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBDVlNTIGFzc2Vzc2VkIGJ5IE5WRC5cbi0gKipUeXBlKio6IERlbmlhbCBvZiBzZXJ2aWNlLCBpbmZvcm1hdGlvbiBkaXNjbG9zdXJlXG4tICoqRGVzY3JpcHRpb24qKjogSW4gbGlieG1sMiBiZWZvcmUgMi45LjE0LCBzZXZlcmFsIGJ1ZmZlciBoYW5kbGluZyBmdW5jdGlvbnMgaW4gYnVmLmMgKHhtbEJ1ZiopIGFuZCB0cmVlLmMgKHhtbEJ1ZmZlciopIGRvbid0IGNoZWNrIGZvciBpbnRlZ2VyIG92ZXJmbG93cy4gVGhpcyBjYW4gcmVzdWx0IGluIG91dC1vZi1ib3VuZHMgbWVtb3J5IHdyaXRlcy4gRXhwbG9pdGF0aW9uIHJlcXVpcmVzIGEgdmljdGltIHRvIG9wZW4gYSBjcmFmdGVkLCBtdWx0aS1naWdhYnl0ZSBYTUwgZmlsZS4gT3RoZXIgc29mdHdhcmUgdXNpbmcgbGlieG1sMidzIGJ1ZmZlciBmdW5jdGlvbnMsIGZvciBleGFtcGxlIGxpYnhzbHQgdGhyb3VnaCAxLjEuMzUsIGlzIGFmZmVjdGVkIGFzIHdlbGwuXG4tICoqRml4ZWQqKjogaHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2xpYnhtbDIvLS9jb21taXQvMjU1NGEyNFxuXG5BbGwgdmVyc2lvbnMgb2YgbGlibWwyIHByaW9yIHRvIHYyLjkuMTQgYXJlIGFmZmVjdGVkLlxuXG5BcHBsaWNhdGlvbnMgcGFyc2luZyBvciBzZXJpYWxpemluZyBtdWx0aS1naWdhYnl0ZSBkb2N1bWVudHMgKGluIGV4Y2VzcyBvZiBJTlRfTUFYIGJ5dGVzKSBtYXkgYmUgdnVsbmVyYWJsZSB0byBhbiBpbnRlZ2VyIG92ZXJmbG93IGJ1ZyBpbiBidWZmZXIgaGFuZGxpbmcgdGhhdCBjb3VsZCBsZWFkIHRvIGV4cG9zdXJlIG9mIGNvbmZpZGVudGlhbCBkYXRhLCBtb2RpZmljYXRpb24gb2YgdW5yZWxhdGVkIGRhdGEsIG9yIGEgc2VnbWVudGF0aW9uIGZhdWx0IHJlc3VsdGluZyBpbiBhIGRlbmlhbC1vZi1zZXJ2aWNlLlxuXG5cbiMjIyBSZWZlcmVuY2VzXG5cbi0gW2xpYnhtbDIgdjIuOS4xNCByZWxlYXNlIG5vdGVzXShodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi8tL3JlbGVhc2VzL3YyLjkuMTQpXG4tIFtDVkUtMjAyMi0yOTgyNF0oaHR0cHM6Ly9udmQubmlzdC5nb3YvdnVsbi9kZXRhaWwvQ1ZFLTIwMjItMjk4MjQpXG4tIFtDV0UtMTE5OiBJbXByb3BlciBSZXN0cmljdGlvbiBvZiBPcGVyYXRpb25zIHdpdGhpbiB0aGUgQm91bmRzIG9mIGEgTWVtb3J5IEJ1ZmZlcl0oaHR0cHM6Ly9jd2UubWl0cmUub3JnL2RhdGEvZGVmaW5pdGlvbnMvMTE5Lmh0bWwpXG5cbiIsImN2c3MiOnsic2NvcmUiOjguNn0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1jZ3g2LWhwd3EtZmh2NSJ9XSwic3VtbWFyeSI6IkludGVnZXIgT3ZlcmZsb3cgb3IgV3JhcGFyb3VuZCBpbiBsaWJ4bWwyIGFmZmVjdHMgTm9rb2dpcmkifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMTMuNSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjEzLjUifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNNk9fV3hmIiwibnVtYmVyIjo0NSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMi0wNS0yNFQwMDozMToxOFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMjIFN1bW1hcnlcblxuTm9rb2dpcmkgYDwgdjEuMTMuNmAgZG9lcyBub3QgdHlwZS1jaGVjayBhbGwgaW5wdXRzIGludG8gdGhlIFhNTCBhbmQgSFRNTDQgU0FYIHBhcnNlcnMuIEZvciBDUnVieSB1c2VycywgdGhpcyBtYXkgYWxsb3cgc3BlY2lhbGx5IGNyYWZ0ZWQgdW50cnVzdGVkIGlucHV0cyB0byBjYXVzZSBpbGxlZ2FsIG1lbW9yeSBhY2Nlc3MgZXJyb3JzIChzZWdmYXVsdCkgb3IgcmVhZHMgZnJvbSB1bnJlbGF0ZWQgbWVtb3J5LlxuXG4jIyMgU2V2ZXJpdHlcblxuVGhlIE5va29naXJpIG1haW50YWluZXJzIGhhdmUgZXZhbHVhdGVkIHRoaXMgYXMgKipIaWdoIDguMioqIChDVlNTMy4xKS5cblxuXG4jIyMgTWl0aWdhdGlvblxuXG5DUnVieSB1c2VycyBzaG91bGQgdXBncmFkZSB0byBOb2tvZ2lyaSBgPj0gMS4xMy42YC5cblxuSlJ1YnkgdXNlcnMgYXJlIG5vdCBhZmZlY3RlZC5cblxuXG4jIyMgV29ya2Fyb3VuZHNcblxuVG8gYXZvaWQgdGhpcyB2dWxuZXJhYmlsaXR5IGluIGFmZmVjdGVkIGFwcGxpY2F0aW9ucywgZW5zdXJlIHRoZSB1bnRydXN0ZWQgaW5wdXQgaXMgYSBgU3RyaW5nYCBieSBjYWxsaW5nIGAjdG9fc2Agb3IgZXF1aXZhbGVudC5cblxuXG4jIyMgQ3JlZGl0XG5cblRoaXMgdnVsbmVyYWJpbGl0eSB3YXMgcmVzcG9uc2libHkgcmVwb3J0ZWQgYnkgQGFndXN0aW5naWFubmkgYW5kIHRoZSBHaXRodWIgU2VjdXJpdHkgTGFiLlxuIiwiY3ZzcyI6eyJzY29yZSI6OC4yfSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLXhoMjktcjJ3NS13eDhtIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMi0yOTE4MSJ9XSwic3VtbWFyeSI6Ik5va29naXJpIEltcHJvcGVybHkgSGFuZGxlcyBVbmV4cGVjdGVkIERhdGEgVHlwZSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibm9rb2dpcmkifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS4xMy42In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuMTMuNiJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ002UVJ1ZFIiLCJudW1iZXIiOjQ2LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTA1LTI3VDE4OjA0OjM4WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSBpcyBhIHBvc3NpYmxlIHNoZWxsIGVzY2FwZSBzZXF1ZW5jZSBpbmplY3Rpb24gdnVsbmVyYWJpbGl0eSBpbiB0aGUgTGludFxuYW5kIENvbW1vbkxvZ2dlciBjb21wb25lbnRzIG9mIFJhY2suICBUaGlzIHZ1bG5lcmFiaWxpdHkgaGFzIGJlZW4gYXNzaWduZWQgdGhlXG5DVkUgaWRlbnRpZmllciBDVkUtMjAyMi0zMDEyMy5cblxuVmVyc2lvbnMgQWZmZWN0ZWQ6ICBBbGwuXG5Ob3QgYWZmZWN0ZWQ6ICAgICAgIE5vbmVcbkZpeGVkIFZlcnNpb25zOiAgICAgMi4wLjkuMSwgMi4xLjQuMSwgMi4yLjMuMVxuXG4jIyBJbXBhY3RcbkNhcmVmdWxseSBjcmFmdGVkIHJlcXVlc3RzIGNhbiBjYXVzZSBzaGVsbCBlc2NhcGUgc2VxdWVuY2VzIHRvIGJlIHdyaXR0ZW4gdG9cbnRoZSB0ZXJtaW5hbCB2aWEgUmFjaydzIExpbnQgbWlkZGxld2FyZSBhbmQgQ29tbW9uTG9nZ2VyIG1pZGRsZXdhcmUuICBUaGVzZVxuZXNjYXBlIHNlcXVlbmNlcyBjYW4gYmUgbGV2ZXJhZ2VkIHRvIHBvc3NpYmx5IGV4ZWN1dGUgY29tbWFuZHMgaW4gdGhlIHZpY3RpbSdzXG50ZXJtaW5hbC5cblxuSW1wYWN0ZWQgYXBwbGljYXRpb25zIHdpbGwgaGF2ZSBlaXRoZXIgb2YgdGhlc2UgbWlkZGxld2FyZSBpbnN0YWxsZWQsIGFuZFxudnVsbmVyYWJsZSBhcHBzIG1heSBoYXZlIHNvbWV0aGluZyBsaWtlIHRoaXM6XG5cbmBgYFxudXNlIFJhY2s6OkxpbnRcbmBgYFxuXG5PclxuXG5gYGBcbnVzZSBSYWNrOjpDb21tb25Mb2dnZXJcbmBgYFxuXG5BbGwgdXNlcnMgcnVubmluZyBhbiBhZmZlY3RlZCByZWxlYXNlIHNob3VsZCBlaXRoZXIgdXBncmFkZSBvciB1c2Ugb25lIG9mIHRoZVxud29ya2Fyb3VuZHMgaW1tZWRpYXRlbHkuXG5cbiMjIFdvcmthcm91bmRzXG5SZW1vdmUgdGhlc2UgbWlkZGxld2FyZSBmcm9tIHlvdXIgYXBwbGljYXRpb25cbiIsImN2c3MiOnsic2NvcmUiOjEwLjB9LCJzZXZlcml0eSI6IkNSSVRJQ0FMIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLXdxNGgtN3I0Mi01aHJyIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMi0zMDEyMyJ9XSwic3VtbWFyeSI6IlBvc3NpYmxlIHNoZWxsIGVzY2FwZSBzZXF1ZW5jZSBpbmplY3Rpb24gdnVsbmVyYWJpbGl0eSBpbiBSYWNrIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJyYWNrIn0sInNldmVyaXR5IjoiQ1JJVElDQUwiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjAuOS4xIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8PSAyLjAuOS4wIn19LHsiaWQiOiJSVkFfa3dET0J6bURnTTZRUnVpSCIsIm51bWJlciI6NDcsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjItMDUtMjdUMTg6MDQ6MzlaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGEgcG9zc2libGUgZGVuaWFsIG9mIHNlcnZpY2UgdnVsbmVyYWJpbGl0eSBpbiB0aGUgbXVsdGlwYXJ0IHBhcnNpbmcgY29tcG9uZW50IG9mIFJhY2suICBUaGlzIHZ1bG5lcmFiaWxpdHkgaGFzIGJlZW4gYXNzaWduZWQgdGhlIENWRSBpZGVudGlmaWVyIENWRS0yMDIyLTMwMTIyLlxuXG5WZXJzaW9ucyBBZmZlY3RlZDogID49IDEuMlxuTm90IGFmZmVjdGVkOiAgICAgICA8IDEuMlxuRml4ZWQgVmVyc2lvbnM6ICAgICAyLjAuOS4xLCAyLjEuNC4xLCAyLjIuMy4xXG5cbiMjIEltcGFjdFxuQ2FyZWZ1bGx5IGNyYWZ0ZWQgbXVsdGlwYXJ0IFBPU1QgcmVxdWVzdHMgY2FuIGNhdXNlIFJhY2sncyBtdWx0aXBhcnQgcGFyc2VyIHRvIHRha2UgbXVjaCBsb25nZXIgdGhhbiBleHBlY3RlZCwgbGVhZGluZyB0byBhIHBvc3NpYmxlIGRlbmlhbCBvZiBzZXJ2aWNlIHZ1bG5lcmFiaWxpdHkuXG5cbkltcGFjdGVkIGNvZGUgd2lsbCB1c2UgUmFjaydzIG11bHRpcGFydCBwYXJzZXIgdG8gcGFyc2UgbXVsdGlwYXJ0IHBvc3RzLiAgVGhpcyBpbmNsdWRlcyBkaXJlY3RseSB1c2luZyB0aGUgbXVsdGlwYXJ0IHBhcnNlciBsaWtlIHRoaXM6XG5cbmBgYFxucGFyYW1zID0gUmFjazo6TXVsdGlwYXJ0LnBhcnNlX211bHRpcGFydChlbnYpXG5gYGBcblxuQnV0IGl0IGFsc28gaW5jbHVkZXMgcmVhZGluZyBQT1NUIGRhdGEgZnJvbSBhIFJhY2sgcmVxdWVzdCBvYmplY3QgbGlrZSB0aGlzOlxuXG5gYGBcbnAgcmVxdWVzdC5QT1NUICMgcmVhZCBQT1NUIGRhdGFcbnAgcmVxdWVzdC5wYXJhbXMgIyByZWFkcyBib3RoIHF1ZXJ5IHBhcmFtcyBhbmQgUE9TVCBkYXRhXG5gYGBcblxuQWxsIHVzZXJzIHJ1bm5pbmcgYW4gYWZmZWN0ZWQgcmVsZWFzZSBzaG91bGQgZWl0aGVyIHVwZ3JhZGUgb3IgdXNlIG9uZSBvZiB0aGUgd29ya2Fyb3VuZHMgaW1tZWRpYXRlbHkuXG5cbiMjIFdvcmthcm91bmRzXG5UaGVyZSBhcmUgbm8gZmVhc2libGUgd29ya2Fyb3VuZHMgZm9yIHRoaXMgaXNzdWUuXG4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtaHhxeC14d3ZoLTQ0bTIifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIyLTMwMTIyIn1dLCJzdW1tYXJ5IjoiRGVuaWFsIG9mIFNlcnZpY2UgVnVsbmVyYWJpbGl0eSBpbiBSYWNrIE11bHRpcGFydCBQYXJzaW5nIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJyYWNrIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjIuMC45LjEifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDEuMiwgPD0gMi4wLjkuMCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ002aVVYd2giLCJudW1iZXIiOjQ4LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTA3LTA2VDAxOjEzOjU1WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJWZXJzaW9ucyBvZiBSYWlsczo6SHRtbDo6U2FuaXRpemVyIHByaW9yIHRvIHZlcnNpb24gMS40LjMgYXJlIHZ1bG5lcmFibGUgdG8gWFNTIHdpdGggY2VydGFpbiBjb25maWd1cmF0aW9ucyBvZiBSYWlsczo6SHRtbDo6U2FuaXRpemVyIHdoaWNoICBhbGxvd3MgYW4gYXR0YWNrZXIgdG8gaW5qZWN0IGNvbnRlbnQgd2hlbiB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIGhhcyBvdmVycmlkZGVuIHRoZSBzYW5pdGl6ZXIncyBhbGxvd2VkIHRhZ3MgdG8gYWxsb3cgYm90aCBgc2VsZWN0YCBhbmQgYHN0eWxlYCBlbGVtZW50cy4gQ29kZSBpcyBvbmx5IGltcGFjdGVkIGlmIGFsbG93ZWQgdGFncyBhcmUgYmVpbmcgb3ZlcnJpZGRlbi4gXG5cblRoaXMgbWF5IGJlIGRvbmUgdmlhIGFwcGxpY2F0aW9uIGNvbmZpZ3VyYXRpb246IGBgYHJ1YnkjIEluIGNvbmZpZy9hcHBsaWNhdGlvbi5yYmNvbmZpZy5hY3Rpb25fdmlldy5zYW5pdGl6ZWRfYWxsb3dlZF90YWdzID0gW1wic2VsZWN0XCIsIFwic3R5bGVcIl1gYGBcblxuc2VlIGh0dHBzOi8vZ3VpZGVzLnJ1YnlvbnJhaWxzLm9yZy9jb25maWd1cmluZy5odG1sI2NvbmZpZ3VyaW5nLWFjdGlvbi12aWV3XG5cbk9yIGl0IG1heSBiZSBkb25lIHdpdGggYSBgOnRhZ3NgIG9wdGlvbiB0byB0aGUgQWN0aW9uIFZpZXcgaGVscGVyIGBzYW5pdGl6ZWA6IGBgYDwlPSBzYW5pdGl6ZSBAY29tbWVudC5ib2R5LCB0YWdzOiBbXCJzZWxlY3RcIiwgXCJzdHlsZVwiXSAlPmBgYCBcblxuc2VlIGh0dHBzOi8vYXBpLnJ1YnlvbnJhaWxzLm9yZy9jbGFzc2VzL0FjdGlvblZpZXcvSGVscGVycy9TYW5pdGl6ZUhlbHBlci5odG1sI21ldGhvZC1pLXNhbml0aXplIFxuXG5JdCBtYXkgYWxzbyBiZSBkb25lIHdpdGggUmFpbHM6Okh0bWw6OlNhZmVMaXN0U2FuaXRpemVyIGRpcmVjdGx5OiBcbmBgYHJ1YnkjIGNsYXNzLWxldmVsIG9wdGlvblJhaWxzOjpIdG1sOjpTYWZlTGlzdFNhbml0aXplci5hbGxvd2VkX3RhZ3MgPSBbXCJzZWxlY3RcIiwgXCJzdHlsZVwiXWBgYCAgb3Igd2l0aFxuYGBgcnVieSMgaW5zdGFuY2UtbGV2ZWwgb3B0aW9uUmFpbHM6Okh0bWw6OlNhZmVMaXN0U2FuaXRpemVyLm5ldy5zYW5pdGl6ZShAYXJ0aWNsZS5ib2R5LCB0YWdzOiBbXCJzZWxlY3RcIiwgXCJzdHlsZVwiXSlgYGBcblxuQWxsIHVzZXJzIG92ZXJyaWRpbmcgdGhlIGFsbG93ZWQgdGFncyBieSBhbnkgb2YgdGhlIGFib3ZlIG1lY2hhbmlzbXMgdG8gaW5jbHVkZSBib3RoIFwic2VsZWN0XCIgYW5kIFwic3R5bGVcIiBhcmUgcmVjb21tZW5kZWQgdG8gdXBncmFkZSBpbW1lZGlhdGVseS4gQSB3b3JrYXJvdW5kIGZvciB0aGlzIGlzc3VlIGNhbiBiZSBhcHBsaWVkIGJ5IHJlbW92aW5nIGVpdGhlciBgc2VsZWN0YCBvciBgc3R5bGVgIGZyb20gdGhlIG92ZXJyaWRkZW4gYWxsb3dlZCB0YWdzLiIsImN2c3MiOnsic2NvcmUiOjYuMX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtcGc4di1nNHhxLWh3dzkifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIyLTMyMjA5In1dLCJzdW1tYXJ5IjoiUmFpbHM6Okh0bWw6OlNhbml0aXplciB2dWxuZXJhYmxlIHRvIENyb3NzLXNpdGUgU2NyaXB0aW5nIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJyYWlscy1odG1sLXNhbml0aXplciJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS40LjMifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS40LjMifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNNmpxV2tkIiwibnVtYmVyIjo0OSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMi0wNy0xMlQyMzozNTowNVoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiV2hlbiBzZXJpYWxpemVkIGNvbHVtbnMgdGhhdCB1c2UgWUFNTCAodGhlIGRlZmF1bHQpIGFyZSBkZXNlcmlhbGl6ZWQsIFJhaWxzIHVzZXMgWUFNTC51bnNhZmVfbG9hZCB0byBjb252ZXJ0IHRoZSBZQU1MIGRhdGEgaW4gdG8gUnVieSBvYmplY3RzLiBJZiBhbiBhdHRhY2tlciBjYW4gbWFuaXB1bGF0ZSBkYXRhIGluIHRoZSBkYXRhYmFzZSAodmlhIG1lYW5zIGxpa2UgU1FMIGluamVjdGlvbiksIHRoZW4gaXQgbWF5IGJlIHBvc3NpYmxlIGZvciB0aGUgYXR0YWNrZXIgdG8gZXNjYWxhdGUgdG8gYW4gUkNFLlxuXG5UaGVyZSBhcmUgbm8gZmVhc2libGUgd29ya2Fyb3VuZHMgZm9yIHRoaXMgaXNzdWUsIGJ1dCBvdGhlciBjb2RlcnMgKHN1Y2ggYXMgSlNPTikgYXJlIG5vdCBpbXBhY3RlZC4iLCJjdnNzIjp7InNjb3JlIjo5Ljh9LCJzZXZlcml0eSI6IkNSSVRJQ0FMIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTNoaGMtcXA1di05cDJqIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMi0zMjIyNCJ9XSwic3VtbWFyeSI6IkFjdGl2ZSBSZWNvcmQgUkNFIGJ1ZyB3aXRoIFNlcmlhbGl6ZWQgQ29sdW1ucyJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoiYWN0aXZlcmVjb3JkIn0sInNldmVyaXR5IjoiQ1JJVElDQUwiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI1LjIuOC4xIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8PSA1LjIuOCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ002bFUtaFYiLCJudW1iZXIiOjUwLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTA3LTIyVDAxOjE5OjE2WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyMgSW1wYWN0XHJcblxyXG4jIyMjIEFmZmVjdGVkIHZlcnNpb25zXHJcblxyXG4gIC0gMC4zLjYwIGFuZCBlYXJsaWVyLlxyXG4gIC0gMS4wLjAgdG8gMS4yLjkgd2hlbiB1c2VkIHdpdGggdGhlIFJ1YnkgZGF0YSBzb3VyY2UgKHR6aW5mby1kYXRhKS5cclxuXHJcbiMjIyMgVnVsbmVyYWJpbGl0eSBcclxuXHJcbldpdGggdGhlIFJ1YnkgZGF0YSBzb3VyY2UgKHRoZSB0emluZm8tZGF0YSBnZW0gZm9yIHR6aW5mbyB2ZXJzaW9uIDEuMC4wIGFuZCBsYXRlciBhbmQgYnVpbHQtaW4gdG8gZWFybGllciB2ZXJzaW9ucyksIHRpbWUgem9uZXMgYXJlIGRlZmluZWQgaW4gUnVieSBmaWxlcy4gVGhlcmUgaXMgb25lIGZpbGUgcGVyIHRpbWUgem9uZS4gVGltZSB6b25lIGZpbGVzIGFyZSBsb2FkZWQgd2l0aCBgcmVxdWlyZWAgb24gZGVtYW5kLiBJbiB0aGUgYWZmZWN0ZWQgdmVyc2lvbnMsIGBUWkluZm86OlRpbWV6b25lLmdldGAgZmFpbHMgdG8gdmFsaWRhdGUgdGltZSB6b25lIGlkZW50aWZpZXJzIGNvcnJlY3RseSwgYWxsb3dpbmcgYSBuZXcgbGluZSBjaGFyYWN0ZXIgd2l0aGluIHRoZSBpZGVudGlmaWVyLiBXaXRoIFJ1YnkgdmVyc2lvbiAxLjkuMyBhbmQgbGF0ZXIsIGBUWkluZm86OlRpbWV6b25lLmdldGAgY2FuIGJlIG1hZGUgdG8gbG9hZCB1bmludGVuZGVkIGZpbGVzIHdpdGggYHJlcXVpcmVgLCBleGVjdXRpbmcgdGhlbSB3aXRoaW4gdGhlIFJ1YnkgcHJvY2Vzcy5cclxuXHJcbkZvciBleGFtcGxlLCB3aXRoIHZlcnNpb24gMS4yLjksIHlvdSBjYW4gcnVuIHRoZSBmb2xsb3dpbmcgdG8gbG9hZCBhIGZpbGUgd2l0aCBwYXRoIGAvdG1wL3BheWxvYWQucmJgOlxyXG5cclxuYGBgcnVieVxyXG5UWkluZm86OlRpbWV6b25lLmdldChcImZvb1xcbi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90bXAvcGF5bG9hZFwiKVxyXG5gYGBcclxuXHJcblRoZSBleGFjdCBudW1iZXIgb2YgcGFyZW50IGRpcmVjdG9yeSB0cmF2ZXJzYWxzIG5lZWRlZCB3aWxsIHZhcnkgZGVwZW5kaW5nIG9uIHRoZSBsb2NhdGlvbiBvZiB0aGUgdHppbmZvLWRhdGEgZ2VtLlxyXG5cclxuVFpJbmZvIHZlcnNpb25zIDEuMi42IHRvIDEuMi45IGNhbiBiZSBtYWRlIHRvIGxvYWQgZmlsZXMgZnJvbSBvdXRzaWRlIG9mIHRoZSBSdWJ5IGxvYWQgcGF0aC4gVmVyc2lvbnMgdXAgdG8gYW5kIGluY2x1ZGluZyAxLjIuNSBjYW4gb25seSBiZSBtYWRlIHRvIGxvYWQgZmlsZXMgZnJvbSBkaXJlY3RvcmllcyB3aXRoaW4gdGhlIGxvYWQgcGF0aC4gXHJcblxyXG5UaGlzIGNvdWxkIGJlIGV4cGxvaXRlZCBpbiwgZm9yIGV4YW1wbGUsIGEgUnVieSBvbiBSYWlscyBhcHBsaWNhdGlvbiB1c2luZyB0emluZm8gdmVyc2lvbiAxLjIuOSwgdGhhdCBhbGxvd3MgZmlsZSB1cGxvYWRzIGFuZCBoYXMgYSB0aW1lIHpvbmUgc2VsZWN0b3IgdGhhdCBhY2NlcHRzIGFyYml0cmFyeSB0aW1lIHpvbmUgaWRlbnRpZmllcnMuIFRoZSBDVlNTIHNjb3JlIGFuZCBzZXZlcml0eSBoYXZlIGJlZW4gc2V0IG9uIHRoaXMgYmFzaXMuXHJcblxyXG5WZXJzaW9ucyAyLjAuMCBhbmQgbGF0ZXIgYXJlIG5vdCB2dWxuZXJhYmxlLlxyXG5cclxuIyMjIFBhdGNoZXNcclxuXHJcblZlcnNpb25zIDAuMy42MSBhbmQgMS4yLjEwIGluY2x1ZGUgZml4ZXMgdG8gY29ycmVjdGx5IHZhbGlkYXRlIHRpbWUgem9uZSBpZGVudGlmaWVycyAoY29tbWl0IDllZGRiYjVjMGU2ODI3MzZmNjFkMGRkODAzYjYwMzFhNWRiOWVhZGYgZm9yIDAuMy54IGFuZCBjb21taXQgOTkwNWNhOTNhYmY3YmYzZTM4N2JkNTkyNDA2ZTQwM2NkMTgzMzRjNyBmb3IgMS4yLngpLlxyXG5cclxuTm90ZSB0aGF0IHZlcnNpb24gMC4zLjYxIGNhbiBzdGlsbCBsb2FkIGFyYml0cmFyeSBmaWxlcyBmcm9tIHRoZSBSdWJ5IGxvYWQgcGF0aCBpZiB0aGVpciBuYW1lIGZvbGxvd3MgdGhlIHJ1bGVzIGZvciBhIHZhbGlkIHRpbWUgem9uZSBpZGVudGlmaWVyIGFuZCB0aGUgZmlsZSBoYXMgYSBwcmVmaXggb2YgYHR6aW5mby9kZWZpbml0aW9uYCB3aXRoaW4gYSBkaXJlY3RvcnkgaW4gdGhlIGxvYWQgcGF0aC4gRm9yIGV4YW1wbGUgaWYgYC90bXAvdXBsb2FkYCB3YXMgaW4gdGhlIGxvYWQgcGF0aCwgdGhlbiBgVFpJbmZvOjpUaW1lem9uZS5nZXQoJ2ZvbycpYCBjb3VsZCBsb2FkIGEgZmlsZSB3aXRoIHBhdGggYC90bXAvdXBsb2FkL3R6aW5mby9kZWZpbml0aW9uL2Zvby5yYmAuIEFwcGxpY2F0aW9ucyBzaG91bGQgZW5zdXJlIHRoYXQgdW50cnVzdGVkIGZpbGVzIGFyZSBub3QgcGxhY2VkIGluIGEgZGlyZWN0b3J5IG9uIHRoZSBsb2FkIHBhdGguXHJcblxyXG4jIyMgV29ya2Fyb3VuZHNcclxuXHJcbkFzIGEgd29ya2Fyb3VuZCwgdGhlIHRpbWUgem9uZSBpZGVudGlmaWVyIGNhbiBiZSB2YWxpZGF0ZWQgYmVmb3JlIHBhc3NpbmcgdG8gYFRaSW5mbzo6VGltZXpvbmUuZ2V0YCBieSBlbnN1cmluZyBpdCBtYXRjaGVzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYFxcQVtBLVphLXowLTkrXFwtX10rKD86XFwvW0EtWmEtejAtOStcXC1fXSspKlxcemAuXHJcblxyXG4jIyMgRm9yIG1vcmUgaW5mb3JtYXRpb25cclxuXHJcbklmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgb3IgY29tbWVudHMgYWJvdXQgdGhpcyBhZHZpc29yeTpcclxuICAtIE9wZW4gYW4gaXNzdWUgaW4gW3RoZSB0emluZm8gcmVwb3NpdG9yeV0oaHR0cHM6Ly9naXRodWIuY29tL3R6aW5mby90emluZm8pLiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS01Y20yLTloOGMtcnZmeCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjItMzExNjMifV0sInN1bW1hcnkiOiJUWkluZm8gcmVsYXRpdmUgcGF0aCB0cmF2ZXJzYWwgdnVsbmVyYWJpbGl0eSBhbGxvd3MgbG9hZGluZyBvZiBhcmJpdHJhcnkgZmlsZXMifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InR6aW5mbyJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjIuMTAifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDEuMC4wLCA8IDEuMi4xMCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ002eHNfMDciLCJudW1iZXIiOjUxLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTEwLTA1VDIzOjQ0OjU3WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyMgSW1wYWN0XG5cbldpdGhpbiB0aGUgVVJJIHRlbXBsYXRlIGltcGxlbWVudGF0aW9uIGluIEFkZHJlc3NhYmxlLCBhIG1hbGljaW91c2x5IGNyYWZ0ZWQgdGVtcGxhdGUgbWF5IHJlc3VsdCBpbiB1bmNvbnRyb2xsZWQgcmVzb3VyY2UgY29uc3VtcHRpb24sIGxlYWRpbmcgdG8gZGVuaWFsIG9mIHNlcnZpY2Ugd2hlbiBtYXRjaGVkIGFnYWluc3QgYSBVUkkuIEluIHR5cGljYWwgdXNhZ2UsIHRlbXBsYXRlcyB3b3VsZCBub3Qgbm9ybWFsbHkgYmUgcmVhZCBmcm9tIHVudHJ1c3RlZCB1c2VyIGlucHV0LCBidXQgbm9uZXRoZWxlc3MsIG5vIHByZXZpb3VzIHNlY3VyaXR5IGFkdmlzb3J5IGZvciBBZGRyZXNzYWJsZSBoYXMgY2F1dGlvbmVkIGFnYWluc3QgZG9pbmcgdGhpcy4gVXNlcnMgb2YgdGhlIHBhcnNpbmcgY2FwYWJpbGl0aWVzIGluIEFkZHJlc3NhYmxlIGJ1dCBub3QgdGhlIFVSSSB0ZW1wbGF0ZSBjYXBhYmlsaXRpZXMgYXJlIHVuYWZmZWN0ZWQuXG5cbiMjIyBQYXRjaGVzXG5cblRoZSB2dWxuZXJhYmlsaXR5IHdhcyBpbnRyb2R1Y2VkIGluIHZlcnNpb24gMi4zLjAgKHByZXZpb3VzbHkgeWFua2VkKSBhbmQgaGFzIGJlZW4gcHJlc2VudCBpbiBhbGwgc3Vic2VxdWVudCB2ZXJzaW9ucyB1cCB0bywgYW5kIGluY2x1ZGluZywgMi43LjAuIEl0IGlzIGZpeGVkIGluIHZlcnNpb24gMi44LjAuXG5cbiMjIyBXb3JrYXJvdW5kc1xuXG5UaGUgdnVsbmVyYWJpbGl0eSBjYW4gYmUgYXZvaWRlZCBieSBvbmx5IGNyZWF0aW5nIFRlbXBsYXRlIG9iamVjdHMgZnJvbSB0cnVzdGVkIHNvdXJjZXMgdGhhdCBoYXZlIGJlZW4gdmFsaWRhdGVkIG5vdCB0byBwcm9kdWNlIGNhdGFzdHJvcGhpYyBiYWNrdHJhY2tpbmcuXG5cbiMjIyBSZWZlcmVuY2VzXG5cbi0gaHR0cHM6Ly9vd2FzcC5vcmcvd3d3LWNvbW11bml0eS9hdHRhY2tzL1JlZ3VsYXJfZXhwcmVzc2lvbl9EZW5pYWxfb2ZfU2VydmljZV8tX1JlRG9TXG4tIGh0dHBzOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzEzMzMuaHRtbFxuLSBodHRwczovL3d3dy5yZWd1bGFyLWV4cHJlc3Npb25zLmluZm8vY2F0YXN0cm9waGljLmh0bWxcblxuIyMjIEZvciBtb3JlIGluZm9ybWF0aW9uXG5JZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IHRoaXMgYWR2aXNvcnk6XG4qIFtPcGVuIGFuIGlzc3VlXShodHRwczovL2dpdGh1Yi5jb20vc3Bvcmttb25nZXIvYWRkcmVzc2FibGUvaXNzdWVzKVxuIiwiY3ZzcyI6eyJzY29yZSI6Ny41fSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLWp4aGMtcTg1Ny0zajZnIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMS0zMjc0MCJ9XSwic3VtbWFyeSI6IlJlZ3VsYXIgRXhwcmVzc2lvbiBEZW5pYWwgb2YgU2VydmljZSBpbiBBZGRyZXNzYWJsZSB0ZW1wbGF0ZXMifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFkZHJlc3NhYmxlIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjIuOC4wIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI+PSAyLjMuMCwgPD0gMi43LjAifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNNnptanZlIiwibnVtYmVyIjo1Miwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMi0xMC0xOVQxMzozNDoxNVoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMjIFN1bW1hcnlcblxuTm9rb2dpcmkgdjEuMTMuOSB1cGdyYWRlcyB0aGUgcGFja2FnZWQgdmVyc2lvbiBvZiBpdHMgZGVwZW5kZW5jeSBsaWJ4bWwyIHRvIFt2Mi4xMC4zXShodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi8tL3JlbGVhc2VzL3YyLjEwLjMpIGZyb20gdjIuOS4xNC5cblxubGlieG1sMiB2Mi4xMC4zIGFkZHJlc3NlcyB0aGUgZm9sbG93aW5nIGtub3duIHZ1bG5lcmFiaWxpdGllczpcblxuLSBbQ1ZFLTIwMjItMjMwOV0oaHR0cHM6Ly9udmQubmlzdC5nb3YvdnVsbi9kZXRhaWwvQ1ZFLTIwMjItMjMwOSlcbi0gW0NWRS0yMDIyLTQwMzA0XShodHRwczovL252ZC5uaXN0Lmdvdi92dWxuL2RldGFpbC9DVkUtMjAyMi00MDMwNClcbi0gW0NWRS0yMDIyLTQwMzAzXShodHRwczovL252ZC5uaXN0Lmdvdi92dWxuL2RldGFpbC9DVkUtMjAyMi00MDMwMylcblxuUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGFkdmlzb3J5IG9ubHkgYXBwbGllcyB0byB0aGUgQ1J1YnkgaW1wbGVtZW50YXRpb24gb2YgTm9rb2dpcmkgYDwgMS4xMy45YCwgYW5kIG9ubHkgaWYgdGhlIF9wYWNrYWdlZF8gbGlicmFyaWVzIGFyZSBiZWluZyB1c2VkLiBJZiB5b3UndmUgb3ZlcnJpZGRlbiBkZWZhdWx0cyBhdCBpbnN0YWxsYXRpb24gdGltZSB0byB1c2UgX3N5c3RlbV8gbGlicmFyaWVzIGluc3RlYWQgb2YgcGFja2FnZWQgbGlicmFyaWVzLCB5b3Ugc2hvdWxkIGluc3RlYWQgcGF5IGF0dGVudGlvbiB0byB5b3VyIGRpc3RybydzIGBsaWJ4bWwyYCByZWxlYXNlIGFubm91bmNlbWVudHMuXG5cblxuIyMjIE1pdGlnYXRpb25cblxuVXBncmFkZSB0byBOb2tvZ2lyaSBgPj0gMS4xMy45YC5cblxuVXNlcnMgd2hvIGFyZSB1bmFibGUgdG8gdXBncmFkZSBOb2tvZ2lyaSBtYXkgYWxzbyBjaG9vc2UgYSBtb3JlIGNvbXBsaWNhdGVkIG1pdGlnYXRpb246IGNvbXBpbGUgYW5kIGxpbmsgTm9rb2dpcmkgYWdhaW5zdCBleHRlcm5hbCBsaWJyYXJpZXMgbGlieG1sMiBgPj0gMi4xMC4zYCB3aGljaCB3aWxsIGFsc28gYWRkcmVzcyB0aGVzZSBzYW1lIGlzc3Vlcy5cblxuXG4jIyMgSW1wYWN0XG5cbiMjIyMgbGlieG1sMiBbQ1ZFLTIwMjItMjMwOV0oaHR0cHM6Ly9udmQubmlzdC5nb3YvdnVsbi9kZXRhaWwvQ1ZFLTIwMjItMjMwOSlcblxuLSAqKkNWU1MzIHNjb3JlKio6IFVuZGVyIGV2YWx1YXRpb25cbi0gKipUeXBlKio6IERlbmlhbCBvZiBzZXJ2aWNlXG4tICoqRGVzY3JpcHRpb24qKjogTlVMTCBQb2ludGVyIERlcmVmZXJlbmNlIGFsbG93cyBhdHRhY2tlcnMgdG8gY2F1c2UgYSBkZW5pYWwgb2Ygc2VydmljZSAob3IgYXBwbGljYXRpb24gY3Jhc2gpLiBUaGlzIG9ubHkgYXBwbGllcyB3aGVuIGx4bWwgaXMgdXNlZCB0b2dldGhlciB3aXRoIGxpYnhtbDIgMi45LjEwIHRocm91Z2ggMi45LjE0LiBsaWJ4bWwyIDIuOS45IGFuZCBlYXJsaWVyIGFyZSBub3QgYWZmZWN0ZWQuIEl0IGFsbG93cyB0cmlnZ2VyaW5nIGNyYXNoZXMgdGhyb3VnaCBmb3JnZWQgaW5wdXQgZGF0YSwgZ2l2ZW4gYSB2dWxuZXJhYmxlIGNvZGUgc2VxdWVuY2UgaW4gdGhlIGFwcGxpY2F0aW9uLiBUaGUgdnVsbmVyYWJpbGl0eSBpcyBjYXVzZWQgYnkgdGhlIGl0ZXJ3YWxrIGZ1bmN0aW9uIChhbHNvIHVzZWQgYnkgdGhlIGNhbm9uaWNhbGl6ZSBmdW5jdGlvbikuIFN1Y2ggY29kZSBzaG91bGRuJ3QgYmUgaW4gd2lkZS1zcHJlYWQgdXNlLCBnaXZlbiB0aGF0IHBhcnNpbmcgKyBpdGVyd2FsayB3b3VsZCB1c3VhbGx5IGJlIHJlcGxhY2VkIHdpdGggdGhlIG1vcmUgZWZmaWNpZW50IGl0ZXJwYXJzZSBmdW5jdGlvbi4gSG93ZXZlciwgYW4gWE1MIGNvbnZlcnRlciB0aGF0IHNlcmlhbGlzZXMgdG8gQzE0TiB3b3VsZCBhbHNvIGJlIHZ1bG5lcmFibGUsIGZvciBleGFtcGxlLCBhbmQgdGhlcmUgYXJlIGxlZ2l0aW1hdGUgdXNlIGNhc2VzIGZvciB0aGlzIGNvZGUgc2VxdWVuY2UuIElmIHVudHJ1c3RlZCBpbnB1dCBpcyByZWNlaXZlZCAoYWxzbyByZW1vdGVseSkgYW5kIHByb2Nlc3NlZCB2aWEgaXRlcndhbGsgZnVuY3Rpb24sIGEgY3Jhc2ggY2FuIGJlIHRyaWdnZXJlZC5cblxuTm9rb2dpcmkgbWFpbnRhaW5lcnMgaW52ZXN0aWdhdGVkIGF0ICMyNjIwIGFuZCBkZXRlcm1pbmVkIHRoaXMgQ1ZFIGRvZXMgbm90IGFmZmVjdCBOb2tvZ2lyaSB1c2Vycy5cblxuXG4jIyMjIGxpYnhtbDIgW0NWRS0yMDIyLTQwMzA0XShodHRwczovL252ZC5uaXN0Lmdvdi92dWxuL2RldGFpbC9DVkUtMjAyMi00MDMwNClcblxuLSAqKkNWU1MzIHNjb3JlKio6IFVuc3BlY2lmaWVkIHVwc3RyZWFtXG4tICoqVHlwZSoqOiBEYXRhIGNvcnJ1cHRpb24sIGRlbmlhbCBvZiBzZXJ2aWNlXG4tICoqRGVzY3JpcHRpb24qKjogV2hlbiBhbiBlbnRpdHkgcmVmZXJlbmNlIGN5Y2xlIGlzIGRldGVjdGVkLCB0aGUgZW50aXR5IGNvbnRlbnQgaXMgY2xlYXJlZCBieSBzZXR0aW5nIGl0cyBmaXJzdCBieXRlIHRvIHplcm8uIEJ1dCB0aGUgZW50aXR5IGNvbnRlbnQgbWlnaHQgYmUgYWxsb2NhdGVkIGZyb20gYSBkaWN0LiBJbiB0aGlzIGNhc2UsIHRoZSBkaWN0IGVudHJ5IGJlY29tZXMgY29ycnVwdGVkIGxlYWRpbmcgdG8gYWxsIGtpbmRzIG9mIGxvZ2ljIGVycm9ycywgaW5jbHVkaW5nIG1lbW9yeSBlcnJvcnMgbGlrZSBkb3VibGUtZnJlZXMuXG5cblNlZSBodHRwczovL2dpdGxhYi5nbm9tZS5vcmcvR05PTUUvbGlieG1sMi8tL2NvbW1pdC82NDRhODllMDgwYmNlZDc5MzI5NWY2MWYxOGFhYzhjZmFkNmJlY2UyXG5cblxuIyMjIyBsaWJ4bWwyIFtDVkUtMjAyMi00MDMwM10oaHR0cHM6Ly9udmQubmlzdC5nb3YvdnVsbi9kZXRhaWwvQ1ZFLTIwMjItNDAzMDMpXG5cbi0gKipDVlNTMyBzY29yZSoqOiBVbnNwZWNpZmllZCB1cHN0cmVhbVxuLSAqKlR5cGUqKjogSW50ZWdlciBvdmVyZmxvd1xuLSAqKkRlc2NyaXB0aW9uKio6IEludGVnZXIgb3ZlcmZsb3dzIHdpdGggWE1MX1BBUlNFX0hVR0VcblxuU2VlIGh0dHBzOi8vZ2l0bGFiLmdub21lLm9yZy9HTk9NRS9saWJ4bWwyLy0vY29tbWl0L2M4NDY5ODYzNTZmYzE0OTkxNWE3NDk3MmJmMTk4YWJjMjY2YmMyYzBcblxuXG4jIyMgUmVmZXJlbmNlc1xuXG4tIFtsaWJ4bWwyIHJlbGVhc2Ugbm90ZXNdKGh0dHBzOi8vZ2l0bGFiLmdub21lLm9yZy9HTk9NRS9saWJ4bWwyLy0vcmVsZWFzZXMpXG4tIFtDVkUtMjAyMi0yMzA5XShodHRwczovL252ZC5uaXN0Lmdvdi92dWxuL2RldGFpbC9DVkUtMjAyMi0yMzA5KVxuLSBbQ1ZFLTIwMjItNDAzMDRdKGh0dHBzOi8vbnZkLm5pc3QuZ292L3Z1bG4vZGV0YWlsL0NWRS0yMDIyLTQwMzA0KVxuLSBbQ1ZFLTIwMjItNDAzMDNdKGh0dHBzOi8vbnZkLm5pc3QuZ292L3Z1bG4vZGV0YWlsL0NWRS0yMDIyLTQwMzAzKVxuIiwiY3ZzcyI6eyJzY29yZSI6MC4wfSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS0ycWM2LW1jdnctOTJjdyJ9XSwic3VtbWFyeSI6IlVwZGF0ZSBidW5kbGVkIGxpYnhtbDIgdG8gdjIuMTAuMyB0byByZXNvbHZlIG11bHRpcGxlIENWRXMifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjEzLjkifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS4xMy45In19LHsiaWQiOiJSVkFfa3dET0J6bURnTTdBQ0kzNSIsIm51bWJlciI6NTQsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjItMTItMTNUMjE6MTQ6MTJaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIFN1bW1hcnlcblxuTG9vZmFoIGA+PSAyLjIuMCwgPCAyLjE5LjFgIHVzZXMgcmVjdXJzaW9uIGZvciBzYW5pdGl6aW5nIGBDREFUQWAgc2VjdGlvbnMsIG1ha2luZyBpdCBzdXNjZXB0aWJsZSB0byBzdGFjayBleGhhdXN0aW9uIGFuZCByYWlzaW5nIGEgYFN5c3RlbVN0YWNrRXJyb3JgIGV4Y2VwdGlvbi4gIFRoaXMgbWF5IGxlYWQgdG8gYSBkZW5pYWwgb2Ygc2VydmljZSB0aHJvdWdoIENQVSByZXNvdXJjZSBjb25zdW1wdGlvbi5cblxuXG4jIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gTG9vZmFoIGA+PSAyLjE5LjFgLlxuXG5Vc2VycyB3aG8gYXJlIHVuYWJsZSB0byB1cGdyYWRlIG1heSBiZSBhYmxlIHRvIG1pdGlnYXRlIHRoaXMgdnVsbmVyYWJpbGl0eSBieSBsaW1pdGluZyB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmdzIHRoYXQgYXJlIHNhbml0aXplZC5cblxuXG4jIyBTZXZlcml0eVxuXG5UaGUgTG9vZmFoIG1haW50YWluZXJzIGhhdmUgZXZhbHVhdGVkIHRoaXMgYXMgW0hpZ2ggU2V2ZXJpdHkgNy41IChDVlNTMy4xKV0oaHR0cHM6Ly93d3cuZmlyc3Qub3JnL2N2c3MvY2FsY3VsYXRvci8zLjEjQ1ZTUzozLjEvQVY6Ti9BQzpML1BSOk4vVUk6Ti9TOlUvQzpOL0k6Ti9BOkgpLlxuXG5cbiMjIFJlZmVyZW5jZXNcblxuLSBbQ1dFIC0gQ1dFLTY3NDogVW5jb250cm9sbGVkIFJlY3Vyc2lvbiAoNC45KV0oaHR0cHM6Ly9jd2UubWl0cmUub3JnL2RhdGEvZGVmaW5pdGlvbnMvNjc0Lmh0bWwpXG4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtM3g4ci14NnhwLXE0dm0ifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIyLTIzNTE2In1dLCJzdW1tYXJ5IjoiVW5jb250cm9sbGVkIFJlY3Vyc2lvbiBpbiBMb29mYWgifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Imxvb2ZhaCJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjE5LjEifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDIuMi4wLCA8IDIuMTkuMSJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ003QUMyem8iLCJudW1iZXIiOjU1LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTEyLTEzVDIxOjM5OjE5WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyBTdW1tYXJ5XG5cbkxvb2ZhaCBgPj0gMi4xLjAsIDwgMi4xOS4xYCBpcyB2dWxuZXJhYmxlIHRvIGNyb3NzLXNpdGUgc2NyaXB0aW5nIHZpYSB0aGUgYGltYWdlL3N2Zyt4bWxgIG1lZGlhIHR5cGUgaW4gZGF0YSBVUklzLlxuXG5cbiMjIE1pdGlnYXRpb25cblxuVXBncmFkZSB0byBMb29mYWggYD49IDIuMTkuMWAuXG5cblxuIyMgU2V2ZXJpdHlcblxuVGhlIExvb2ZhaCBtYWludGFpbmVycyBoYXZlIGV2YWx1YXRlZCB0aGlzIGFzIFtNZWRpdW0gU2V2ZXJpdHkgNi4xXShodHRwczovL3d3dy5maXJzdC5vcmcvY3Zzcy9jYWxjdWxhdG9yLzMuMCNDVlNTOjMuMC9BVjpOL0FDOkwvUFI6Ti9VSTpSL1M6Qy9DOkwvSTpML0E6TikuXG5cblxuIyMgUmVmZXJlbmNlc1xuXG4tIFtDV0UgLSBDV0UtNzk6IEltcHJvcGVyIE5ldXRyYWxpemF0aW9uIG9mIElucHV0IER1cmluZyBXZWIgUGFnZSBHZW5lcmF0aW9uICgnQ3Jvc3Mtc2l0ZSBTY3JpcHRpbmcnKSAoNC45KV0oaHR0cHM6Ly9jd2UubWl0cmUub3JnL2RhdGEvZGVmaW5pdGlvbnMvNzkuaHRtbClcbi0gW1NWRyBNSU1FIFR5cGUgKGltYWdlL3N2Zyt4bWwpIGlzIG1pc2xlYWRpbmcgdG8gZGV2ZWxvcGVycyDCtyBJc3N1ZSAjMjY2IMK3IHczYy9zdmd3Z10oaHR0cHM6Ly9naXRodWIuY29tL3czYy9zdmd3Zy9pc3N1ZXMvMjY2KVxuLSBodHRwczovL2hhY2tlcm9uZS5jb20vcmVwb3J0cy8xNjk0MTczXG4tIGh0dHBzOi8vZ2l0aHViLmNvbS9mbGF2b3Jqb25lcy9sb29mYWgvaXNzdWVzLzEwMVxuXG4jIyBDcmVkaXRcblxuVGhpcyB2dWxuZXJhYmlsaXR5IHdhcyByZXNwb25zaWJseSByZXBvcnRlZCBieSBNYWNpZWogUGllY2hvdGEgKEBoYXFwbCkuIiwiY3ZzcyI6eyJzY29yZSI6Ni4xfSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS0yMjhnLTk0OHItODNneCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjItMjM1MTUifV0sInN1bW1hcnkiOiJJbXByb3BlciBuZXV0cmFsaXphdGlvbiBvZiBkYXRhIFVSSXMgbWF5IGFsbG93IFhTUyBpbiBMb29mYWgifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Imxvb2ZhaCJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMi4xOS4xIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI+PSAyLjEuMCwgPCAyLjE5LjEifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN0FIQWtSIiwibnVtYmVyIjo1Niwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMi0xMi0xNFQwMDoyMjowNVoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMgU3VtbWFyeVxuXG5yYWlscy1odG1sLXNhbml0aXplciBgPj0gMS4wLjMsIDwgMS40LjRgIGlzIHZ1bG5lcmFibGUgdG8gY3Jvc3Mtc2l0ZSBzY3JpcHRpbmcgdmlhIGRhdGEgVVJJcyB3aGVuIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBMb29mYWggYD49IDIuMS4wYC5cblxuXG4jIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gcmFpbHMtaHRtbC1zYW5pdGl6ZXIgYD49IDEuNC40YC5cblxuXG4jIyBTZXZlcml0eVxuXG5UaGUgbWFpbnRhaW5lcnMgaGF2ZSBldmFsdWF0ZWQgdGhpcyBhcyBbTWVkaXVtIFNldmVyaXR5IDYuMV0oaHR0cHM6Ly93d3cuZmlyc3Qub3JnL2N2c3MvY2FsY3VsYXRvci8zLjAjQ1ZTUzozLjAvQVY6Ti9BQzpML1BSOk4vVUk6Ui9TOkMvQzpML0k6TC9BOk4pLlxuXG5cbiMjIFJlZmVyZW5jZXNcblxuLSBbQ1dFIC0gQ1dFLTc5OiBJbXByb3BlciBOZXV0cmFsaXphdGlvbiBvZiBJbnB1dCBEdXJpbmcgV2ViIFBhZ2UgR2VuZXJhdGlvbiAoJ0Nyb3NzLXNpdGUgU2NyaXB0aW5nJykgKDQuOSldKGh0dHBzOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzc5Lmh0bWwpXG4tIFtTVkcgTUlNRSBUeXBlIChpbWFnZS9zdmcreG1sKSBpcyBtaXNsZWFkaW5nIHRvIGRldmVsb3BlcnMgwrcgSXNzdWUgIzI2NiDCtyB3M2Mvc3Znd2ddKGh0dHBzOi8vZ2l0aHViLmNvbS93M2Mvc3Znd2cvaXNzdWVzLzI2Nilcbi0gaHR0cHM6Ly9naXRodWIuY29tL3JhaWxzL3JhaWxzLWh0bWwtc2FuaXRpemVyL2lzc3Vlcy8xMzVcbi0gaHR0cHM6Ly9oYWNrZXJvbmUuY29tL3JlcG9ydHMvMTY5NDE3M1xuXG5cbiMjIENyZWRpdFxuXG5UaGlzIHZ1bG5lcmFiaWxpdHkgd2FzIGluZGVwZW5kZW50bHkgcmVwb3J0ZWQgYnkgTWFjaWVqIFBpZWNob3RhIChAaGFxcGwpIGFuZCBNcmlubW95IERhcyAoQGdvcm9tbGFnY2hlKS5cbiIsImN2c3MiOnsic2NvcmUiOjYuMX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtbWN2Zi0ycTJtLXg3Mm0ifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIyLTIzNTE4In1dLCJzdW1tYXJ5IjoiSW1wcm9wZXIgbmV1dHJhbGl6YXRpb24gb2YgZGF0YSBVUklzIG1heSBhbGxvdyBYU1MgaW4gcmFpbHMtaHRtbC1zYW5pdGl6ZXIifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InJhaWxzLWh0bWwtc2FuaXRpemVyIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjQuNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gMS4wLjMsIDwgMS40LjQifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN0FMQXM5IiwibnVtYmVyIjo1Nywic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMi0xMi0xNFQwMzoyNDo1NloiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMgU3VtbWFyeVxuXG5UaGVyZSBpcyBhIHBvc3NpYmxlIFhTUyB2dWxuZXJhYmlsaXR5IHdpdGggY2VydGFpbiBjb25maWd1cmF0aW9ucyBvZiBSYWlsczo6SHRtbDo6U2FuaXRpemVyLiBUaGlzIGlzIGR1ZSB0byBhbiBpbmNvbXBsZXRlIGZpeCBvZiBDVkUtMjAyMi0zMjIwOS5cblxuLSBWZXJzaW9ucyBhZmZlY3RlZDogQUxMXG4tIE5vdCBhZmZlY3RlZDogTk9ORVxuLSBGaXhlZCB2ZXJzaW9uczogMS40LjRcblxuXG4jIyBJbXBhY3RcblxuQSBwb3NzaWJsZSBYU1MgdnVsbmVyYWJpbGl0eSB3aXRoIGNlcnRhaW4gY29uZmlndXJhdGlvbnMgb2YgUmFpbHM6Okh0bWw6OlNhbml0aXplciBtYXkgYWxsb3cgYW4gYXR0YWNrZXIgdG8gaW5qZWN0IGNvbnRlbnQgaWYgdGhlIGFwcGxpY2F0aW9uIGRldmVsb3BlciBoYXMgb3ZlcnJpZGRlbiB0aGUgc2FuaXRpemVyJ3MgYWxsb3dlZCB0YWdzIHRvIGFsbG93IGJvdGggXCJzZWxlY3RcIiBhbmQgXCJzdHlsZVwiIGVsZW1lbnRzLlxuXG5Db2RlIGlzIG9ubHkgaW1wYWN0ZWQgaWYgYWxsb3dlZCB0YWdzIGFyZSBiZWluZyBvdmVycmlkZGVuIHVzaW5nIGVpdGhlciBvZiB0aGUgZm9sbG93aW5nIHR3byBtZWNoYW5pc21zOlxuXG4xLiBVc2luZyB0aGUgUmFpbHMgY29uZmlndXJhdGlvbiBgY29uZmlnLmFjdGlvbl92aWV3LnNhbml0aXplZF9hbGxvd190YWdzPWA6XG5cbiAgYGBgcnVieVxuICAjIEluIGNvbmZpZy9hcHBsaWNhdGlvbi5yYlxuICBjb25maWcuYWN0aW9uX3ZpZXcuc2FuaXRpemVkX2FsbG93ZWRfdGFncyA9IFtcInNlbGVjdFwiLCBcInN0eWxlXCJdXG4gIGBgYFxuXG4gIChzZWUgaHR0cHM6Ly9ndWlkZXMucnVieW9ucmFpbHMub3JnL2NvbmZpZ3VyaW5nLmh0bWwjY29uZmlndXJpbmctYWN0aW9uLXZpZXcpXG5cbjIuIFVzaW5nIHRoZSBjbGFzcyBtZXRob2QgYFJhaWxzOjpIdG1sOjpTYWZlTGlzdFNhbml0aXplci5hbGxvd2VkX3RhZ3M9YDpcblxuICBgYGBydWJ5XG4gICMgY2xhc3MtbGV2ZWwgb3B0aW9uXG4gIFJhaWxzOjpIdG1sOjpTYWZlTGlzdFNhbml0aXplci5hbGxvd2VkX3RhZ3MgPSBbXCJzZWxlY3RcIiwgXCJzdHlsZVwiXVxuICBgYGBcblxuQWxsIHVzZXJzIG92ZXJyaWRpbmcgdGhlIGFsbG93ZWQgdGFncyBieSBlaXRoZXIgb2YgdGhlIGFib3ZlIG1lY2hhbmlzbXMgdG8gaW5jbHVkZSBib3RoIFwic2VsZWN0XCIgYW5kIFwic3R5bGVcIiBzaG91bGQgZWl0aGVyIHVwZ3JhZGUgb3IgdXNlIG9uZSBvZiB0aGUgd29ya2Fyb3VuZHMgaW1tZWRpYXRlbHkuXG5cbk5PVEU6IENvZGUgaXMgX25vdF8gaW1wYWN0ZWQgaWYgYWxsb3dlZCB0YWdzIGFyZSBvdmVycmlkZGVuIHVzaW5nIGVpdGhlciBvZiB0aGUgZm9sbG93aW5nIG1lY2hhbmlzbXM6XG5cbi0gdGhlIGA6dGFnc2Agb3B0aW9uIHRvIHRoZSBBY3Rpb24gVmlldyBoZWxwZXIgbWV0aG9kIGBzYW5pdGl6ZWAuXG4tIHRoZSBgOnRhZ3NgIG9wdGlvbiB0byB0aGUgaW5zdGFuY2UgbWV0aG9kIGBTYWZlTGlzdFNhbml0aXplciNzYW5pdGl6ZWAuXG5cblxuIyMgV29ya2Fyb3VuZHNcblxuUmVtb3ZlIGVpdGhlciBcInNlbGVjdFwiIG9yIFwic3R5bGVcIiBmcm9tIHRoZSBvdmVycmlkZGVuIGFsbG93ZWQgdGFncy5cblxuXG4jIyBSZWZlcmVuY2VzXG5cbi0gW0NXRSAtIENXRS03OTogSW1wcm9wZXIgTmV1dHJhbGl6YXRpb24gb2YgSW5wdXQgRHVyaW5nIFdlYiBQYWdlIEdlbmVyYXRpb24gKCdDcm9zcy1zaXRlIFNjcmlwdGluZycpICg0LjkpXShodHRwczovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy83OS5odG1sKVxuLSBodHRwczovL2N2ZS5taXRyZS5vcmcvY2dpLWJpbi9jdmVuYW1lLmNnaT9uYW1lPUNWRS0yMDIyLTMyMjA5XG4tIGh0dHBzOi8vaGFja2Vyb25lLmNvbS9yZXBvcnRzLzE2NTQzMTBcblxuXG4jIyBDcmVkaXRcblxuVGhpcyB2dWxuZXJhYmlsaXR5IHdhcyByZXNwb25zaWJseSByZXBvcnRlZCBieSBEb21pbmljIEJyZXVrZXIuXG4iLCJjdnNzIjp7InNjb3JlIjo2LjF9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLXJyZmMtN2c4cC05OXE4In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMi0yMzUyMCJ9XSwic3VtbWFyeSI6IlBvc3NpYmxlIFhTUyB2dWxuZXJhYmlsaXR5IHdpdGggY2VydGFpbiBjb25maWd1cmF0aW9ucyBvZiByYWlscy1odG1sLXNhbml0aXplciJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFpbHMtaHRtbC1zYW5pdGl6ZXIifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuNC40In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuNC40In19LHsiaWQiOiJSVkFfa3dET0J6bURnTTdBTEJhTCIsIm51bWJlciI6NTgsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjItMTItMTRUMDM6MjU6MjZaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIFN1bW1hcnlcblxuVGhlcmUgaXMgYSBwb3NzaWJsZSBYU1MgdnVsbmVyYWJpbGl0eSB3aXRoIGNlcnRhaW4gY29uZmlndXJhdGlvbnMgb2YgUmFpbHM6Okh0bWw6OlNhbml0aXplci5cblxuLSBWZXJzaW9ucyBhZmZlY3RlZDogQUxMXG4tIE5vdCBhZmZlY3RlZDogTk9ORVxuLSBGaXhlZCB2ZXJzaW9uczogMS40LjRcblxuXG4jIyBJbXBhY3RcblxuQSBwb3NzaWJsZSBYU1MgdnVsbmVyYWJpbGl0eSB3aXRoIGNlcnRhaW4gY29uZmlndXJhdGlvbnMgb2YgUmFpbHM6Okh0bWw6OlNhbml0aXplciBtYXkgYWxsb3cgYW4gYXR0YWNrZXIgdG8gaW5qZWN0IGNvbnRlbnQgaWYgdGhlIGFwcGxpY2F0aW9uIGRldmVsb3BlciBoYXMgb3ZlcnJpZGRlbiB0aGUgc2FuaXRpemVyJ3MgYWxsb3dlZCB0YWdzIGluIGVpdGhlciBvZiB0aGUgZm9sbG93aW5nIHdheXM6XG5cbi0gYWxsb3cgYm90aCBcIm1hdGhcIiBhbmQgXCJzdHlsZVwiIGVsZW1lbnRzLFxuLSBvciBhbGxvdyBib3RoIFwic3ZnXCIgYW5kIFwic3R5bGVcIiBlbGVtZW50c1xuXG5Db2RlIGlzIG9ubHkgaW1wYWN0ZWQgaWYgYWxsb3dlZCB0YWdzIGFyZSBiZWluZyBvdmVycmlkZGVuLiBBcHBsaWNhdGlvbnMgbWF5IGJlIGRvaW5nIHRoaXMgaW4gZm91ciBkaWZmZXJlbnQgd2F5czpcblxuMS4gdXNpbmcgYXBwbGljYXRpb24gY29uZmlndXJhdGlvbjpcblxuICBgYGBydWJ5XG4gICMgSW4gY29uZmlnL2FwcGxpY2F0aW9uLnJiXG4gIGNvbmZpZy5hY3Rpb25fdmlldy5zYW5pdGl6ZWRfYWxsb3dlZF90YWdzID0gW1wibWF0aFwiLCBcInN0eWxlXCJdXG4gICMgb3JcbiAgY29uZmlnLmFjdGlvbl92aWV3LnNhbml0aXplZF9hbGxvd2VkX3RhZ3MgPSBbXCJzdmdcIiwgXCJzdHlsZVwiXVxuICBgYGBcblxuICBzZWUgaHR0cHM6Ly9ndWlkZXMucnVieW9ucmFpbHMub3JnL2NvbmZpZ3VyaW5nLmh0bWwjY29uZmlndXJpbmctYWN0aW9uLXZpZXdcblxuMi4gdXNpbmcgYSBgOnRhZ3NgIG9wdGlvbiB0byB0aGUgQWN0aW9uIFZpZXcgaGVscGVyIGBzYW5pdGl6ZWA6XG5cbiAgYGBgXG4gIDwlPSBzYW5pdGl6ZSBAY29tbWVudC5ib2R5LCB0YWdzOiBbXCJtYXRoXCIsIFwic3R5bGVcIl0gJT5cbiAgPCUjIG9yICU+XG4gIDwlPSBzYW5pdGl6ZSBAY29tbWVudC5ib2R5LCB0YWdzOiBbXCJzdmdcIiwgXCJzdHlsZVwiXSAlPlxuICBgYGBcblxuICBzZWUgaHR0cHM6Ly9hcGkucnVieW9ucmFpbHMub3JnL2NsYXNzZXMvQWN0aW9uVmlldy9IZWxwZXJzL1Nhbml0aXplSGVscGVyLmh0bWwjbWV0aG9kLWktc2FuaXRpemVcblxuMy4gdXNpbmcgUmFpbHM6Okh0bWw6OlNhZmVMaXN0U2FuaXRpemVyIGNsYXNzIG1ldGhvZCBgYWxsb3dlZF90YWdzPWA6XG5cbiAgYGBgcnVieVxuICAjIGNsYXNzLWxldmVsIG9wdGlvblxuICBSYWlsczo6SHRtbDo6U2FmZUxpc3RTYW5pdGl6ZXIuYWxsb3dlZF90YWdzID0gW1wibWF0aFwiLCBcInN0eWxlXCJdXG4gICMgb3JcbiAgUmFpbHM6Okh0bWw6OlNhZmVMaXN0U2FuaXRpemVyLmFsbG93ZWRfdGFncyA9IFtcInN2Z1wiLCBcInN0eWxlXCJdXG4gIGBgYFxuXG40LiB1c2luZyBhIGA6dGFnc2Agb3B0aW9ucyB0byB0aGUgUmFpbHM6Okh0bWw6OlNhZmVMaXN0U2FuaXRpemVyIGluc3RhbmNlIG1ldGhvZCBgc2FuaXRpemVgOlxuXG4gIGBgYHJ1YnlcbiAgIyBpbnN0YW5jZS1sZXZlbCBvcHRpb25cbiAgUmFpbHM6Okh0bWw6OlNhZmVMaXN0U2FuaXRpemVyLm5ldy5zYW5pdGl6ZShAYXJ0aWNsZS5ib2R5LCB0YWdzOiBbXCJtYXRoXCIsIFwic3R5bGVcIl0pXG4gICMgb3JcbiAgUmFpbHM6Okh0bWw6OlNhZmVMaXN0U2FuaXRpemVyLm5ldy5zYW5pdGl6ZShAYXJ0aWNsZS5ib2R5LCB0YWdzOiBbXCJzdmdcIiwgXCJzdHlsZVwiXSlcbiAgYGBgXG5cbkFsbCB1c2VycyBvdmVycmlkaW5nIHRoZSBhbGxvd2VkIHRhZ3MgYnkgYW55IG9mIHRoZSBhYm92ZSBtZWNoYW5pc21zIHRvIGluY2x1ZGUgKChcIm1hdGhcIiBvciBcInN2Z1wiKSBhbmQgXCJzdHlsZVwiKSBzaG91bGQgZWl0aGVyIHVwZ3JhZGUgb3IgdXNlIG9uZSBvZiB0aGUgd29ya2Fyb3VuZHMgaW1tZWRpYXRlbHkuXG5cblxuIyMgV29ya2Fyb3VuZHNcblxuUmVtb3ZlIFwic3R5bGVcIiBmcm9tIHRoZSBvdmVycmlkZGVuIGFsbG93ZWQgdGFncywgb3IgcmVtb3ZlIFwibWF0aFwiIGFuZCBcInN2Z1wiIGZyb20gdGhlIG92ZXJyaWRkZW4gYWxsb3dlZCB0YWdzLlxuXG5cbiMjIFJlZmVyZW5jZXNcblxuLSBbQ1dFIC0gQ1dFLTc5OiBJbXByb3BlciBOZXV0cmFsaXphdGlvbiBvZiBJbnB1dCBEdXJpbmcgV2ViIFBhZ2UgR2VuZXJhdGlvbiAoJ0Nyb3NzLXNpdGUgU2NyaXB0aW5nJykgKDQuOSldKGh0dHBzOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzc5Lmh0bWwpXG4tIGh0dHBzOi8vaGFja2Vyb25lLmNvbS9yZXBvcnRzLzE2NTY2MjdcblxuXG4jIyBDcmVkaXRcblxuVGhpcyB2dWxuZXJhYmlsaXR5IHdhcyByZXNwb25zaWJseSByZXBvcnRlZCBieSBEb21pbmljIEJyZXVrZXIuXG4iLCJjdnNzIjp7InNjb3JlIjo2LjF9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTloOWctOTNnYy02MjNoIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMi0yMzUxOSJ9XSwic3VtbWFyeSI6IlBvc3NpYmxlIFhTUyB2dWxuZXJhYmlsaXR5IHdpdGggY2VydGFpbiBjb25maWd1cmF0aW9ucyBvZiByYWlscy1odG1sLXNhbml0aXplciJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFpbHMtaHRtbC1zYW5pdGl6ZXIifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuNC40In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuNC40In19LHsiaWQiOiJSVkFfa3dET0J6bURnTTdBTDZnMCIsIm51bWJlciI6NTksInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjItMTItMTRUMDQ6MDk6MzBaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIFN1bW1hcnlcblxuQ2VydGFpbiBjb25maWd1cmF0aW9ucyBvZiByYWlscy1odG1sLXNhbml0aXplciBgPCAxLjQuNGAgdXNlIGFuIGluZWZmaWNpZW50IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHN1c2NlcHRpYmxlIHRvIGV4Y2Vzc2l2ZSBiYWNrdHJhY2tpbmcgd2hlbiBhdHRlbXB0aW5nIHRvIHNhbml0aXplIGNlcnRhaW4gU1ZHIGF0dHJpYnV0ZXMuIFRoaXMgbWF5IGxlYWQgdG8gYSBkZW5pYWwgb2Ygc2VydmljZSB0aHJvdWdoIENQVSByZXNvdXJjZSBjb25zdW1wdGlvbi5cblxuXG4jIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gcmFpbHMtaHRtbC1zYW5pdGl6ZXIgYD49IDEuNC40YC5cblxuXG4jIyBTZXZlcml0eVxuXG5UaGUgbWFpbnRhaW5lcnMgaGF2ZSBldmFsdWF0ZWQgdGhpcyBhcyBbSGlnaCBTZXZlcml0eSA3LjUgKENWU1MzLjEpXShodHRwczovL3d3dy5maXJzdC5vcmcvY3Zzcy9jYWxjdWxhdG9yLzMuMSNDVlNTOjMuMS9BVjpOL0FDOkwvUFI6Ti9VSTpOL1M6VS9DOk4vSTpOL0E6SCkuXG5cblxuIyMgUmVmZXJlbmNlc1xuXG4tIFtDV0UgLSBDV0UtMTMzMzogSW5lZmZpY2llbnQgUmVndWxhciBFeHByZXNzaW9uIENvbXBsZXhpdHkgKDQuOSldKGh0dHBzOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzEzMzMuaHRtbClcbi0gaHR0cHM6Ly9oYWNrZXJvbmUuY29tL3JlcG9ydHMvMTY4NDE2M1xuXG5cbiMjIENyZWRpdFxuXG5UaGlzIHZ1bG5lcmFiaWxpdHkgd2FzIHJlc3BvbnNpYmx5IHJlcG9ydGVkIGJ5IEBvb29vb29vLXEgKGh0dHBzOi8vZ2l0aHViLmNvbS9vb29vb29vLXEpLlxuIiwiY3ZzcyI6eyJzY29yZSI6Ny41fSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTV4NzktdzgyZi1ndzh3In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMi0yMzUxNyJ9XSwic3VtbWFyeSI6IkluZWZmaWNpZW50IFJlZ3VsYXIgRXhwcmVzc2lvbiBDb21wbGV4aXR5IGluIHJhaWxzLWh0bWwtc2FuaXRpemVyIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJyYWlscy1odG1sLXNhbml0aXplciJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjQuNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjQuNCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ003QVJ1X3AiLCJudW1iZXIiOjYwLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIyLTEyLTE0VDA4OjQzOjExWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyBTdW1tYXJ5XG5cbkxvb2ZhaCBgPCAyLjE5LjFgIGNvbnRhaW5zIGFuIGluZWZmaWNpZW50IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHN1c2NlcHRpYmxlIHRvIGV4Y2Vzc2l2ZSBiYWNrdHJhY2tpbmcgd2hlbiBhdHRlbXB0aW5nIHRvIHNhbml0aXplIGNlcnRhaW4gU1ZHIGF0dHJpYnV0ZXMuIFRoaXMgbWF5IGxlYWQgdG8gYSBkZW5pYWwgb2Ygc2VydmljZSB0aHJvdWdoIENQVSByZXNvdXJjZSBjb25zdW1wdGlvbi5cblxuXG4jIyBNaXRpZ2F0aW9uXG5cblVwZ3JhZGUgdG8gTG9vZmFoIGA+PSAyLjE5LjFgLlxuXG5cbiMjIFNldmVyaXR5XG5cblRoZSBMb29mYWggbWFpbnRhaW5lcnMgaGF2ZSBldmFsdWF0ZWQgdGhpcyBhcyBbSGlnaCBTZXZlcml0eSA3LjUgKENWU1MzLjEpXShodHRwczovL3d3dy5maXJzdC5vcmcvY3Zzcy9jYWxjdWxhdG9yLzMuMSNDVlNTOjMuMS9BVjpOL0FDOkwvUFI6Ti9VSTpOL1M6VS9DOk4vSTpOL0E6SCkuXG5cblxuIyMgUmVmZXJlbmNlc1xuXG4tIFtDV0UgLSBDV0UtMTMzMzogSW5lZmZpY2llbnQgUmVndWxhciBFeHByZXNzaW9uIENvbXBsZXhpdHkgKDQuOSldKGh0dHBzOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzEzMzMuaHRtbClcbi0gaHR0cHM6Ly9oYWNrZXJvbmUuY29tL3JlcG9ydHMvMTY4NDE2M1xuXG5cbiMjIENyZWRpdFxuXG5UaGlzIHZ1bG5lcmFiaWxpdHkgd2FzIHJlc3BvbnNpYmx5IHJlcG9ydGVkIGJ5IEBvb29vb29vLXEgKGh0dHBzOi8vZ2l0aHViLmNvbS9vb29vb29vLXEpLlxuIiwiY3ZzcyI6eyJzY29yZSI6Ny41fSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTQ4NmYtaGpqOS05dmhoIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMi0yMzUxNCJ9XSwic3VtbWFyeSI6IkluZWZmaWNpZW50IFJlZ3VsYXIgRXhwcmVzc2lvbiBDb21wbGV4aXR5IGluIExvb2ZhaCJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibG9vZmFoIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjIuMTkuMSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAyLjE5LjEifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN0d0MlRIIiwibnVtYmVyIjo2MSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wMS0xOVQwMDoyODo0MFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlcmUgaXMgYSBkZW5pYWwgb2Ygc2VydmljZSB2dWxuZXJhYmlsaXR5IGluIHRoZSBtdWx0aXBhcnQgcGFyc2luZyBjb21wb25lbnQgb2YgUmFjay4gVGhpcyB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGFzc2lnbmVkIHRoZSBDVkUgaWRlbnRpZmllciBDVkUtMjAyMi00NDU3Mi5cblxuVmVyc2lvbnMgQWZmZWN0ZWQ6ID49IDIuMC4wIE5vdCBhZmZlY3RlZDogTm9uZS4gRml4ZWQgVmVyc2lvbnM6IDIuMC45LjIsIDIuMS40LjIsIDIuMi42LjEsIDMuMC4wLjFcbkltcGFjdFxuXG5DYXJlZnVsbHkgY3JhZnRlZCBpbnB1dCBjYW4gY2F1c2UgUkZDMjE4MyBtdWx0aXBhcnQgYm91bmRhcnkgcGFyc2luZyBpbiBSYWNrIHRvIHRha2UgYW4gdW5leHBlY3RlZCBhbW91bnQgb2YgdGltZSwgcG9zc2libHkgcmVzdWx0aW5nIGluIGEgZGVuaWFsIG9mIHNlcnZpY2UgYXR0YWNrIHZlY3Rvci4gQW55IGFwcGxpY2F0aW9ucyB0aGF0IHBhcnNlIG11bHRpcGFydCBwb3N0cyB1c2luZyBSYWNrICh2aXJ0dWFsbHkgYWxsIFJhaWxzIGFwcGxpY2F0aW9ucykgYXJlIGltcGFjdGVkLlxuUmVsZWFzZXNcblxuVGhlIGZpeGVkIHJlbGVhc2VzIGFyZSBhdmFpbGFibGUgYXQgdGhlIG5vcm1hbCBsb2NhdGlvbnMuXG5Xb3JrYXJvdW5kc1xuXG5UaGVyZSBhcmUgbm8gZmVhc2libGUgd29ya2Fyb3VuZHMgZm9yIHRoaXMgaXNzdWUuXG5QYXRjaGVzXG5cblRvIGFpZCB1c2VycyB3aG8gYXJlbuKAmXQgYWJsZSB0byB1cGdyYWRlIGltbWVkaWF0ZWx5IHdlIGhhdmUgcHJvdmlkZWQgcGF0Y2hlcyBmb3IgdGhlIHR3byBzdXBwb3J0ZWQgcmVsZWFzZSBzZXJpZXMuIFRoZXkgYXJlIGluIGdpdC1hbSBmb3JtYXQgYW5kIGNvbnNpc3Qgb2YgYSBzaW5nbGUgY2hhbmdlc2V0LlxuXG4gICAgMi0wLUZvcmJpZC1jb250cm9sLWNoYXJhY3RlcnMtaW4tYXR0cmlidXRlcy5wYXRjaCAtIFBhdGNoIGZvciAyLjAgc2VyaWVzXG4gICAgMi0xLUZvcmJpZC1jb250cm9sLWNoYXJhY3RlcnMtaW4tYXR0cmlidXRlcy5wYXRjaCAtIFBhdGNoIGZvciAyLjEgc2VyaWVzXG4gICAgMi0yLUZvcmJpZC1jb250cm9sLWNoYXJhY3RlcnMtaW4tYXR0cmlidXRlcy5wYXRjaCAtIFBhdGNoIGZvciAyLjIgc2VyaWVzXG4gICAgMy0wLUZvcmJpZC1jb250cm9sLWNoYXJhY3RlcnMtaW4tYXR0cmlidXRlcy5wYXRjaCAtIFBhdGNoIGZvciAzLjAgc2VyaWVzXG4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6IkxPVyIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1ycXYyLTI3NXgtMmpxNSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjItNDQ1NzIifV0sInN1bW1hcnkiOiJEZW5pYWwgb2Ygc2VydmljZSB2aWEgbXVsdGlwYXJ0IHBhcnNpbmcgaW4gUmFjayJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFjayJ9LCJzZXZlcml0eSI6IkxPVyIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjIuMC45LjIifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDIuMC4wLCA8IDIuMC45LjIifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN0d0OFRDIiwibnVtYmVyIjo2Miwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wMS0xOVQwMDozMjoyNFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlcmUgaXMgYSBkZW5pYWwgb2Ygc2VydmljZSB2dWxuZXJhYmlsaXR5IGluIHRoZSBDb250ZW50LURpc3Bvc2l0aW9uIHBhcnNpbmcgY29tcG9uZW50IG9mIFJhY2suIFRoaXMgdnVsbmVyYWJpbGl0eSBoYXMgYmVlbiBhc3NpZ25lZCB0aGUgQ1ZFIGlkZW50aWZpZXIgQ1ZFLTIwMjItNDQ1NzEuXG5cblZlcnNpb25zIEFmZmVjdGVkOiA+PSAyLjAuMCBOb3QgYWZmZWN0ZWQ6IE5vbmUuIEZpeGVkIFZlcnNpb25zOiAyLjAuOS4yLCAyLjEuNC4yLCAyLjIuNi4xLCAzLjAuMC4xXG5JbXBhY3RcblxuQ2FyZWZ1bGx5IGNyYWZ0ZWQgaW5wdXQgY2FuIGNhdXNlIENvbnRlbnQtRGlzcG9zaXRpb24gaGVhZGVyIHBhcnNpbmcgaW4gUmFjayB0byB0YWtlIGFuIHVuZXhwZWN0ZWQgYW1vdW50IG9mIHRpbWUsIHBvc3NpYmx5IHJlc3VsdGluZyBpbiBhIGRlbmlhbCBvZiBzZXJ2aWNlIGF0dGFjayB2ZWN0b3IuIFRoaXMgaGVhZGVyIGlzIHVzZWQgdHlwaWNhbGx5IHVzZWQgaW4gbXVsdGlwYXJ0IHBhcnNpbmcuIEFueSBhcHBsaWNhdGlvbnMgdGhhdCBwYXJzZSBtdWx0aXBhcnQgcG9zdHMgdXNpbmcgUmFjayAodmlydHVhbGx5IGFsbCBSYWlscyBhcHBsaWNhdGlvbnMpIGFyZSBpbXBhY3RlZC5cblJlbGVhc2VzXG5cblRoZSBmaXhlZCByZWxlYXNlcyBhcmUgYXZhaWxhYmxlIGF0IHRoZSBub3JtYWwgbG9jYXRpb25zLlxuV29ya2Fyb3VuZHNcblxuVGhlcmUgYXJlIG5vIGZlYXNpYmxlIHdvcmthcm91bmRzIGZvciB0aGlzIGlzc3VlLlxuUGF0Y2hlc1xuXG5UbyBhaWQgdXNlcnMgd2hvIGFyZW7igJl0IGFibGUgdG8gdXBncmFkZSBpbW1lZGlhdGVseSB3ZSBoYXZlIHByb3ZpZGVkIHBhdGNoZXMgZm9yIHRoZSB0d28gc3VwcG9ydGVkIHJlbGVhc2Ugc2VyaWVzLiBUaGV5IGFyZSBpbiBnaXQtYW0gZm9ybWF0IGFuZCBjb25zaXN0IG9mIGEgc2luZ2xlIGNoYW5nZXNldC5cblxuICAgIDItMC1GaXgtUmVEb1MtdnVsbmVyYWJpbGl0eS1pbi1tdWx0aXBhcnQtcGFyc2VyIC0gUGF0Y2ggZm9yIDIuMCBzZXJpZXNcbiAgICAyLTEtRml4LVJlRG9TLXZ1bG5lcmFiaWxpdHktaW4tbXVsdGlwYXJ0LXBhcnNlciAtIFBhdGNoIGZvciAyLjEgc2VyaWVzXG4gICAgMi0yLUZpeC1SZURvUy12dWxuZXJhYmlsaXR5LWluLW11bHRpcGFydC1wYXJzZXIgLSBQYXRjaCBmb3IgMi4yIHNlcmllc1xuICAgIDMtMC1GaXgtUmVEb1MtdnVsbmVyYWJpbGl0eS1pbi1tdWx0aXBhcnQtcGFyc2VyIC0gUGF0Y2ggZm9yIDMuMCBzZXJpZXNcbiIsImN2c3MiOnsic2NvcmUiOjAuMH0sInNldmVyaXR5IjoiTE9XIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTkzcG0tNXA1Zi0zZ2h4In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMi00NDU3MSJ9XSwic3VtbWFyeSI6IkRlbmlhbCBvZiBTZXJ2aWNlIFZ1bG5lcmFiaWxpdHkgaW4gUmFjayBDb250ZW50LURpc3Bvc2l0aW9uIHBhcnNpbmcifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InJhY2sifSwic2V2ZXJpdHkiOiJMT1ciLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjAuOS4yIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI+PSAyLjAuMCwgPCAyLjAuOS4yIn19LHsiaWQiOiJSVkFfa3dET0J6bURnTTdHMks5TyIsIm51bWJlciI6NjMsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDEtMTlUMDY6NDE6MzlaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGEgUmVEb1MgYmFzZWQgRG9TIHZ1bG5lcmFiaWxpdHkgaW4gdGhlIEdsb2JhbElEIGdlbS4gVGhpcyB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGFzc2lnbmVkIHRoZSBDVkUgaWRlbnRpZmllciBDVkUtMjAyMy0yMjc5OS5cblxuVmVyc2lvbnMgQWZmZWN0ZWQ6ID49IDAuMi4xIE5vdCBhZmZlY3RlZDogTk9UQUZGRUNURUQgRml4ZWQgVmVyc2lvbnM6IDEuMC4xXG5JbXBhY3RcblxuVGhlcmUgaXMgYSBwb3NzaWJsZSBEb1MgdnVsbmVyYWJpbGl0eSBpbiB0aGUgbW9kZWwgbmFtZSBwYXJzaW5nIHNlY3Rpb24gb2YgdGhlIEdsb2JhbElEIGdlbS4gQ2FyZWZ1bGx5IGNyYWZ0ZWQgaW5wdXQgY2FuIGNhdXNlIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gZW5naW5lIHRvIHRha2UgYW4gdW5leHBlY3RlZCBhbW91bnQgb2YgdGltZS4gQWxsIHVzZXJzIHJ1bm5pbmcgYW4gYWZmZWN0ZWQgcmVsZWFzZSBzaG91bGQgZWl0aGVyIHVwZ3JhZGUgb3IgdXNlIG9uZSBvZiB0aGUgd29ya2Fyb3VuZHMgaW1tZWRpYXRlbHkuXG5SZWxlYXNlc1xuXG5UaGUgRklYRUQgcmVsZWFzZXMgYXJlIGF2YWlsYWJsZSBhdCB0aGUgbm9ybWFsIGxvY2F0aW9ucy5cbldvcmthcm91bmRzXG5cblRoZXJlIGFyZSBubyBmZWFzaWJsZSB3b3JrYXJvdW5kcyBmb3IgdGhpcyBpc3N1ZS5cblBhdGNoZXNcblxuVG8gYWlkIHVzZXJzIHdobyBhcmVu4oCZdCBhYmxlIHRvIHVwZ3JhZGUgaW1tZWRpYXRlbHkgd2UgaGF2ZSBwcm92aWRlZCBwYXRjaGVzIGZvciB0aGUgdHdvIHN1cHBvcnRlZCByZWxlYXNlIHNlcmllcy4gVGhleSBhcmUgaW4gZ2l0LWFtIGZvcm1hdCBhbmQgY29uc2lzdCBvZiBhIHNpbmdsZSBjaGFuZ2VzZXQuXG5cbiAgICAxLTAtbW9kZWwtbmFtZS1yZWRvcy5wYXRjaCAtIFBhdGNoIGZvciAxLjAgc2VyaWVzXG4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6IkxPVyIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS0yM2MyLWd3cDUtcHh3OSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjMtMjI3OTkifV0sInN1bW1hcnkiOiJSZURvUyBiYXNlZCBEb1MgdnVsbmVyYWJpbGl0eSBpbiBHbG9iYWxJRCJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoiZ2xvYmFsaWQifSwic2V2ZXJpdHkiOiJMT1ciLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjAuMSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gMC4yLjEsIDwgMS4wLjEifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN0hHQk1aIiwibnVtYmVyIjo2NCwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wMS0xOVQxODoxMjozMFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlcmUgaXMgYSBwb3NzaWJsZSBkZW5pYWwgb2Ygc2VydmljZSB2dWxuZXJhYmlsaXR5IGluIHRoZSBSYW5nZSBoZWFkZXIgcGFyc2luZyBjb21wb25lbnQgb2YgUmFjay4gVGhpcyB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGFzc2lnbmVkIHRoZSBDVkUgaWRlbnRpZmllciBDVkUtMjAyMi00NDU3MC5cblxuVmVyc2lvbnMgQWZmZWN0ZWQ6ID49IDEuNS4wIE5vdCBhZmZlY3RlZDogTm9uZS4gRml4ZWQgVmVyc2lvbnM6IDIuMC45LjIsIDIuMS40LjIsIDIuMi42LjIsIDMuMC4wLjFcbkltcGFjdFxuXG5DYXJlZnVsbHkgY3JhZnRlZCBpbnB1dCBjYW4gY2F1c2UgdGhlIFJhbmdlIGhlYWRlciBwYXJzaW5nIGNvbXBvbmVudCBpbiBSYWNrIHRvIHRha2UgYW4gdW5leHBlY3RlZCBhbW91bnQgb2YgdGltZSwgcG9zc2libHkgcmVzdWx0aW5nIGluIGEgZGVuaWFsIG9mIHNlcnZpY2UgYXR0YWNrIHZlY3Rvci4gQW55IGFwcGxpY2F0aW9ucyB0aGF0IGRlYWwgd2l0aCBSYW5nZSByZXF1ZXN0cyAoc3VjaCBhcyBzdHJlYW1pbmcgYXBwbGljYXRpb25zLCBvciBhcHBsaWNhdGlvbnMgdGhhdCBzZXJ2ZSBmaWxlcykgbWF5IGJlIGltcGFjdGVkLlxuUmVsZWFzZXNcblxuVGhlIGZpeGVkIHJlbGVhc2VzIGFyZSBhdmFpbGFibGUgYXQgdGhlIG5vcm1hbCBsb2NhdGlvbnMuXG5Xb3JrYXJvdW5kc1xuXG5UaGVyZSBhcmUgbm8gZmVhc2libGUgd29ya2Fyb3VuZHMgZm9yIHRoaXMgaXNzdWUuXG5QYXRjaGVzXG5cblRvIGFpZCB1c2VycyB3aG8gYXJlbuKAmXQgYWJsZSB0byB1cGdyYWRlIGltbWVkaWF0ZWx5IHdlIGhhdmUgcHJvdmlkZWQgcGF0Y2hlcyBmb3IgdGhlIHR3byBzdXBwb3J0ZWQgcmVsZWFzZSBzZXJpZXMuIFRoZXkgYXJlIGluIGdpdC1hbSBmb3JtYXQgYW5kIGNvbnNpc3Qgb2YgYSBzaW5nbGUgY2hhbmdlc2V0LlxuXG4gICAgMi0wLUZpeC1SZURvUy1pbi1SYWNrLVV0aWxzLmdldF9ieXRlX3Jhbmdlcy5wYXRjaCAtIFBhdGNoIGZvciAyLjAgc2VyaWVzXG4gICAgMi0xLUZpeC1SZURvUy1pbi1SYWNrLVV0aWxzLmdldF9ieXRlX3Jhbmdlcy5wYXRjaCAtIFBhdGNoIGZvciAyLjEgc2VyaWVzXG4gICAgMi0yLUZpeC1SZURvUy1pbi1SYWNrLVV0aWxzLmdldF9ieXRlX3Jhbmdlcy5wYXRjaCAtIFBhdGNoIGZvciAyLjIgc2VyaWVzXG4gICAgMy0wLUZpeC1SZURvUy1pbi1SYWNrLVV0aWxzLmdldF9ieXRlX3Jhbmdlcy5wYXRjaCAtIFBhdGNoIGZvciAzLjAgc2VyaWVzXG4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtNjVmNS1tZnBmLXZmaGoifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIyLTQ0NTcwIn1dLCJzdW1tYXJ5IjoiRGVuaWFsIG9mIHNlcnZpY2UgdmlhIGhlYWRlciBwYXJzaW5nIGluIFJhY2sifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InJhY2sifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMi4wLjkuMiJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gMS41LjAsIDwgMi4wLjkuMiJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ003SU91V0wiLCJudW1iZXIiOjY5LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIzLTAxLTI0VDIwOjMyOjEzWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSBpcyBhIHBvc3NpYmxlIHJlZ3VsYXIgZXhwcmVzc2lvbiBiYXNlZCBEb1MgdnVsbmVyYWJpbGl0eSBpbiBBY3Rpb24gRGlzcGF0Y2guIFRoaXMgdnVsbmVyYWJpbGl0eSBoYXMgYmVlbiBhc3NpZ25lZCB0aGUgQ1ZFIGlkZW50aWZpZXIgQ1ZFLTIwMjMtMjI3OTIuXG5cblZlcnNpb25zIEFmZmVjdGVkOiA+PSAzLjAuMCBOb3QgYWZmZWN0ZWQ6IDwgMy4wLjAgRml4ZWQgVmVyc2lvbnM6IDUuMi44LjE1IChSYWlscyBMVFMpLCA2LjEuNy4xLCA3LjAuNC4xXG5JbXBhY3RcblxuU3BlY2lhbGx5IGNyYWZ0ZWQgY29va2llcywgaW4gY29tYmluYXRpb24gd2l0aCBhIHNwZWNpYWxseSBjcmFmdGVkIFhfRk9SV0FSREVEX0hPU1QgaGVhZGVyIGNhbiBjYXVzZSB0aGUgcmVndWxhciBleHByZXNzaW9uIGVuZ2luZSB0byBlbnRlciBhIHN0YXRlIG9mIGNhdGFzdHJvcGhpYyBiYWNrdHJhY2tpbmcuIFRoaXMgY2FuIGNhdXNlIHRoZSBwcm9jZXNzIHRvIHVzZSBsYXJnZSBhbW91bnRzIG9mIENQVSBhbmQgbWVtb3J5LCBsZWFkaW5nIHRvIGEgcG9zc2libGUgRG9TIHZ1bG5lcmFiaWxpdHkgQWxsIHVzZXJzIHJ1bm5pbmcgYW4gYWZmZWN0ZWQgcmVsZWFzZSBzaG91bGQgZWl0aGVyIHVwZ3JhZGUgb3IgdXNlIG9uZSBvZiB0aGUgd29ya2Fyb3VuZHMgaW1tZWRpYXRlbHkuXG5SZWxlYXNlc1xuXG5UaGUgRklYRUQgcmVsZWFzZXMgYXJlIGF2YWlsYWJsZSBhdCB0aGUgbm9ybWFsIGxvY2F0aW9ucy5cbldvcmthcm91bmRzXG5cbldlIHJlY29tbWVuZCB0aGF0IGFsbCB1c2VycyB1cGdyYWRlIHRvIG9uZSBvZiB0aGUgRklYRUQgdmVyc2lvbnMuIEluIHRoZSBtZWFudGltZSwgdXNlcnMgY2FuIG1pdGlnYXRlIHRoaXMgdnVsbmVyYWJpbGl0eSBieSB1c2luZyBhIGxvYWQgYmFsYW5jZXIgb3Igb3RoZXIgZGV2aWNlIHRvIGZpbHRlciBvdXQgbWFsaWNpb3VzIFhfRk9SV0FSREVEX0hPU1QgaGVhZGVycyBiZWZvcmUgdGhleSByZWFjaCB0aGUgYXBwbGljYXRpb24uXG5QYXRjaGVzXG5cblRvIGFpZCB1c2VycyB3aG8gYXJlbuKAmXQgYWJsZSB0byB1cGdyYWRlIGltbWVkaWF0ZWx5IHdlIGhhdmUgcHJvdmlkZWQgcGF0Y2hlcyBmb3IgdGhlIHR3byBzdXBwb3J0ZWQgcmVsZWFzZSBzZXJpZXMuIFRoZXkgYXJlIGluIGdpdC1hbSBmb3JtYXQgYW5kIGNvbnNpc3Qgb2YgYSBzaW5nbGUgY2hhbmdlc2V0LlxuXG4gICAgNi0xLVVzZS1zdHJpbmctc3BsaXQtaW5zdGVhZC1vZi1yZWdleC1mb3ItZG9tYWluLXBhcnRzLnBhdGNoIC0gUGF0Y2ggZm9yIDYuMSBzZXJpZXNcbiAgICA3LTAtVXNlLXN0cmluZy1zcGxpdC1pbnN0ZWFkLW9mLXJlZ2V4LWZvci1kb21haW4tcGFydHMucGF0Y2ggLSBQYXRjaCBmb3IgNy4wIHNlcmllc1xuXG5QbGVhc2Ugbm90ZSB0aGF0IG9ubHkgdGhlIDcuMC5aIGFuZCA2LjEuWiBzZXJpZXMgYXJlIHN1cHBvcnRlZCBhdCBwcmVzZW50LCBhbmQgNi4wLlogZm9yIHNldmVyZSB2dWxuZXJhYmlsaXRpZXMuIFVzZXJzIG9mIGVhcmxpZXIgdW5zdXBwb3J0ZWQgcmVsZWFzZXMgYXJlIGFkdmlzZWQgdG8gdXBncmFkZSBhcyBzb29uIGFzIHBvc3NpYmxlIGFzIHdlIGNhbm5vdCBndWFyYW50ZWUgdGhlIGNvbnRpbnVlZCBhdmFpbGFiaWxpdHkgb2Ygc2VjdXJpdHkgZml4ZXMgZm9yIHVuc3VwcG9ydGVkIHJlbGVhc2VzLlxuXG5odHRwczovL3J1YnlvbnJhaWxzLm9yZy8yMDIzLzEvMTcvUmFpbHMtVmVyc2lvbnMtNi0wLTYtMS02LTEtNy0xLTctMC00LTEtaGF2ZS1iZWVuLXJlbGVhc2VkXG4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6IkxPVyIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1wODR2LTQ1eGotd3dxaiJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjMtMjI3OTIifV0sInN1bW1hcnkiOiJSZURvUyBiYXNlZCBEb1MgdnVsbmVyYWJpbGl0eSBpbiBBY3Rpb24gRGlzcGF0Y2gifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGlvbnBhY2sifSwic2V2ZXJpdHkiOiJMT1ciLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI1LjIuOC4xNSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gMy4wLjAsIDwgNS4yLjguMTUifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN0wtOFBNIiwibnVtYmVyIjo3Mywic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wMi0xMFQxNDoyMzo0OFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlcmUgaXMgYSBwb3NzaWJsZSByZWd1bGFyIGV4cHJlc3Npb24gYmFzZWQgRG9TIHZ1bG5lcmFiaWxpdHkgaW4gQWN0aW9uIERpc3BhdGNoIHJlbGF0ZWQgdG8gdGhlIElmLU5vbmUtTWF0Y2ggaGVhZGVyLiBUaGlzIHZ1bG5lcmFiaWxpdHkgaGFzIGJlZW4gYXNzaWduZWQgdGhlIENWRSBpZGVudGlmaWVyIENWRS0yMDIzLTIyNzk1LlxuXG5WZXJzaW9ucyBBZmZlY3RlZDogQWxsIE5vdCBhZmZlY3RlZDogTm9uZSBGaXhlZCBWZXJzaW9uczogNS4yLjguMTUgKFJhaWxzIExUUyksIDYuMS43LjEsIDcuMC40LjFcblxuSW1wYWN0XG5cbkEgc3BlY2lhbGx5IGNyYWZ0ZWQgSFRUUCBJZi1Ob25lLU1hdGNoIGhlYWRlciBjYW4gY2F1c2UgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBlbmdpbmUgdG8gZW50ZXIgYSBzdGF0ZSBvZiBjYXRhc3Ryb3BoaWMgYmFja3RyYWNraW5nLCB3aGVuIG9uIGEgdmVyc2lvbiBvZiBSdWJ5IGJlbG93IDMuMi4wLiBUaGlzIGNhbiBjYXVzZSB0aGUgcHJvY2VzcyB0byB1c2UgbGFyZ2UgYW1vdW50cyBvZiBDUFUgYW5kIG1lbW9yeSwgbGVhZGluZyB0byBhIHBvc3NpYmxlIERvUyB2dWxuZXJhYmlsaXR5IEFsbCB1c2VycyBydW5uaW5nIGFuIGFmZmVjdGVkIHJlbGVhc2Ugc2hvdWxkIGVpdGhlciB1cGdyYWRlIG9yIHVzZSBvbmUgb2YgdGhlIHdvcmthcm91bmRzIGltbWVkaWF0ZWx5LlxuUmVsZWFzZXNcblxuVGhlIEZJWEVEIHJlbGVhc2VzIGFyZSBhdmFpbGFibGUgYXQgdGhlIG5vcm1hbCBsb2NhdGlvbnMuXG5Xb3JrYXJvdW5kc1xuXG5XZSByZWNvbW1lbmQgdGhhdCBhbGwgdXNlcnMgdXBncmFkZSB0byBvbmUgb2YgdGhlIEZJWEVEIHZlcnNpb25zLiBJbiB0aGUgbWVhbnRpbWUsIHVzZXJzIGNhbiBtaXRpZ2F0ZSB0aGlzIHZ1bG5lcmFiaWxpdHkgYnkgdXNpbmcgYSBsb2FkIGJhbGFuY2VyIG9yIG90aGVyIGRldmljZSB0byBmaWx0ZXIgb3V0IG1hbGljaW91cyBJZi1Ob25lLU1hdGNoIGhlYWRlcnMgYmVmb3JlIHRoZXkgcmVhY2ggdGhlIGFwcGxpY2F0aW9uLlxuXG5Vc2VycyBvbiBSdWJ5IDMuMi4wIG9yIGdyZWF0ZXIgYXJlIG5vdCBhZmZlY3RlZCBieSB0aGlzIHZ1bG5lcmFiaWxpdHkuXG5QYXRjaGVzXG5cblRvIGFpZCB1c2VycyB3aG8gYXJlbuKAmXQgYWJsZSB0byB1cGdyYWRlIGltbWVkaWF0ZWx5IHdlIGhhdmUgcHJvdmlkZWQgcGF0Y2hlcyBmb3IgdGhlIHR3byBzdXBwb3J0ZWQgcmVsZWFzZSBzZXJpZXMuIFRoZXkgYXJlIGluIGdpdC1hbSBmb3JtYXQgYW5kIGNvbnNpc3Qgb2YgYSBzaW5nbGUgY2hhbmdlc2V0LlxuXG4gICAgNi0xLUF2b2lkLXJlZ2V4LWJhY2t0cmFja2luZy1vbi1JZi1Ob25lLU1hdGNoLWhlYWRlci5wYXRjaCAtIFBhdGNoIGZvciA2LjEgc2VyaWVzXG4gICAgNy0wLUF2b2lkLXJlZ2V4LWJhY2t0cmFja2luZy1vbi1JZi1Ob25lLU1hdGNoLWhlYWRlci5wYXRjaCAtIFBhdGNoIGZvciA3LjAgc2VyaWVzXG5cblBsZWFzZSBub3RlIHRoYXQgb25seSB0aGUgNy4wLlogYW5kIDYuMS5aIHNlcmllcyBhcmUgc3VwcG9ydGVkIGF0IHByZXNlbnQsIGFuZCA2LjAuWiBmb3Igc2V2ZXJlIHZ1bG5lcmFiaWxpdGllcy4gVXNlcnMgb2YgZWFybGllciB1bnN1cHBvcnRlZCByZWxlYXNlcyBhcmUgYWR2aXNlZCB0byB1cGdyYWRlIGFzIHNvb24gYXMgcG9zc2libGUgYXMgd2UgY2Fubm90IGd1YXJhbnRlZSB0aGUgY29udGludWVkIGF2YWlsYWJpbGl0eSBvZiBzZWN1cml0eSBmaXhlcyBmb3IgdW5zdXBwb3J0ZWQgcmVsZWFzZXMuIiwiY3ZzcyI6eyJzY29yZSI6MC4wfSwic2V2ZXJpdHkiOiJMT1ciLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtOHh3dy14M2czLTZqY3YifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIzLTIyNzk1In1dLCJzdW1tYXJ5IjoiUmVEb1MgYmFzZWQgRG9TIHZ1bG5lcmFiaWxpdHkgaW4gQWN0aW9uIERpc3BhdGNoIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJhY3Rpb25wYWNrIn0sInNldmVyaXR5IjoiTE9XIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNi4xLjcuMSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCA2LjEuNy4xIn19LHsiaWQiOiJSVkFfa3dET0J6bURnTTdTQmtPUyIsIm51bWJlciI6NzQsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDMtMTBUMDE6NDM6MDZaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IkluIGBudW1iZXJzLmNgIGluIGxpYnhzbHQgMS4xLjMzLCBhIHR5cGUgaG9sZGluZyBncm91cGluZyBjaGFyYWN0ZXJzIG9mIGFuIGB4c2w6bnVtYmVyYCBpbnN0cnVjdGlvbiB3YXMgdG9vIG5hcnJvdyBhbmQgYW4gaW52YWxpZCBjaGFyYWN0ZXIvbGVuZ3RoIGNvbWJpbmF0aW9uIGNvdWxkIGJlIHBhc3NlZCB0byBgeHNsdE51bWJlckZvcm1hdERlY2ltYWxgLCBsZWFkaW5nIHRvIGEgcmVhZCBvZiB1bmluaXRpYWxpemVkIHN0YWNrIGRhdGEuXG5cbk5va29naXJpIHByaW9yIHRvIHZlcnNpb24gMS4xMC41IHVzZWQgYSB2dWxuZXJhYmxlIHZlcnNpb24gb2YgbGlieHNsdC4gTm9rb2dpcmkgMS4xMC41IHVwZGF0ZWQgbGlieHNsdCB0byB2ZXJzaW9uIDEuMS4zNCB0byBhZGRyZXNzIHRoaXMgYW5kIG90aGVyIHZ1bG5lcmFiaWxpdGllcyBpbiBsaWJ4c2x0LiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1jZjQ2LTZ4eGgtcGM3NSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMTktMTMxMTgifV0sInN1bW1hcnkiOiJsaWJ4c2x0IFR5cGUgQ29uZnVzaW9uIHZ1bG5lcmFiaWxpdHkgdGhhdCBhZmZlY3RzIE5va29naXJpIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJub2tvZ2lyaSJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjEwLjUifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS4xMC41In19LHsiaWQiOiJSVkFfa3dET0J6bURnTTdTQ1BuYyIsIm51bWJlciI6NzUsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDMtMTBUMDI6MzA6MzlaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IkEgZGVwZW5kZW5jeSBvZiBOb2tvZ2lyaSwgbGlieHNsdCB0aHJvdWdoIDEuMS4zMyBhbGxvd3MgYnlwYXNzIG9mIGEgcHJvdGVjdGlvbiBtZWNoYW5pc20gYmVjYXVzZSBjYWxsZXJzIG9mIGB4c2x0Q2hlY2tSZWFkYCBhbmQgYHhzbHRDaGVja1dyaXRlYCBwZXJtaXQgYWNjZXNzIGV2ZW4gdXBvbiByZWNlaXZpbmcgYSBgLTFgIGVycm9yIGNvZGUuIGB4c2x0Q2hlY2tSZWFkYCBjYW4gcmV0dXJuIGAtMWAgZm9yIGEgY3JhZnRlZCBVUkwgdGhhdCBpcyBub3QgYWN0dWFsbHkgaW52YWxpZCBhbmQgaXMgc3Vic2VxdWVudGx5IGxvYWRlZC4iLCJjdnNzIjp7InNjb3JlIjo5Ljh9LCJzZXZlcml0eSI6IkNSSVRJQ0FMIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLXF4Y2cteGpqZy02Nm1qIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOS0xMTA2OCJ9XSwic3VtbWFyeSI6Ik5va29naXJpIHZ1bG5lcmFibGUgdG8gbGlieHNsdCBwcm90ZWN0aW9uIG1lY2hhbmlzbSBieXBhc3MifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiQ1JJVElDQUwiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjEwLjMifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS4xMC4zIn19LHsiaWQiOiJSVkFfa3dET0J6bURnTTdTRC1vYiIsIm51bWJlciI6NzYsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDMtMTBUMDQ6NTM6NTBaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGEgcG9zc2libGUgRG9TIHZ1bG5lcmFiaWxpdHkgaW4gdGhlIE11bHRpcGFydCBNSU1FIHBhcnNpbmcgY29kZSBpbiBSYWNrLiBUaGlzIHZ1bG5lcmFiaWxpdHkgaGFzIGJlZW4gYXNzaWduZWQgdGhlIENWRSBpZGVudGlmaWVyIENWRS0yMDIzLTI3NTMwLlxuXG5WZXJzaW9ucyBBZmZlY3RlZDogQWxsLiBOb3QgYWZmZWN0ZWQ6IE5vbmUgRml4ZWQgVmVyc2lvbnM6IDMuMC40LjIsIDIuMi42LjMsIDIuMS40LjMsIDIuMC45LjNcblxuIyBJbXBhY3RcblRoZSBNdWx0aXBhcnQgTUlNRSBwYXJzaW5nIGNvZGUgaW4gUmFjayBsaW1pdHMgdGhlIG51bWJlciBvZiBmaWxlIHBhcnRzLCBidXQgZG9lcyBub3QgbGltaXQgdGhlIHRvdGFsIG51bWJlciBvZiBwYXJ0cyB0aGF0IGNhbiBiZSB1cGxvYWRlZC4gQ2FyZWZ1bGx5IGNyYWZ0ZWQgcmVxdWVzdHMgY2FuIGFidXNlIHRoaXMgYW5kIGNhdXNlIG11bHRpcGFydCBwYXJzaW5nIHRvIHRha2UgbG9uZ2VyIHRoYW4gZXhwZWN0ZWQuXG5cbkFsbCB1c2VycyBydW5uaW5nIGFuIGFmZmVjdGVkIHJlbGVhc2Ugc2hvdWxkIGVpdGhlciB1cGdyYWRlIG9yIHVzZSBvbmUgb2YgdGhlIHdvcmthcm91bmRzIGltbWVkaWF0ZWx5LlxuXG4jIFdvcmthcm91bmRzXG5BIHByb3h5IGNhbiBiZSBjb25maWd1cmVkIHRvIGxpbWl0IHRoZSBQT1NUIGJvZHkgc2l6ZSB3aGljaCB3aWxsIG1pdGlnYXRlIHRoaXMgaXNzdWUuXG4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtM2g1Ny1obWozLWdqM3AifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIzLTI3NTMwIn1dLCJzdW1tYXJ5IjoiUmFjayBoYXMgcG9zc2libGUgRG9TIFZ1bG5lcmFiaWxpdHkgaW4gTXVsdGlwYXJ0IE1JTUUgcGFyc2luZyJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFjayJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjAuOS4zIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDIuMC45LjMifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN1NPYm5hIiwibnVtYmVyIjo3Nywic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wMy0xMFQxODowMzo0MFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlcmUgaXMgYSBmbGF3IGluIHRoZSB4bWwgZW50aXR5IGVuY29kaW5nIGZ1bmN0aW9uYWxpdHkgb2YgbGlieG1sMiBpbiB2ZXJzaW9ucyBiZWZvcmUgMi45LjExLiBBbiBhdHRhY2tlciB3aG8gaXMgYWJsZSB0byBzdXBwbHkgYSBjcmFmdGVkIGZpbGUgdG8gYmUgcHJvY2Vzc2VkIGJ5IGFuIGFwcGxpY2F0aW9uIGxpbmtlZCB3aXRoIHRoZSBhZmZlY3RlZCBmdW5jdGlvbmFsaXR5IG9mIGxpYnhtbDIgY291bGQgdHJpZ2dlciBhbiBvdXQtb2YtYm91bmRzIHJlYWQuIFRoZSBtb3N0IGxpa2VseSBpbXBhY3Qgb2YgdGhpcyBmbGF3IGlzIHRvIGFwcGxpY2F0aW9uIGF2YWlsYWJpbGl0eSwgd2l0aCBzb21lIHBvdGVudGlhbCBpbXBhY3QgdG8gY29uZmlkZW50aWFsaXR5IGFuZCBpbnRlZ3JpdHkgaWYgYW4gYXR0YWNrZXIgaXMgYWJsZSB0byB1c2UgbWVtb3J5IGluZm9ybWF0aW9uIHRvIGZ1cnRoZXIgZXhwbG9pdCB0aGUgYXBwbGljYXRpb24uXG5cbk5va29naXJpIHByaW9yIHRvIHZlcnNpb24gMS4xMS40IHVzZWQgYSB2dWxuZXJhYmxlIHZlcnNpb24gb2YgbGlieG1sMi4gTm9rb2dpcmkgMS4xMS40IHVwZGF0ZWQgbGlieG1sMiB0byB2ZXJzaW9uIDIuOS4xMSB0byBhZGRyZXNzIHRoaXMgYW5kIG90aGVyIHZ1bG5lcmFiaWxpdGllcyBpbiBsaWJ4bWwyLiIsImN2c3MiOnsic2NvcmUiOjguNn0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1qdzlmLWhoNDktY3ZwOSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjEtMzUxNyJ9XSwic3VtbWFyeSI6Ik5va29naXJpIGNvbnRhaW5zIGxpYnhtbCBPdXQtb2YtYm91bmRzIFdyaXRlIHZ1bG5lcmFiaWxpdHkifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMTEuNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjExLjQifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN1RKUV90IiwibnVtYmVyIjo3OCwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wMy0xNlQwMjozNjowMloiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlcmUgaXMgYSBkZW5pYWwgb2Ygc2VydmljZSB2dWxuZXJhYmlsaXR5IGluIHRoZSBoZWFkZXIgcGFyc2luZyBjb21wb25lbnQgb2YgUmFjay4gVGhpcyB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGFzc2lnbmVkIHRoZSBDVkUgaWRlbnRpZmllciBDVkUtMjAyMy0yNzUzOS5cblxuVmVyc2lvbnMgQWZmZWN0ZWQ6ID49IDIuMC4wIE5vdCBhZmZlY3RlZDogTm9uZS4gRml4ZWQgVmVyc2lvbnM6IDIuMi42LjQsIDMuMC42LjFcblxuIyBJbXBhY3RcbkNhcmVmdWxseSBjcmFmdGVkIGlucHV0IGNhbiBjYXVzZSBoZWFkZXIgcGFyc2luZyBpbiBSYWNrIHRvIHRha2UgYW4gdW5leHBlY3RlZCBhbW91bnQgb2YgdGltZSwgcG9zc2libHkgcmVzdWx0aW5nIGluIGEgZGVuaWFsIG9mIHNlcnZpY2UgYXR0YWNrIHZlY3Rvci4gQW55IGFwcGxpY2F0aW9ucyB0aGF0IHBhcnNlIGhlYWRlcnMgdXNpbmcgUmFjayAodmlydHVhbGx5IGFsbCBSYWlscyBhcHBsaWNhdGlvbnMpIGFyZSBpbXBhY3RlZC5cblxuIyBXb3JrYXJvdW5kc1xuU2V0dGluZyBSZWdleHAudGltZW91dCBpbiBSdWJ5IDMuMiBpcyBhIHBvc3NpYmxlIHdvcmthcm91bmQuXG4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6IkxPVyIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1jNnFnLWNqajgtNDdxcCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjMtMjc1MzkifV0sInN1bW1hcnkiOiJQb3NzaWJsZSBEZW5pYWwgb2YgU2VydmljZSBWdWxuZXJhYmlsaXR5IGluIFJhY2sncyBoZWFkZXIgcGFyc2luZyJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFjayJ9LCJzZXZlcml0eSI6IkxPVyIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjIuMi42LjQifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDIuMC4wLCA8IDIuMi42LjQifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNN1RkSl9QIiwibnVtYmVyIjo3OSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wMy0xNlQyMzowODoxMFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlcmUgaXMgYSB2dWxuZXJhYmlsaXR5IGluIEFjdGl2ZVN1cHBvcnQgaWYgdGhlIG5ldyBieXRlc3BsaWNlIG1ldGhvZCBpcyBjYWxsZWQgb24gYSBTYWZlQnVmZmVyIHdpdGggdW50cnVzdGVkIHVzZXIgaW5wdXQuXG5UaGlzIHZ1bG5lcmFiaWxpdHkgaGFzIGJlZW4gYXNzaWduZWQgdGhlIENWRSBpZGVudGlmaWVyIENWRS0yMDIzLTI4MTIwLlxuXG5WZXJzaW9ucyBBZmZlY3RlZDogQWxsLiBOb3QgYWZmZWN0ZWQ6IE5vbmUgRml4ZWQgVmVyc2lvbnM6IDcuMC40LjMsIDYuMS43LjNcblxuIyBJbXBhY3RcblxuQWN0aXZlU3VwcG9ydCB1c2VzIHRoZSBTYWZlQnVmZmVyIHN0cmluZyBzdWJjbGFzcyB0byB0YWcgc3RyaW5ncyBhcyBodG1sX3NhZmUgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gc2FuaXRpemVkLlxuV2hlbiB0aGVzZSBzdHJpbmdzIGFyZSBtdXRhdGVkLCB0aGUgdGFnIGlzIHNob3VsZCBiZSByZW1vdmVkIHRvIG1hcmsgdGhlbSBhcyBubyBsb25nZXIgYmVpbmcgaHRtbF9zYWZlLlxuXG5SdWJ5IDMuMiBpbnRyb2R1Y2VkIGEgbmV3IGJ5dGVzcGxpY2UgbWV0aG9kIHdoaWNoIEFjdGl2ZVN1cHBvcnQgZGlkIG5vdCB5ZXQgdW5kZXJzdGFuZCB0byBiZSBhIG11dGF0aW9uLlxuVXNlcnMgb24gb2xkZXIgdmVyc2lvbnMgb2YgUnVieSBhcmUgbGlrZWx5IHVuYWZmZWN0ZWQuXG5cbkFsbCB1c2VycyBydW5uaW5nIGFuIGFmZmVjdGVkIHJlbGVhc2UgYW5kIHVzaW5nIGJ5dGVzcGxpY2Ugc2hvdWxkIGVpdGhlciB1cGdyYWRlIG9yIHVzZSBvbmUgb2YgdGhlIHdvcmthcm91bmRzIGltbWVkaWF0ZWx5LlxuXG4jIFdvcmthcm91bmRzXG5cbkF2b2lkIGNhbGxpbmcgYnl0ZXNwbGljZSBvbiBhIFNhZmVCdWZmZXIgKGh0bWxfc2FmZSkgc3RyaW5nIHdpdGggdW50cnVzdGVkIHVzZXIgaW5wdXQuXG4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLXBqNzMtdjVtdy1wbTlqIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMy0yODEyMCJ9XSwic3VtbWFyeSI6IlBvc3NpYmxlIFhTUyBTZWN1cml0eSBWdWxuZXJhYmlsaXR5IGluIFNhZmVCdWZmZXIjYnl0ZXNwbGljZSJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoiYWN0aXZlc3VwcG9ydCJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNi4xLjcuMyJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCA2LjEuNy4zIn19LHsiaWQiOiJSVkFfa3dET0J6bURnTTdaei1zaSIsIm51bWJlciI6ODAsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDQtMTJUMDk6MTE6MjFaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIyBTdW1tYXJ5XG5cbk5va29naXJpIHYxLjE0LjMgdXBncmFkZXMgdGhlIHBhY2thZ2VkIHZlcnNpb24gb2YgaXRzIGRlcGVuZGVuY3kgbGlieG1sMiB0byBbdjIuMTAuNF0oaHR0cHM6Ly9naXRsYWIuZ25vbWUub3JnL0dOT01FL2xpYnhtbDIvLS9yZWxlYXNlcy92Mi4xMC40KSBmcm9tIHYyLjEwLjMuXG5cbmxpYnhtbDIgdjIuMTAuNCBhZGRyZXNzZXMgdGhlIGZvbGxvd2luZyBrbm93biB2dWxuZXJhYmlsaXRpZXM6XG5cbi0gW0NWRS0yMDIzLTI5NDY5XShodHRwczovL2N2ZS5taXRyZS5vcmcvY2dpLWJpbi9jdmVuYW1lLmNnaT9uYW1lPUNWRS0yMDIzLTI5NDY5KTogSGFzaGluZyBvZiBlbXB0eSBkaWN0IHN0cmluZ3MgaXNuJ3QgZGV0ZXJtaW5pc3RpY1xuLSBbQ1ZFLTIwMjMtMjg0ODRdKGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZW5hbWUuY2dpP25hbWU9Q1ZFLTIwMjMtMjg0ODQpOiBGaXggbnVsbCBkZXJlZiBpbiB4bWxTY2hlbWFGaXh1cENvbXBsZXhUeXBlXG4tIFNjaGVtYXM6IEZpeCBudWxsLXBvaW50ZXItZGVyZWYgaW4geG1sU2NoZW1hQ2hlY2tDT1NTVERlcml2ZWRPS1xuXG5QbGVhc2Ugbm90ZSB0aGF0IHRoaXMgYWR2aXNvcnkgb25seSBhcHBsaWVzIHRvIHRoZSBDUnVieSBpbXBsZW1lbnRhdGlvbiBvZiBOb2tvZ2lyaSBgPCAxLjE0LjNgLCBhbmQgb25seSBpZiB0aGUgX3BhY2thZ2VkXyBsaWJyYXJpZXMgYXJlIGJlaW5nIHVzZWQuIElmIHlvdSd2ZSBvdmVycmlkZGVuIGRlZmF1bHRzIGF0IGluc3RhbGxhdGlvbiB0aW1lIHRvIHVzZSBfc3lzdGVtXyBsaWJyYXJpZXMgaW5zdGVhZCBvZiBwYWNrYWdlZCBsaWJyYXJpZXMsIHlvdSBzaG91bGQgaW5zdGVhZCBwYXkgYXR0ZW50aW9uIHRvIHlvdXIgZGlzdHJvJ3MgYGxpYnhtbDJgIHJlbGVhc2UgYW5ub3VuY2VtZW50cy5cblxuXG4jIyMgTWl0aWdhdGlvblxuXG5VcGdyYWRlIHRvIE5va29naXJpIGA+PSAxLjE0LjNgLlxuXG5Vc2VycyB3aG8gYXJlIHVuYWJsZSB0byB1cGdyYWRlIE5va29naXJpIG1heSBhbHNvIGNob29zZSBhIG1vcmUgY29tcGxpY2F0ZWQgbWl0aWdhdGlvbjogY29tcGlsZSBhbmQgbGluayBOb2tvZ2lyaSBhZ2FpbnN0IGV4dGVybmFsIGxpYnJhcmllcyBsaWJ4bWwyIGA+PSAyLjEwLjRgIHdoaWNoIHdpbGwgYWxzbyBhZGRyZXNzIHRoZXNlIHNhbWUgaXNzdWVzLlxuXG5cbiMjIyBJbXBhY3RcblxuTm8gcHVibGljIGluZm9ybWF0aW9uIGhhcyB5ZXQgYmVlbiBwdWJsaXNoZWQgYWJvdXQgdGhlIHNlY3VyaXR5LXJlbGF0ZWQgaXNzdWVzIG90aGVyIHRoYW4gdGhlIHVwc3RyZWFtIGNvbW1pdHMuIEV4YW1pbmF0aW9uIG9mIHRob3NlIGNoYW5nZXNldHMgaW5kaWNhdGUgdGhhdCB0aGUgbW9yZSBzZXJpb3VzIGlzc3VlcyByZWxhdGUgdG8gbGlieG1sMiBkZXJlZmVyZW5jaW5nIE5VTEwgcG9pbnRlcnMgYW5kIHBvdGVudGlhbGx5IHNlZ2ZhdWx0aW5nIHdoaWxlIHBhcnNpbmcgdW50cnVzdGVkIGlucHV0cy5cblxuVGhlIGNvbW1pdHMgY2FuIGJlIGV4YW1pbmVkIGF0OlxuXG4tIFtbQ1ZFLTIwMjMtMjk0NjldIEhhc2hpbmcgb2YgZW1wdHkgZGljdCBzdHJpbmdzIGlzbid0IGRldGVybWluaXN0aWMgKDA5YTJkZDQ1KSDCtyBDb21taXRzIMK3IEdOT01FIC8gbGlieG1sMiDCtyBHaXRMYWJdKGh0dHBzOi8vZ2l0bGFiLmdub21lLm9yZy9HTk9NRS9saWJ4bWwyLy0vY29tbWl0LzA5YTJkZDQ1MzAwN2Y5YzcyMDUyNzQ2MjNhY2RkNzM3NDdjMjJkNjQpXG4tIFtbQ1ZFLTIwMjMtMjg0ODRdIEZpeCBudWxsIGRlcmVmIGluIHhtbFNjaGVtYUZpeHVwQ29tcGxleFR5cGUgKDY0N2UwNzJlKSDCtyBDb21taXRzIMK3IEdOT01FIC8gbGlieG1sMiDCtyBHaXRMYWJdKGh0dHBzOi8vZ2l0bGFiLmdub21lLm9yZy9HTk9NRS9saWJ4bWwyLy0vY29tbWl0LzY0N2UwNzJlYTBhMmYxMjY4N2ZhMDVjMTcyZjRjNDcxM2ZkYjBjNGYpXG4tIFtzY2hlbWFzOiBGaXggbnVsbC1wb2ludGVyLWRlcmVmIGluIHhtbFNjaGVtYUNoZWNrQ09TU1REZXJpdmVkT0sgKDRjNjkyMmY3KSDCtyBDb21taXRzIMK3IEdOT01FIC8gbGlieG1sMiDCtyBHaXRMYWJdKGh0dHBzOi8vZ2l0bGFiLmdub21lLm9yZy9HTk9NRS9saWJ4bWwyLy0vY29tbWl0LzRjNjkyMmY3NjNhZDk1OGM0OGZmNjZmODI4MjNhZTIxZjJlOTJlZTYpXG4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLXB4dmctMnFqNS0zN2pxIn1dLCJzdW1tYXJ5IjoiTm9rb2dpcmkgdXBkYXRlcyBwYWNrYWdlZCBsaWJ4bWwyIHRvIHYyLjEwLjQgdG8gcmVzb2x2ZSBtdWx0aXBsZSBDVkVzIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJub2tvZ2lyaSJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS4xNC4zIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDEuMTQuMyJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ004QUFBQUJDT2Fwa0EiLCJudW1iZXIiOjgxLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIzLTA2LTA5VDIyOjU4OjMxWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJOT1RFOiByYWlscy11anMgaXMgcGFydCBvZiBSYWlscy9hY3Rpb252aWV3IHNpbmNlIDUuMS4wLlxuXG5UaGVyZSBpcyBhIHBvdGVudGlhbCBET00gYmFzZWQgY3Jvc3Mtc2l0ZSBzY3JpcHRpbmcgaXNzdWUgaW4gcmFpbHMtdWpzXG53aGljaCBsZXZlcmFnZXMgdGhlIENsaXBib2FyZCBBUEkgdG8gdGFyZ2V0IEhUTUwgZWxlbWVudHMgdGhhdCBhcmVcbmFzc2lnbmVkIHRoZSBjb250ZW50ZWRpdGFibGUgYXR0cmlidXRlLiBUaGlzIGhhcyB0aGUgcG90ZW50aWFsIHRvXG5vY2N1ciB3aGVuIHBhc3RpbmcgbWFsaWNpb3VzIEhUTUwgY29udGVudCBmcm9tIHRoZSBjbGlwYm9hcmQgdGhhdFxuaW5jbHVkZXMgYSBkYXRhLW1ldGhvZCwgZGF0YS1yZW1vdGUgb3IgZGF0YS1kaXNhYmxlLXdpdGggYXR0cmlidXRlLlxuXG5UaGlzIHZ1bG5lcmFiaWxpdHkgaGFzIGJlZW4gYXNzaWduZWQgdGhlIENWRSBpZGVudGlmaWVyIENWRS0yMDIzLTIzOTEzLlxuXG5Ob3QgYWZmZWN0ZWQ6IDwgNS4xLjBcblZlcnNpb25zIEFmZmVjdGVkOiA+PSA1LjEuMFxuRml4ZWQgVmVyc2lvbnM6IDYuMS43LjMsIDcuMC40LjNcblxuSW1wYWN0XG4gIElmIHRoZSBzcGVjaWZpZWQgbWFsaWNpb3VzIEhUTUwgY2xpcGJvYXJkIGNvbnRlbnQgaXMgcHJvdmlkZWQgdG8gYVxuICBjb250ZW50ZWRpdGFibGUgZWxlbWVudCwgdGhpcyBjb3VsZCByZXN1bHQgaW4gdGhlIGFyYml0cmFyeSBleGVjdXRpb25cbiAgb2YgamF2YXNjcmlwdCBvbiB0aGUgb3JpZ2luIGluIHF1ZXN0aW9uLlxuXG5SZWxlYXNlc1xuICBUaGUgRklYRUQgcmVsZWFzZXMgYXJlIGF2YWlsYWJsZSBhdCB0aGUgbm9ybWFsIGxvY2F0aW9ucy5cblxuV29ya2Fyb3VuZHNcbiAgV2UgcmVjb21tZW5kIHRoYXQgYWxsIHVzZXJzIHVwZ3JhZGUgdG8gb25lIG9mIHRoZSBGSVhFRCB2ZXJzaW9ucy5cbiAgSW4gdGhlIG1lYW50aW1lLCB1c2VycyBjYW4gYXR0ZW1wdCB0byBtaXRpZ2F0ZSB0aGlzIHZ1bG5lcmFiaWxpdHlcbiAgYnkgcmVtb3ZpbmcgdGhlIGNvbnRlbnRlZGl0YWJsZSBhdHRyaWJ1dGUgZnJvbSBlbGVtZW50cyBpbiBwYWdlc1xuICB0aGF0IHJhaWxzLXVqcyB3aWxsIGludGVyYWN0IHdpdGguXG5cblBhdGNoZXNcbiAgVG8gYWlkIHVzZXJzIHdobyBhcmVu4oCZdCBhYmxlIHRvIHVwZ3JhZGUgaW1tZWRpYXRlbHkgd2UgaGF2ZSBwcm92aWRlZFxuICBwYXRjaGVzIGZvciB0aGUgdHdvIHN1cHBvcnRlZCByZWxlYXNlIHNlcmllcy4gVGhleSBhcmUgaW4gZ2l0LWFtXG4gIGZvcm1hdCBhbmQgY29uc2lzdCBvZiBhIHNpbmdsZSBjaGFuZ2VzZXQuXG5cbiogcmFpbHMtdWpzLWRhdGEtbWV0aG9kLWNvbnRlbnRlZGl0YWJsZS02LTEucGF0Y2ggLSBQYXRjaCBmb3IgNi4xIHNlcmllc1xuKiByYWlscy11anMtZGF0YS1tZXRob2QtY29udGVudGVkaXRhYmxlLTctMC5wYXRjaCAtIFBhdGNoIGZvciA3LjAgc2VyaWVzXG5cblBsZWFzZSBub3RlIHRoYXQgb25seSB0aGUgNy4wLlogYW5kIDYuMS5aIHNlcmllcyBhcmVcbnN1cHBvcnRlZCBhdCBwcmVzZW50LCBhbmQgNi4wLlogZm9yIHNldmVyZSB2dWxuZXJhYmlsaXRpZXMuXG5cblVzZXJzIG9mIGVhcmxpZXIgdW5zdXBwb3J0ZWQgcmVsZWFzZXMgYXJlIGFkdmlzZWQgdG8gdXBncmFkZSBhc1xuc29vbiBhcyBwb3NzaWJsZSBhcyB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoZSBjb250aW51ZWQgYXZhaWxhYmlsaXR5XG5vZiBzZWN1cml0eSBmaXhlcyBmb3IgdW5zdXBwb3J0ZWQgcmVsZWFzZXMuXG5cbkNyZWRpdHNcbiAgV2Ugd291bGQgbGlrZSB0byB0aGFuayByeW90YWsgMTUgZm9yIHJlcG9ydGluZyB0aGlzIVxuXG4qIHJhaWxzLXVqcy1kYXRhLW1ldGhvZC1jb250ZW50ZWRpdGFibGUtNi0xLnBhdGNoICg4LjUgS0IpXG4qIHJhaWxzLXVqcy1kYXRhLW1ldGhvZC1jb250ZW50ZWRpdGFibGUtNy0wLnBhdGNoICg4LjUgS0IpXG4qIHJhaWxzLXVqcy1kYXRhLW1ldGhvZC1jb250ZW50ZWRpdGFibGUtbWFpbi5wYXRjaCAoOC45IEtCKVxuIiwiY3ZzcyI6eyJzY29yZSI6MC4wfSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS14cDVoLWY4amYtcmM4cSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjMtMjM5MTMifV0sInN1bW1hcnkiOiJyYWlscy11anMgdnVsbmVyYWJsZSB0byBET00gQmFzZWQgQ3Jvc3Mtc2l0ZSBTY3JpcHRpbmcgY29udGVudGVkaXRhYmxlIEhUTUwgRWxlbWVudHMifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGlvbnZpZXcifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjYuMS43LjMifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ij49IDUuMS4wLCA8IDYuMS43LjMifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCQ1FiQ093IiwibnVtYmVyIjo4Miwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNi0xMFQwMDo1NjoxOVoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiTG9vZmFoIGFsbG93cyBub24td2hpdGVsaXN0ZWQgYXR0cmlidXRlcyB0byBiZSBwcmVzZW50IGluIHNhbml0aXplZCBvdXRwdXQgd2hlbiBpbnB1dCB3aXRoIHNwZWNpYWxseS1jcmFmdGVkIEhUTUwgZnJhZ21lbnRzLlxuXG5Vc2VycyBhcmUgYWZmZWN0ZWQgaWYgcnVubmluZyBMb29mYWggPCAyLjIuMSwgYnV0IG9ubHk6XG5cbiogd2hlbiBydW5uaW5nIG9uIE1SSSBvciBSQlgsXG4qIGluIGNvbWJpbmF0aW9uIHdpdGggbGlieG1sMiA+PSAyLjkuMi5cblxuSlJ1YnkgdXNlcnMgYXJlIG5vdCBhZmZlY3RlZC4iLCJjdnNzIjp7InNjb3JlIjo2LjF9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLXg3cnYtY3I2di00dm00In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOC04MDQ4In1dLCJzdW1tYXJ5IjoiQ3Jvc3Mtc2l0ZSBTY3JpcHRpbmcgaW4gbG9vZmFoIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJub2tvZ2lyaSJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS44LjMifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS44LjMifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCQ1EwTDR3IiwibnVtYmVyIjo4Mywic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNi0xMFQwMTo1MTo0MVoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiSW4gbnVtYmVycy5jIGluIGxpYnhzbHQgMS4xLjMzLCBhbiB4c2w6bnVtYmVyIHdpdGggY2VydGFpbiBmb3JtYXQgc3RyaW5ncyBjb3VsZCBsZWFkIHRvIGEgdW5pbml0aWFsaXplZCByZWFkIGluIHhzbHROdW1iZXJGb3JtYXRJbnNlcnROdW1iZXJzLiBUaGlzIGNvdWxkIGFsbG93IGFuIGF0dGFja2VyIHRvIGRpc2Nlcm4gd2hldGhlciBhIGJ5dGUgb24gdGhlIHN0YWNrIGNvbnRhaW5zIHRoZSBjaGFyYWN0ZXJzIEEsIGEsIEksIGksIG9yIDAsIG9yIGFueSBvdGhlciBjaGFyYWN0ZXIuIiwiY3ZzcyI6eyJzY29yZSI6MC4wfSwic2V2ZXJpdHkiOiJISUdIIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTRobTktODQ0ai1qbXhwIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOS0xMzExNyJ9XSwic3VtbWFyeSI6IlVuaW5pdGlhbGl6ZWQgcmVhZCBpbiBOb2tvZ2lyaSBnZW0ifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMTAuNSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjEwLjUifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCRFJiak5BIiwibnVtYmVyIjo4NCwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNi0yOFQwODowMzozN1oiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVXNlIGFmdGVyIGZyZWUgaW4gQmxpbmsgWFNMVCBpbiBHb29nbGUgQ2hyb21lIHByaW9yIHRvIDkxLjAuNDQ3Mi4xNjQgYWxsb3dlZCBhIHJlbW90ZSBhdHRhY2tlciB0byBwb3RlbnRpYWxseSBleHBsb2l0IGhlYXAgY29ycnVwdGlvbiB2aWEgYSBjcmFmdGVkIEhUTUwgcGFnZS4iLCJjdnNzIjp7InNjb3JlIjo4Ljh9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtNTlncC1xcW03LWN3NGoifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIxLTMwNTYwIn1dLCJzdW1tYXJ5IjoiTm9rb2dpcmkgaGFzIHZ1bG5lcmFibGUgZGVwZW5kZW5jaWVzIG9uIGxpYnhtbDIgYW5kIGxpYnhzbHQifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMTMuMiJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjEzLjIifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCRFJtMzlnIiwibnVtYmVyIjo4NSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNi0yOFQwODoyMjozMFoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiemxpYiAxLjIuMTEgYWxsb3dzIG1lbW9yeSBjb3JydXB0aW9uIHdoZW4gZGVmbGF0aW5nIChpLmUuLCB3aGVuIGNvbXByZXNzaW5nKSBpZiB0aGUgaW5wdXQgaGFzIG1hbnkgZGlzdGFudCBtYXRjaGVzLiIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1qYzM2LTQyY2YtdnF3aiJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMTgtMjUwMzIifV0sInN1bW1hcnkiOiJOb2tvZ2lyaSBhZmZlY3RlZCBieSB6bGliJ3MgT3V0LW9mLWJvdW5kcyBXcml0ZSB2dWxuZXJhYmlsaXR5In0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJub2tvZ2lyaSJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjEzLjQifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS4xMy40In19LHsiaWQiOiJSVkFfa3dET0J6bURnTThBQUFBQkRiemlxQSIsIm51bWJlciI6ODYsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDYtMjlUMTk6MzM6NTlaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBgcmVkaXJlY3RfdG9gIG1ldGhvZCBpbiBSYWlscyBhbGxvd3MgcHJvdmlkZWQgdmFsdWVzIHRvIGNvbnRhaW4gY2hhcmFjdGVycyB3aGljaCBhcmUgbm90IGxlZ2FsIGluIGFuIEhUVFAgaGVhZGVyIHZhbHVlLiBUaGlzIHJlc3VsdHMgaW4gdGhlIHBvdGVudGlhbCBmb3IgZG93bnN0cmVhbSBzZXJ2aWNlcyB3aGljaCBlbmZvcmNlIFJGQyBjb21wbGlhbmNlIG9uIEhUVFAgcmVzcG9uc2UgaGVhZGVycyB0byByZW1vdmUgdGhlIGFzc2lnbmVkIExvY2F0aW9uIGhlYWRlci4gVGhpcyB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGFzc2lnbmVkIHRoZSBDVkUgaWRlbnRpZmllciBDVkUtMjAyMy0yODM2Mi5cblxuVmVyc2lvbnMgQWZmZWN0ZWQ6IEFsbC4gTm90IGFmZmVjdGVkOiBOb25lIEZpeGVkIFZlcnNpb25zOiA3LjAuNS4xLCA2LjEuNy40XG5cbiMgSW1wYWN0XG5cblRoaXMgaW50cm9kdWNlcyB0aGUgcG90ZW50aWFsIGZvciBhIENyb3NzLXNpdGUtc2NyaXB0aW5nIChYU1MpIHBheWxvYWQgdG8gYmUgZGVsaXZlcmVkIG9uIHRoZSBub3cgc3RhdGljIHJlZGlyZWN0aW9uIHBhZ2UuIE5vdGUgdGhhdCB0aGlzIGJvdGggcmVxdWlyZXMgdXNlciBpbnRlcmFjdGlvbiBhbmQgZm9yIGEgUmFpbHMgYXBwIHRvIGJlIGNvbmZpZ3VyZWQgdG8gYWxsb3cgcmVkaXJlY3RzIHRvIGV4dGVybmFsIGhvc3RzIChkZWZhdWx0cyB0byBmYWxzZSBpbiBSYWlscyA+PSA3LjAueCkuXG5cbiMgUmVsZWFzZXNcblxuVGhlIEZJWEVEIHJlbGVhc2VzIGFyZSBhdmFpbGFibGUgYXQgdGhlIG5vcm1hbCBsb2NhdGlvbnMuXG5cbiMgV29ya2Fyb3VuZHNcblxuQXZvaWQgcHJvdmlkaW5nIHVzZXIgc3VwcGxpZWQgVVJMcyB3aXRoIGFyYml0cmFyeSBzY2hlbWVzIHRvIHRoZSBgcmVkaXJlY3RfdG9gIG1ldGhvZC5cbiIsImN2c3MiOnsic2NvcmUiOjAuMH0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtNGc4di12ZzQzLXdwZ2YifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIzLTI4MzYyIn1dLCJzdW1tYXJ5IjoiQWN0aW9ucGFjayBoYXMgcG9zc2libGUgY3Jvc3Mtc2l0ZSBzY3JpcHRpbmcgdnVsbmVyYWJpbGl0eSB2aWEgVXNlciBTdXBwbGllZCBWYWx1ZXMgdG8gcmVkaXJlY3RfdG8ifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGlvbnBhY2sifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjYuMS43LjQifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgNi4xLjcuNCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ004QUFBQUJEd2pPVUEiLCJudW1iZXIiOjg3LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIzLTA3LTA2VDAzOjU0OjEyWiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJBIHZ1bG5lcmFiaWxpdHkgZm91bmQgaW4gbGlieG1sMiBpbiB2ZXJzaW9ucyBiZWZvcmUgMi45LjExIHNob3dzIHRoYXQgaXQgZGlkIG5vdCBwcm9wYWdhdGUgZXJyb3JzIHdoaWxlIHBhcnNpbmcgWE1MIG1peGVkIGNvbnRlbnQsIGNhdXNpbmcgYSBOVUxMIGRlcmVmZXJlbmNlLiBJZiBhbiB1bnRydXN0ZWQgWE1MIGRvY3VtZW50IHdhcyBwYXJzZWQgaW4gcmVjb3ZlcnkgbW9kZSBhbmQgcG9zdC12YWxpZGF0ZWQsIHRoZSBmbGF3IGNvdWxkIGJlIHVzZWQgdG8gY3Jhc2ggdGhlIGFwcGxpY2F0aW9uLiBUaGUgaGlnaGVzdCB0aHJlYXQgZnJvbSB0aGlzIHZ1bG5lcmFiaWxpdHkgaXMgdG8gc3lzdGVtIGF2YWlsYWJpbGl0eS4iLCJjdnNzIjp7InNjb3JlIjo1Ljl9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTI4NnYtcGNmNS0yNXJjIn0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMS0zNTM3In1dLCJzdW1tYXJ5IjoiTm9rb2dpcmkgSW1wbGVtZW50cyBsaWJ4bWwyIHZlcnNpb24gdnVsbmVyYWJsZSB0byBudWxsIHBvaW50ZXIgZGVyZWZlcmVuY2luZyJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoibm9rb2dpcmkifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMTEuNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjExLjQifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCRHdqNFBBIiwibnVtYmVyIjo4OCwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNy0wNlQwMzo1NjoyNVoiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlcmUncyBhIGZsYXcgaW4gbGlieG1sMiBpbiB2ZXJzaW9ucyBiZWZvcmUgMi45LjExLiBBbiBhdHRhY2tlciB3aG8gaXMgYWJsZSB0byBzdWJtaXQgYSBjcmFmdGVkIGZpbGUgdG8gYmUgcHJvY2Vzc2VkIGJ5IGFuIGFwcGxpY2F0aW9uIGxpbmtlZCB3aXRoIGxpYnhtbDIgY291bGQgdHJpZ2dlciBhIHVzZS1hZnRlci1mcmVlLiBUaGUgZ3JlYXRlc3QgaW1wYWN0IGZyb20gdGhpcyBmbGF3IGlzIHRvIGNvbmZpZGVudGlhbGl0eSwgaW50ZWdyaXR5LCBhbmQgYXZhaWxhYmlsaXR5LiIsImN2c3MiOnsic2NvcmUiOjguOH0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS12NGY4LTI4NDctcndtNyJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjEtMzUxOCJ9XSwic3VtbWFyeSI6Ik5va29naXJpIEltcGxlbWVudHMgbGlieG1sMiB2ZXJzaW9uIHZ1bG5lcmFibGUgdG8gdXNlLWFmdGVyLWZyZWUifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6Im5va29naXJpIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuMTEuNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjExLjQifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCRDl3V2VRIiwibnVtYmVyIjo4OSwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNy0wOFQwMDo0MTowM1oiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiSW4geHNsdENvcHlUZXh0IGluIHRyYW5zZm9ybS5jIGluIGxpYnhzbHQgMS4xLjMzLCBhIHBvaW50ZXIgdmFyaWFibGUgaXNuJ3QgcmVzZXQgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLiBJZiB0aGUgcmVsZXZhbnQgbWVtb3J5IGFyZWEgaGFwcGVuZWQgdG8gYmUgZnJlZWQgYW5kIHJldXNlZCBpbiBhIGNlcnRhaW4gd2F5LCBhIGJvdW5kcyBjaGVjayBjb3VsZCBmYWlsIGFuZCBtZW1vcnkgb3V0c2lkZSBhIGJ1ZmZlciBjb3VsZCBiZSB3cml0dGVuIHRvLCBvciB1bmluaXRpYWxpemVkIGRhdGEgY291bGQgYmUgZGlzY2xvc2VkLlxuXG5Ob2tvZ2lyaSBwcmlvciB0byB2ZXJzaW9uIDEuMTAuNSBjb250YWlucyBhIHZ1bG5lcmFibGUgdmVyc2lvbiBvZiBsaWJ4c2x0LiBOb2tvZ2lyaSB2ZXJzaW9uIDEuMTAuNSB1cGdyYWRlcyB0aGUgZGVwZW5kZW5jeSB0byBsaWJ4c2x0IDEuMS4zNCwgd2hpY2ggY29udGFpbnMgYSBwYXRjaCBmb3IgdGhpcyBpc3N1ZS4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtMjQyeC03Y202LTR3OGoifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE5LTE4MTk3In1dLCJzdW1tYXJ5IjoiTm9rb2dpcmkgYWZmZWN0ZWQgYnkgbGlieHNsdCBVc2Ugb2YgVW5pbml0aWFsaXplZCBSZXNvdXJjZS9Vc2UgQWZ0ZXIgRnJlZSB2dWxuZXJhYmlsaXR5In0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJub2tvZ2lyaSJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjEwLjUifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS4xMC41In19LHsiaWQiOiJSVkFfa3dET0J6bURnTThBQUFBQkQ5d1g3dyIsIm51bWJlciI6OTAsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDctMDhUMDA6NDE6MDRaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlR5cGUgY29uZnVzaW9uIGluIGB4c2x0TnVtYmVyRm9ybWF0R2V0TXVsdGlwbGVMZXZlbGAgcHJpb3IgdG8gbGlieHNsdCAxLjEuMzMgY291bGQgYWxsb3cgYXR0YWNrZXJzIHRvIHBvdGVudGlhbGx5IGV4cGxvaXQgaGVhcCBjb3JydXB0aW9uIHZpYSBjcmFmdGVkIFhNTCBkYXRhLlxuXG5Ob2tvZ2lyaSBwcmlvciB0byB2ZXJzaW9uIDEuMTAuNSBjb250YWlucyBhIHZ1bG5lcmFibGUgdmVyc2lvbiBvZiBsaWJ4c2x0LiBOb2tvZ2lyaSB2ZXJzaW9uIDEuMTAuNSB1cGdyYWRlcyB0aGUgZGVwZW5kZW5jeSB0byBsaWJ4c2x0IDEuMS4zNCwgd2hpY2ggY29udGFpbnMgYSBwYXRjaCBmb3IgdGhpcyBpc3N1ZS4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0Etdm1meC1nY2ZxLXd2bTIifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE5LTU4MTUifV0sInN1bW1hcnkiOiJOb2tvZ2lyaSBpbXBsZW1lbnRhdGlvbiBvZiBsaWJ4c2x0IHZ1bG5lcmFibGUgdG8gaGVhcCBjb3JydXB0aW9uIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJub2tvZ2lyaSJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjEwLjUifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6IjwgMS4xMC41In19LHsiaWQiOiJSVkFfa3dET0J6bURnTThBQUFBQkdDMkVZZyIsIm51bWJlciI6OTEsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDctMTZUMTU6MTY6MzVaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpYWxseSBjcmFmdGVkIHJlcXVlc3RzIGNhbiBiZSB1c2VkIHRvIGFjY2VzcyBmaWxlcyB0aGF0IGV4aXN0IG9uIHRoZSBmaWxlc3lzdGVtIHRoYXQgaXMgb3V0c2lkZSBhbiBhcHBsaWNhdGlvbidzIHJvb3QgZGlyZWN0b3J5LCB3aGVuIHRoZSBTcHJvY2tldHMgc2VydmVyIGlzIHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgXG5BbGwgdXNlcnMgcnVubmluZyBhbiBhZmZlY3RlZCByZWxlYXNlIHNob3VsZCBlaXRoZXIgdXBncmFkZSBvciB1c2Ugb25lIG9mIHRoZSB3b3JrIGFyb3VuZHMgaW1tZWRpYXRlbHkuXG4gIFxuIyMjIFdvcmthcm91bmQ6XG4gIFxuSW4gUmFpbHMgYXBwbGljYXRpb25zLCB3b3JrIGFyb3VuZCB0aGlzIGlzc3VlLCBzZXQgYGNvbmZpZy5hc3NldHMuY29tcGlsZSA9IGZhbHNlYCBhbmQgYGNvbmZpZy5wdWJsaWNfZmlsZV9zZXJ2ZXIuZW5hYmxlZCA9IHRydWVgIGluIGFuIGluaXRpYWxpemVyIGFuZCBwcmVjb21waWxlIHRoZSBhc3NldHMuXG5cblRoaXMgd29yayBhcm91bmQgd2lsbCBub3QgYmUgcG9zc2libGUgaW4gYWxsIGhvc3RpbmcgZW52aXJvbm1lbnRzIGFuZCB1cGdyYWRpbmcgaXMgYWR2aXNlZC4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtcHIzaC1qamhqLTU3M3gifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE4LTM3NjAifV0sInN1bW1hcnkiOiJTcHJvY2tldHMgcGF0aCB0cmF2ZXJzYWwgbGVhZHMgdG8gaW5mb3JtYXRpb24gbGVhayJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoic3Byb2NrZXRzIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjMuNy4yIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI+PSAzLjAuMCwgPCAzLjcuMiJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ004QUFBQUJHQzJFakEiLCJudW1iZXIiOjkyLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIzLTA3LTE2VDE1OjE2OjM2WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJydWJ5LWZmaSB2ZXJzaW9uIDEuOS4yMyBhbmQgZWFybGllciBoYXMgYSBETEwgbG9hZGluZyBpc3N1ZSB3aGljaCBjYW4gYmUgaGlqYWNrZWQgb24gV2luZG93cyBPUywgd2hlbiBhIFN5bWJvbCBpcyB1c2VkIGFzIERMTCBuYW1lIGluc3RlYWQgb2YgYSBTdHJpbmcgVGhpcyB2dWxuZXJhYmlsaXR5IGFwcGVhcnMgdG8gaGF2ZSBiZWVuIGZpeGVkIGluIHYxLjkuMjQgYW5kIGxhdGVyLiIsImN2c3MiOnsic2NvcmUiOjcuOH0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS0yZ3cyLThxOXctY3c4cCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMTgtMTAwMDIwMSJ9XSwic3VtbWFyeSI6IlJ1YnktZmZpIGhhcyBhIERMTCBsb2FkaW5nIGlzc3VlICJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoiZmZpIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjEuOS4yNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjkuMjQifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCR0MyRXFnIiwibnVtYmVyIjo5Mywic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNy0xNlQxNToxNjozNloiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoicnVieXppcCBnZW0gcnVieXppcCB2ZXJzaW9uIDEuMi4xIGFuZCBlYXJsaWVyIGNvbnRhaW5zIGEgRGlyZWN0b3J5IFRyYXZlcnNhbCB2dWxuZXJhYmlsaXR5IGluIFppcDo6RmlsZSBjb21wb25lbnQgdGhhdCBjYW4gcmVzdWx0IGluIHdyaXRlIGFyYml0cmFyeSBmaWxlcyB0byB0aGUgZmlsZXN5c3RlbS4gVGhpcyBhdHRhY2sgYXBwZWFyIHRvIGJlIGV4cGxvaXRhYmxlIHZpYSBJZiBhIHNpdGUgYWxsb3dzIHVwbG9hZGluZyBvZiAuemlwIGZpbGVzICwgYW4gYXR0YWNrZXIgY2FuIHVwbG9hZCBhIG1hbGljaW91cyBmaWxlIHRoYXQgY29udGFpbnMgc3ltbGlua3Mgb3IgZmlsZXMgd2l0aCBhYnNvbHV0ZSBwYXRobmFtZXMgXCIuLi9cIiB0byB3cml0ZSBhcmJpdHJhcnkgZmlsZXMgdG8gdGhlIGZpbGVzeXN0ZW0uLlxuXG5UaGlzIGlzIHNpbWlsYXIgdG8gQ1ZFLTIwMTctNTk0NiB3aGljaCB3YXMgcGF0Y2hlZCBpbiAxLjIuMSBidXQgdGhlIGZpeCBpbiB0aGF0IGNhc2Ugd2FzIGluY29tcGxldGUuIiwiY3ZzcyI6eyJzY29yZSI6OS44fSwic2V2ZXJpdHkiOiJDUklUSUNBTCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS12cWNxLW1ybXctbWNtZyJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMTgtMTAwMDU0NCJ9XSwic3VtbWFyeSI6IlJ1Ynl6aXAgZ2VtIGNvbnRhaW5zIGEgRGlyZWN0b3J5IFRyYXZlcnNhbCB2dWxuZXJhYmlsaXR5IGluIHppcCBmaWxlIGNvbXBvbmVudCJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicnVieXppcCJ9LCJzZXZlcml0eSI6IkNSSVRJQ0FMIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiMS4yLjIifSwidnVsbmVyYWJsZVZlcnNpb25SYW5nZSI6Ijw9IDEuMi4xIn19LHsiaWQiOiJSVkFfa3dET0J6bURnTThBQUFBQkdDMkZlUSIsIm51bWJlciI6OTQsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDctMTZUMTU6MTY6MzZaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IkluIFJ1Ynl6aXAgYmVmb3JlIDEuMy4wLCBhIGNyYWZ0ZWQgWklQIGZpbGUgY2FuIGJ5cGFzcyBhcHBsaWNhdGlvbiBjaGVja3Mgb24gWklQIGVudHJ5IHNpemVzIGJlY2F1c2UgZGF0YSBhYm91dCB0aGUgdW5jb21wcmVzc2VkIHNpemUgY2FuIGJlIHNwb29mZWQuIFRoaXMgYWxsb3dzIGF0dGFja2VycyB0byBjYXVzZSBhIGRlbmlhbCBvZiBzZXJ2aWNlIChkaXNrIGNvbnN1bXB0aW9uKS4iLCJjdnNzIjp7InNjb3JlIjo1LjV9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLTVtMnYtaGM2NC01Nmg2In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAxOS0xNjg5MiJ9XSwic3VtbWFyeSI6IlJ1Ynl6aXAgZGVuaWFsIG9mIHNlcnZpY2UgIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJydWJ5emlwIn0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIxLjMuMCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAxLjMuMCJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ004QUFBQUJHQzJHT2ciLCJudW1iZXIiOjk1LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIzLTA3LTE2VDE1OjE2OjM3WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiIjIyMgSW1wYWN0XG5cbkJ5IHVzaW5nIGFuIGludmFsaWQgdHJhbnNmZXItZW5jb2RpbmcgaGVhZGVyLCBhbiBhdHRhY2tlciBjb3VsZCBbc211Z2dsZSBhbiBIVFRQIHJlc3BvbnNlLl0oaHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L3JlcXVlc3Qtc211Z2dsaW5nKVxuXG5PcmlnaW5hbGx5IHJlcG9ydGVkIGJ5IEBaZWRkWXUsIHdobyBoYXMgb3VyIHRoYW5rcyBmb3IgdGhlIGRldGFpbGVkIHJlcG9ydC5cblxuIyMjIFBhdGNoZXNcblxuVGhlIHByb2JsZW0gaGFzIGJlZW4gZml4ZWQgaW4gUHVtYSAzLjEyLjUgYW5kIFB1bWEgNC4zLjQuXG5cbiMjIyBGb3IgbW9yZSBpbmZvcm1hdGlvblxuXG5JZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IHRoaXMgYWR2aXNvcnk6XG5cbiogT3BlbiBhbiBpc3N1ZSBpbiBbUHVtYV0oaHR0cHM6Ly9naXRodWIuY29tL3B1bWEvcHVtYSlcbiogU2VlIG91ciBbc2VjdXJpdHkgcG9saWN5XShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hL3NlY3VyaXR5L3BvbGljeSkiLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EteDdqZy02cHdnLWZ4NWgifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIwLTExMDc2In1dLCJzdW1tYXJ5IjoiSFRUUCBTbXVnZ2xpbmcgdmlhIFRyYW5zZmVyLUVuY29kaW5nIEhlYWRlciBpbiBQdW1hIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJwdW1hIn0sInNldmVyaXR5IjoiSElHSCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjMuMTIuNSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAzLjEyLjUifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCR0MyR2tRIiwibnVtYmVyIjo5Niwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNy0xNlQxNToxNjozN1oiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMjIEltcGFjdFxuVGhpcyBpcyBhIHNpbWlsYXIgYnV0IGRpZmZlcmVudCB2dWxuZXJhYmlsaXR5IHRvIHRoZSBvbmUgcGF0Y2hlZCBpbiAzLjEyLjUgYW5kIDQuMy40LlxuXG5BIGNsaWVudCBjb3VsZCBzbXVnZ2xlIGEgcmVxdWVzdCB0aHJvdWdoIGEgcHJveHksIGNhdXNpbmcgdGhlIHByb3h5IHRvIHNlbmQgYSByZXNwb25zZSBiYWNrIHRvIGFub3RoZXIgdW5rbm93biBjbGllbnQuIFxuXG5JZiB0aGUgcHJveHkgdXNlcyBwZXJzaXN0ZW50IGNvbm5lY3Rpb25zIGFuZCB0aGUgY2xpZW50IGFkZHMgYW5vdGhlciByZXF1ZXN0IGluIHZpYSBIVFRQIHBpcGVsaW5pbmcsIHRoZSBwcm94eSBtYXkgbWlzdGFrZSBpdCBhcyB0aGUgZmlyc3QgcmVxdWVzdCdzIGJvZHkuIFB1bWEsIGhvd2V2ZXIsIHdvdWxkIHNlZSBpdCBhcyB0d28gcmVxdWVzdHMsIGFuZCB3aGVuIHByb2Nlc3NpbmcgdGhlIHNlY29uZCByZXF1ZXN0LCBzZW5kIGJhY2sgYSByZXNwb25zZSB0aGF0IHRoZSBwcm94eSBkb2VzIG5vdCBleHBlY3QuIElmIHRoZSBwcm94eSBoYXMgcmV1c2VkIHRoZSBwZXJzaXN0ZW50IGNvbm5lY3Rpb24gdG8gUHVtYSB0byBzZW5kIGFub3RoZXIgcmVxdWVzdCBmb3IgYSBkaWZmZXJlbnQgY2xpZW50LCB0aGUgc2Vjb25kIHJlc3BvbnNlIGZyb20gdGhlIGZpcnN0IGNsaWVudCB3aWxsIGJlIHNlbnQgdG8gdGhlIHNlY29uZCBjbGllbnQuXG5cbiMjIyBQYXRjaGVzXG5cblRoZSBwcm9ibGVtIGhhcyBiZWVuIGZpeGVkIGluIFB1bWEgMy4xMi42IGFuZCBQdW1hIDQuMy41LlxuXG4jIyMgRm9yIG1vcmUgaW5mb3JtYXRpb25cblxuSWYgeW91IGhhdmUgYW55IHF1ZXN0aW9ucyBvciBjb21tZW50cyBhYm91dCB0aGlzIGFkdmlzb3J5OlxuXG4qIE9wZW4gYW4gaXNzdWUgaW4gW1B1bWFdKGh0dHBzOi8vZ2l0aHViLmNvbS9wdW1hL3B1bWEpXG4qIFNlZSBvdXIgW3NlY3VyaXR5IHBvbGljeV0oaHR0cHM6Ly9naXRodWIuY29tL3B1bWEvcHVtYS9zZWN1cml0eS9wb2xpY3kpIiwiY3ZzcyI6eyJzY29yZSI6Ni44fSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS13NjR3LXFxcGgtNWd4bSJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjAtMTEwNzcifV0sInN1bW1hcnkiOiJIVFRQIFNtdWdnbGluZyB2aWEgVHJhbnNmZXItRW5jb2RpbmcgSGVhZGVyIGluIFB1bWEifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InB1bWEifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjMuMTIuNiJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAzLjEyLjYifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCR0MySExRIiwibnVtYmVyIjo5Nywic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wNy0xNlQxNToxNjozN1oiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiQSBkaXJlY3RvcnkgdHJhdmVyc2FsIHZ1bG5lcmFiaWxpdHkgZXhpc3RzIGluIHJhY2sgPCAyLjIuMCB0aGF0IGFsbG93cyBhbiBhdHRhY2tlciBwZXJmb3JtIGRpcmVjdG9yeSB0cmF2ZXJzYWwgdnVsbmVyYWJpbGl0eSBpbiB0aGUgUmFjazo6RGlyZWN0b3J5IGFwcCB0aGF0IGlzIGJ1bmRsZWQgd2l0aCBSYWNrIHdoaWNoIGNvdWxkIHJlc3VsdCBpbiBpbmZvcm1hdGlvbiBkaXNjbG9zdXJlLiIsImN2c3MiOnsic2NvcmUiOjguNn0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS01ZjloLTlwanYtdjZqNyJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjAtODE2MSJ9XSwic3VtbWFyeSI6IkRpcmVjdG9yeSB0cmF2ZXJzYWwgaW4gUmFjazo6RGlyZWN0b3J5IGFwcCBidW5kbGVkIHdpdGggUmFjayJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoicmFjayJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiIyLjEuMyJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPCAyLjEuMyJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ004QUFBQUJHQzJIWnciLCJudW1iZXIiOjk4LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIzLTA3LTE2VDE1OjE2OjM3WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSBpcyBhIHBvdGVudGlhbCBDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKSB2dWxuZXJhYmlsaXR5IGluIEFjdGlvbiBWaWV3J3MgdHJhbnNsYXRpb24gaGVscGVycy4gVmlld3MgdGhhdCBhbGxvdyB0aGUgdXNlciB0byBjb250cm9sIHRoZSBkZWZhdWx0IChub3QgZm91bmQpIHZhbHVlIG9mIHRoZSBgdGAgYW5kIGB0cmFuc2xhdGVgIGhlbHBlcnMgY291bGQgYmUgc3VzY2VwdGlibGUgdG8gWFNTIGF0dGFja3MuXG5cbiMjIyBJbXBhY3RcblxuV2hlbiBhbiBIVE1MLXVuc2FmZSBzdHJpbmcgaXMgcGFzc2VkIGFzIHRoZSBkZWZhdWx0IGZvciBhIG1pc3NpbmcgdHJhbnNsYXRpb24ga2V5IFtuYW1lZCBgaHRtbGAgb3IgZW5kaW5nIGluIGBfaHRtbGBdKGh0dHBzOi8vZ3VpZGVzLnJ1YnlvbnJhaWxzLm9yZy9pMThuLmh0bWwjdXNpbmctc2FmZS1odG1sLXRyYW5zbGF0aW9ucyksIHRoZSBkZWZhdWx0IHN0cmluZyBpcyBpbmNvcnJlY3RseSBtYXJrZWQgYXMgSFRNTC1zYWZlIGFuZCBub3QgZXNjYXBlZC4gVnVsbmVyYWJsZSBjb2RlIG1heSBsb29rIGxpa2UgdGhlIGZvbGxvd2luZyBleGFtcGxlczpcblxuYGBgZXJiXG48JSMgVGhlIHdlbGNvbWVfaHRtbCB0cmFuc2xhdGlvbiBpcyBub3QgZGVmaW5lZCBmb3IgdGhlIGN1cnJlbnQgbG9jYWxlOiAlPlxuPCU9IHQoXCJ3ZWxjb21lX2h0bWxcIiwgZGVmYXVsdDogdW50cnVzdGVkX3VzZXJfY29udHJvbGxlZF9zdHJpbmcpICU+XG5cbjwlIyBOZWl0aGVyIHRoZSB0aXRsZS5odG1sIHRyYW5zbGF0aW9uIG5vciB0aGUgbWlzc2luZy5odG1sIHRyYW5zbGF0aW9uIGlzIGRlZmluZWQgZm9yIHRoZSBjdXJyZW50IGxvY2FsZTogJT5cbjwlPSB0KFwidGl0bGUuaHRtbFwiLCBkZWZhdWx0OiBbOlwibWlzc2luZy5odG1sXCIsIHVudHJ1c3RlZF91c2VyX2NvbnRyb2xsZWRfc3RyaW5nXSkgJT5cbmBgYFxuXG4jIyMgUGF0Y2hlc1xuXG5QYXRjaGVkIFJhaWxzIHZlcnNpb25zLCA2LjAuMy4zIGFuZCA1LjIuNC40LCBhcmUgYXZhaWxhYmxlIGZyb20gdGhlIG5vcm1hbCBsb2NhdGlvbnMuXG5cblRoZSBwYXRjaGVzIGhhdmUgYWxzbyBiZWVuIGFwcGxpZWQgdG8gdGhlIGBtYXN0ZXJgLCBgNi0wLXN0YWJsZWAsIGFuZCBgNS0yLXN0YWJsZWAgYnJhbmNoZXMgb24gR2l0SHViLiBJZiB5b3UgdHJhY2sgYW55IG9mIHRoZXNlIGJyYW5jaGVzLCB5b3Ugc2hvdWxkIHVwZGF0ZSB0byB0aGUgbGF0ZXN0LlxuXG5UbyBhaWQgdXNlcnMgd2hvIGFyZW7igJl0IGFibGUgdG8gdXBncmFkZSBpbW1lZGlhdGVseSwgd2XigJl2ZSBwcm92aWRlZCBwYXRjaGVzIGZvciB0aGUgdHdvIHN1cHBvcnRlZCByZWxlYXNlIHNlcmllcy4gVGhleSBhcmUgaW4gZ2l0LWFtIGZvcm1hdCBhbmQgY29uc2lzdCBvZiBhIHNpbmdsZSBjaGFuZ2VzZXQuXG5cbiogWzUtMi10cmFuc2xhdGUtaGVscGVyLXhzcy5wYXRjaF0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ2VvcmdlY2xhZ2hvcm4vYTQ2NmUxMDM5MjJlZTgxZjI0YzMyYzkwMzQwODk0NDIjZmlsZS01LTItdHJhbnNsYXRlLWhlbHBlci14c3MtcGF0Y2gpIOKAlCBwYXRjaCBmb3IgdGhlIDUuMiByZWxlYXNlIHNlcmllc1xuKiBbNi0wLXRyYW5zbGF0ZS1oZWxwZXIteHNzLnBhdGNoXShodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nZW9yZ2VjbGFnaG9ybi9hNDY2ZTEwMzkyMmVlODFmMjRjMzJjOTAzNDA4OTQ0MiNmaWxlLTYtMC10cmFuc2xhdGUtaGVscGVyLXhzcy1wYXRjaCkg4oCUIHBhdGNoIGZvciB0aGUgNi4wIHJlbGVhc2Ugc2VyaWVzXG5cblBsZWFzZSBub3RlIHRoYXQgb25seSB0aGUgNS4yIGFuZCA2LjAgcmVsZWFzZSBzZXJpZXMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQuIFVzZXJzIG9mIGVhcmxpZXIsIHVuc3VwcG9ydGVkIHJlbGVhc2VzIGFyZSBhZHZpc2VkIHRvIHVwZGF0ZSBhcyBzb29uIGFzIHBvc3NpYmxlLCBhcyB3ZSBjYW5ub3QgcHJvdmlkZSBzZWN1cml0eSBmaXhlcyBmb3IgdW5zdXBwb3J0ZWQgcmVsZWFzZXMuXG5cbiMjIyBXb3JrYXJvdW5kc1xuXG5JbXBhY3RlZCB1c2VycyB3aG8gY2Fu4oCZdCB1cGdyYWRlIHRvIGEgcGF0Y2hlZCBSYWlscyB2ZXJzaW9uIGNhbiBhdm9pZCB0aGlzIGlzc3VlIGJ5IG1hbnVhbGx5IGVzY2FwaW5nIGRlZmF1bHQgdHJhbnNsYXRpb25zIHdpdGggdGhlIGBodG1sX2VzY2FwZWAgaGVscGVyIChhbGlhc2VkIGFzIGBoYCk6XG5cbmBgYGVyYlxuPCU9IHQoXCJ3ZWxjb21lX2h0bWxcIiwgZGVmYXVsdDogaCh1bnRydXN0ZWRfdXNlcl9jb250cm9sbGVkX3N0cmluZykpICU+XG5gYGAiLCJjdnNzIjp7InNjb3JlIjo1LjR9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiaWRlbnRpZmllcnMiOlt7InR5cGUiOiJHSFNBIiwidmFsdWUiOiJHSFNBLWNmanYtNTQ5OC1tcGg1In0seyJ0eXBlIjoiQ1ZFIiwidmFsdWUiOiJDVkUtMjAyMC0xNTE2OSJ9XSwic3VtbWFyeSI6IlhTUyBpbiBBY3Rpb24gVmlldyJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoiYWN0aW9udmlldyJ9LCJzZXZlcml0eSI6Ik1PREVSQVRFIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNS4yLjQuNCJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPD0gNS4yLjQuMyJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ004QUFBQUJHQzJIX0EiLCJudW1iZXIiOjk5LCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIzLTA3LTE2VDE1OjE2OjM4WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJBIEJyb2tlbiBBY2Nlc3MgQ29udHJvbCB2dWxuZXJhYmlsaXR5IGluIEFjdGl2ZSBKb2IgdmVyc2lvbnMgPj0gNC4yLjAgYWxsb3dzIGFuIGF0dGFja2VyIHRvIGNyYWZ0IHVzZXIgaW5wdXQgd2hpY2ggY2FuIGNhdXNlIEFjdGl2ZSBKb2IgdG8gZGVzZXJpYWxpemUgaXQgdXNpbmcgR2xvYmFsSWQgYW5kIGdpdmUgdGhlbSBhY2Nlc3MgdG8gaW5mb3JtYXRpb24gdGhhdCB0aGV5IHNob3VsZCBub3QgaGF2ZS4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtcTJxdy1ybXJoLXZ2NDIifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDE4LTE2NDc2In1dLCJzdW1tYXJ5IjoiSW1wcm9wZXIgQWNjZXNzIENvbnRyb2wgaW4gYWN0aXZlam9iIn0sInNlY3VyaXR5VnVsbmVyYWJpbGl0eSI6eyJwYWNrYWdlIjp7Im5hbWUiOiJhY3RpdmVqb2IifSwic2V2ZXJpdHkiOiJISUdIIiwiZmlyc3RQYXRjaGVkVmVyc2lvbiI6eyJpZGVudGlmaWVyIjoiNS4xLjYuMSJ9LCJ2dWxuZXJhYmxlVmVyc2lvblJhbmdlIjoiPj0gNS4xLjAsIDw9IDUuMS42LjAifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCSThndjd3IiwibnVtYmVyIjoxMDEsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDgtMDhUMTk6Mjk6MjdaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGEgcG9zc2libGUgRG9TIHZ1bG5lcmFiaWxpdHkgaW4gdGhlIFRva2VuIEF1dGhlbnRpY2F0aW9uIGxvZ2ljIGluIEFjdGlvbiBDb250cm9sbGVyLlxuXG5WZXJzaW9ucyBBZmZlY3RlZDogID49IDQuMC4wXG5Ob3QgYWZmZWN0ZWQ6ICAgICAgIDwgNC4wLjBcbkZpeGVkIFZlcnNpb25zOiAgICAgNi4xLjMuMiwgNi4wLjMuNywgNS4yLjQuNiwgNS4yLjZcblxuSW1wYWN0XG4tLS0tLS1cbkltcGFjdGVkIGNvZGUgdXNlcyBgYXV0aGVudGljYXRlX29yX3JlcXVlc3Rfd2l0aF9odHRwX3Rva2VuYCBvciBgYXV0aGVudGljYXRlX3dpdGhfaHR0cF90b2tlbmAgZm9yIHJlcXVlc3QgYXV0aGVudGljYXRpb24uICBJbXBhY3RlZCBjb2RlIHdpbGwgbG9vayBzb21ldGhpbmcgbGlrZSB0aGlzOlxuXG5gYGBcbmNsYXNzIFBvc3RzQ29udHJvbGxlciA8IEFwcGxpY2F0aW9uQ29udHJvbGxlclxuICBiZWZvcmVfYWN0aW9uIDphdXRoZW50aWNhdGVcblxuICBwcml2YXRlXG5cbiAgZGVmIGF1dGhlbnRpY2F0ZVxuICAgIGF1dGhlbnRpY2F0ZV9vcl9yZXF1ZXN0X3dpdGhfaHR0cF90b2tlbiBkbyB8dG9rZW4sIG9wdGlvbnN8XG4gICAgICAjIC4uLlxuICAgIGVuZFxuICBlbmRcbmVuZFxuYGBgXG5cbkFsbCB1c2VycyBydW5uaW5nIGFuIGFmZmVjdGVkIHJlbGVhc2Ugc2hvdWxkIGVpdGhlciB1cGdyYWRlIG9yIHVzZSBvbmUgb2YgdGhlIHdvcmthcm91bmRzIGltbWVkaWF0ZWx5LlxuXG5SZWxlYXNlc1xuLS0tLS0tLS1cblRoZSBmaXhlZCByZWxlYXNlcyBhcmUgYXZhaWxhYmxlIGF0IHRoZSBub3JtYWwgbG9jYXRpb25zLlxuXG5Xb3JrYXJvdW5kc1xuLS0tLS0tLS0tLS1cblRoZSBmb2xsb3dpbmcgbW9ua2V5IHBhdGNoIHBsYWNlZCBpbiBhbiBpbml0aWFsaXplciBjYW4gYmUgdXNlZCB0byB3b3JrIGFyb3VuZCB0aGUgaXNzdWU6XG5cbmBgYHJ1Ynlcbm1vZHVsZSBBY3Rpb25Db250cm9sbGVyOjpIdHRwQXV0aGVudGljYXRpb246OlRva2VuXG4gIEFVVEhOX1BBSVJfREVMSU1JVEVSUyA9IC8oPzosfDt8XFx0KS9cbmVuZFxuYGBgXG5cblBhdGNoZXNcbi0tLS0tLS1cblRvIGFpZCB1c2VycyB3aG8gYXJlbid0IGFibGUgdG8gdXBncmFkZSBpbW1lZGlhdGVseSB3ZSBoYXZlIHByb3ZpZGVkIHBhdGNoZXMgZm9yIHRoZSB0d28gc3VwcG9ydGVkIHJlbGVhc2Ugc2VyaWVzLiBUaGV5IGFyZSBpbiBnaXQtYW0gZm9ybWF0IGFuZCBjb25zaXN0IG9mIGEgc2luZ2xlIGNoYW5nZXNldC5cblxuKiA1LTItaHR0cC1hdXRoZW50aWNhdGlvbi1kb3MucGF0Y2ggLSBQYXRjaCBmb3IgNS4yIHNlcmllc1xuKiA2LTAtaHR0cC1hdXRoZW50aWNhdGlvbi1kb3MucGF0Y2ggLSBQYXRjaCBmb3IgNi4wIHNlcmllc1xuKiA2LTEtaHR0cC1hdXRoZW50aWNhdGlvbi1kb3MucGF0Y2ggLSBQYXRjaCBmb3IgNi4xIHNlcmllc1xuXG5QbGVhc2Ugbm90ZSB0aGF0IG9ubHkgdGhlIDYuMS5aLCA2LjAuWiwgYW5kIDUuMi5aIHNlcmllcyBhcmUgc3VwcG9ydGVkIGF0IHByZXNlbnQuIFVzZXJzIG9mIGVhcmxpZXIgdW5zdXBwb3J0ZWQgcmVsZWFzZXMgYXJlIGFkdmlzZWQgdG8gdXBncmFkZSBhcyBzb29uIGFzIHBvc3NpYmxlIGFzIHdlIGNhbm5vdCBndWFyYW50ZWUgdGhlIGNvbnRpbnVlZCBhdmFpbGFiaWxpdHkgb2Ygc2VjdXJpdHkgZml4ZXMgZm9yIHVuc3VwcG9ydGVkIHJlbGVhc2VzLlxuXG5DcmVkaXRzXG4tLS0tLS0tXG5UaGFuayB5b3UgdG8gaHR0cHM6Ly9oYWNrZXJvbmUuY29tL3dvbmRhX3RlYV9jb2ZmZWUgZm9yIHJlcG9ydGluZyB0aGlzIGlzc3VlISIsImN2c3MiOnsic2NvcmUiOjcuNX0sInNldmVyaXR5IjoiSElHSCIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS03d2p4LTNnN2otODU4NCJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjEtMjI5MDQifV0sInN1bW1hcnkiOiJQb3NzaWJsZSBEb1MgVnVsbmVyYWJpbGl0eSBpbiBBY3Rpb24gQ29udHJvbGxlciBUb2tlbiBBdXRoZW50aWNhdGlvbiJ9LCJzZWN1cml0eVZ1bG5lcmFiaWxpdHkiOnsicGFja2FnZSI6eyJuYW1lIjoiYWN0aW9ucGFjayJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI1LjIuNC42In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI+PSA0LjAuMCwgPD0gNS4yLjQuNSJ9fSx7ImlkIjoiUlZBX2t3RE9Cem1EZ004QUFBQUJKZ0t6QXciLCJudW1iZXIiOjEwMiwic3RhdGUiOiJPUEVOIiwiY3JlYXRlZEF0IjoiMjAyMy0wOC0xOFQyMjoxMjozMloiLCJzZWN1cml0eUFkdmlzb3J5Ijp7ImRlc2NyaXB0aW9uIjoiIyMjIEltcGFjdFxuUHJpb3IgdG8gdmVyc2lvbiA2LjMuMSwgcHVtYSBleGhpYml0ZWQgaW5jb3JyZWN0IGJlaGF2aW9yIHdoZW4gcGFyc2luZyBjaHVua2VkIHRyYW5zZmVyIGVuY29kaW5nIGJvZGllcyBhbmQgemVyby1sZW5ndGggQ29udGVudC1MZW5ndGggaGVhZGVycyBpbiBhIHdheSB0aGF0IGFsbG93ZWQgSFRUUCByZXF1ZXN0IHNtdWdnbGluZy5cblxuVGhlIGZvbGxvd2luZyB2dWxuZXJhYmlsaXRpZXMgYXJlIGFkZHJlc3NlZCBieSB0aGlzIGFkdmlzb3J5OlxuXG4qIEluY29ycmVjdCBwYXJzaW5nIG9mIHRyYWlsaW5nIGZpZWxkcyBpbiBjaHVua2VkIHRyYW5zZmVyIGVuY29kaW5nIGJvZGllc1xuKiBQYXJzaW5nIG9mIGJsYW5rL3plcm8tbGVuZ3RoIENvbnRlbnQtTGVuZ3RoIGhlYWRlcnNcblxuIyMjIFBhdGNoZXNcblRoZSB2dWxuZXJhYmlsaXR5IGhhcyBiZWVuIGZpeGVkIGluIDYuMy4xIGFuZCA1LjYuNy5cblxuIyMjIFdvcmthcm91bmRzXG5ObyBrbm93biB3b3JrYXJvdW5kcy5cblxuIyMjIFJlZmVyZW5jZXNcbltIVFRQIFJlcXVlc3QgU211Z2dsaW5nXShodHRwczovL3BvcnRzd2lnZ2VyLm5ldC93ZWItc2VjdXJpdHkvcmVxdWVzdC1zbXVnZ2xpbmcpXG5cbiMjIyBGb3IgbW9yZSBpbmZvcm1hdGlvblxuSWYgeW91IGhhdmUgYW55IHF1ZXN0aW9ucyBvciBjb21tZW50cyBhYm91dCB0aGlzIGFkdmlzb3J5OlxuXG5PcGVuIGFuIGlzc3VlIGluIFtQdW1hXShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hKVxuU2VlIG91ciBbc2VjdXJpdHkgcG9saWN5XShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hL3NlY3VyaXR5L3BvbGljeSlcbiIsImN2c3MiOnsic2NvcmUiOjkuOH0sInNldmVyaXR5IjoiQ1JJVElDQUwiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtNjh4Zy1ncXFtLXZnajgifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIzLTQwMTc1In1dLCJzdW1tYXJ5IjoiUHVtYSBIVFRQIFJlcXVlc3QvUmVzcG9uc2UgU211Z2dsaW5nIHZ1bG5lcmFiaWxpdHkifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InB1bWEifSwic2V2ZXJpdHkiOiJDUklUSUNBTCIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjUuNi43In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDUuNi43In19LHsiaWQiOiJSVkFfa3dET0J6bURnTThBQUFBQkpoMFB4USIsIm51bWJlciI6MTAzLCJzdGF0ZSI6Ik9QRU4iLCJjcmVhdGVkQXQiOiIyMDIzLTA4LTE5VDAwOjQ0OjU0WiIsInNlY3VyaXR5QWR2aXNvcnkiOnsiZGVzY3JpcHRpb24iOiJUaGVyZSBpcyBhIHBvdGVudGlhbCBkZW5pYWwgb2Ygc2VydmljZSB2dWxuZXJhYmlsaXR5IHByZXNlbnQgaW4gQWN0aXZlUmVjb3Jk4oCZcyBQb3N0Z3JlU1FMIGFkYXB0ZXIuXG5cblRoaXMgaGFzIGJlZW4gYXNzaWduZWQgdGhlIENWRSBpZGVudGlmaWVyIENWRS0yMDIyLTQ0NTY2LlxuXG5WZXJzaW9ucyBBZmZlY3RlZDogQWxsLiBOb3QgYWZmZWN0ZWQ6IE5vbmUuIEZpeGVkIFZlcnNpb25zOiA1LjIuOC4xNSAoUmFpbHMgTFRTLCB3aGljaCBpcyBhIHBhaWQgc2VydmljZSBhbmQgbm90IHBhcnQgb2YgdGhlIHJ1YnlnZW0pLCA2LjEuNy4xLCA3LjAuNC4xXG5cbkltcGFjdDpcbkluIEFjdGl2ZVJlY29yZCA8Ny4wLjQuMSBhbmQgPDYuMS43LjEsIHdoZW4gYSB2YWx1ZSBvdXRzaWRlIHRoZSByYW5nZSBmb3IgYSA2NGJpdCBzaWduZWQgaW50ZWdlciBpcyBwcm92aWRlZCB0byB0aGUgUG9zdGdyZVNRTCBjb25uZWN0aW9uIGFkYXB0ZXIsIGl0IHdpbGwgdHJlYXQgdGhlIHRhcmdldCBjb2x1bW4gdHlwZSBhcyBudW1lcmljLiBDb21wYXJpbmcgaW50ZWdlciB2YWx1ZXMgYWdhaW5zdCBudW1lcmljIHZhbHVlcyBjYW4gcmVzdWx0IGluIGEgc2xvdyBzZXF1ZW50aWFsIHNjYW4gcmVzdWx0aW5nIGluIHBvdGVudGlhbCBEZW5pYWwgb2YgU2VydmljZS5cblJlbGVhc2VzXG5cblRoZSBmaXhlZCByZWxlYXNlcyBhcmUgYXZhaWxhYmxlIGF0IHRoZSBub3JtYWwgbG9jYXRpb25zLlxuV29ya2Fyb3VuZHNcblxuRW5zdXJlIHRoYXQgdXNlciBzdXBwbGllZCBpbnB1dCB3aGljaCBpcyBwcm92aWRlZCB0byBBY3RpdmVSZWNvcmQgY2xhdXNlcyBkbyBub3QgY29udGFpbiBpbnRlZ2VycyB3aWRlciB0aGFuIGEgc2lnbmVkIDY0Yml0IHJlcHJlc2VudGF0aW9uIG9yIGZsb2F0cy5cblBhdGNoZXNcblxuVG8gYWlkIHVzZXJzIHdobyBhcmVu4oCZdCBhYmxlIHRvIHVwZ3JhZGUgaW1tZWRpYXRlbHkgd2UgaGF2ZSBwcm92aWRlZCBwYXRjaGVzIGZvciB0aGUgc3VwcG9ydGVkIHJlbGVhc2Ugc2VyaWVzIGluIGFjY29yZGFuY2Ugd2l0aCBvdXIgbWFpbnRlbmFuY2UgcG9saWN5IDEgcmVnYXJkaW5nIHNlY3VyaXR5IGlzc3Vlcy4gVGhleSBhcmUgaW4gZ2l0LWFtIGZvcm1hdCBhbmQgY29uc2lzdCBvZiBhIHNpbmdsZSBjaGFuZ2VzZXQuXG5cbiAgICA2LTEtQWRkZWQtaW50ZWdlci13aWR0aC1jaGVjay10by1Qb3N0Z3JlU1FMLVF1b3RpbmcucGF0Y2ggLSBQYXRjaCBmb3IgNi4xIHNlcmllc1xuICAgIDctMC1BZGRlZC1pbnRlZ2VyLXdpZHRoLWNoZWNrLXRvLVBvc3RncmVTUUwtUXVvdGluZy5wYXRjaCAtIFBhdGNoIGZvciA3LjAgc2VyaWVzXG4iLCJjdnNzIjp7InNjb3JlIjo3LjV9LCJzZXZlcml0eSI6IkhJR0giLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtNTc5dy0yMmo0LTQ3NDkifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDIyLTQ0NTY2In1dLCJzdW1tYXJ5IjoiRGVuaWFsIG9mIFNlcnZpY2UgVnVsbmVyYWJpbGl0eSBpbiBBY3RpdmVSZWNvcmQncyBQb3N0Z3JlU1FMIGFkYXB0ZXIifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGl2ZXJlY29yZCJ9LCJzZXZlcml0eSI6IkhJR0giLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI2LjEuNy4xIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDYuMS43LjEifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCSmlpRGxRIiwibnVtYmVyIjoxMDQsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjMtMDgtMTlUMDI6MTc6MTdaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IlRoZXJlIGlzIGEgcG9zc2libGUgcmVndWxhciBleHByZXNzaW9uIGJhc2VkIERvUyB2dWxuZXJhYmlsaXR5IGluIEFjdGl2ZSBTdXBwb3J0LiBUaGlzIHZ1bG5lcmFiaWxpdHkgaGFzIGJlZW4gYXNzaWduZWQgdGhlIENWRSBpZGVudGlmaWVyIENWRS0yMDIzLTIyNzk2LlxuXG5WZXJzaW9ucyBBZmZlY3RlZDogQWxsIE5vdCBhZmZlY3RlZDogTm9uZSBGaXhlZCBWZXJzaW9uczogNS4yLjguMTUgKFJhaWxzIExUUywgd2hpY2ggaXMgYSBwYWlkIHNlcnZpY2UgYW5kIG5vdCBwYXJ0IG9mIHRoZSBydWJ5Z2VtKSwgNi4xLjcuMSwgNy4wLjQuMVxuSW1wYWN0XG5cbkEgc3BlY2lhbGx5IGNyYWZ0ZWQgc3RyaW5nIHBhc3NlZCB0byB0aGUgdW5kZXJzY29yZSBtZXRob2QgY2FuIGNhdXNlIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gZW5naW5lIHRvIGVudGVyIGEgc3RhdGUgb2YgY2F0YXN0cm9waGljIGJhY2t0cmFja2luZy4gVGhpcyBjYW4gY2F1c2UgdGhlIHByb2Nlc3MgdG8gdXNlIGxhcmdlIGFtb3VudHMgb2YgQ1BVIGFuZCBtZW1vcnksIGxlYWRpbmcgdG8gYSBwb3NzaWJsZSBEb1MgdnVsbmVyYWJpbGl0eS5cblxuVGhpcyBhZmZlY3RzIFN0cmluZyN1bmRlcnNjb3JlLCBBY3RpdmVTdXBwb3J0OjpJbmZsZWN0b3IudW5kZXJzY29yZSwgU3RyaW5nI3RpdGxlaXplLCBhbmQgYW55IG90aGVyIG1ldGhvZHMgdXNpbmcgdGhlc2UuXG5cbkFsbCB1c2VycyBydW5uaW5nIGFuIGFmZmVjdGVkIHJlbGVhc2Ugc2hvdWxkIGVpdGhlciB1cGdyYWRlIG9yIHVzZSBvbmUgb2YgdGhlIHdvcmthcm91bmRzIGltbWVkaWF0ZWx5LlxuUmVsZWFzZXNcblxuVGhlIEZJWEVEIHJlbGVhc2VzIGFyZSBhdmFpbGFibGUgYXQgdGhlIG5vcm1hbCBsb2NhdGlvbnMuXG5Xb3JrYXJvdW5kc1xuXG5UaGVyZSBhcmUgbm8gZmVhc2libGUgd29ya2Fyb3VuZHMgZm9yIHRoaXMgaXNzdWUuXG5cblVzZXJzIG9uIFJ1YnkgMy4yLjAgb3IgZ3JlYXRlciBtYXkgYmUgYWJsZSB0byByZWR1Y2UgdGhlIGltcGFjdCBieSBjb25maWd1cmluZyBSZWdleHAudGltZW91dC5cblBhdGNoZXNcblxuVG8gYWlkIHVzZXJzIHdobyBhcmVu4oCZdCBhYmxlIHRvIHVwZ3JhZGUgaW1tZWRpYXRlbHkgd2UgaGF2ZSBwcm92aWRlZCBwYXRjaGVzIGZvciB0aGUgdHdvIHN1cHBvcnRlZCByZWxlYXNlIHNlcmllcy4gVGhleSBhcmUgaW4gZ2l0LWFtIGZvcm1hdCBhbmQgY29uc2lzdCBvZiBhIHNpbmdsZSBjaGFuZ2VzZXQuXG5cbiAgICA2LTEtQXZvaWQtcmVnZXgtYmFja3RyYWNraW5nLWluLUluZmxlY3Rvci51bmRlcnNjb3JlLnBhdGNoIC0gUGF0Y2ggZm9yIDYuMSBzZXJpZXNcbiAgICA3LTAtQXZvaWQtcmVnZXgtYmFja3RyYWNraW5nLWluLUluZmxlY3Rvci51bmRlcnNjb3JlLnBhdGNoIC0gUGF0Y2ggZm9yIDcuMCBzZXJpZXNcblxuUGxlYXNlIG5vdGUgdGhhdCBvbmx5IHRoZSA3LjAuWiBhbmQgNi4xLlogc2VyaWVzIGFyZSBzdXBwb3J0ZWQgYXQgcHJlc2VudCwgYW5kIDYuMC5aIGZvciBzZXZlcmUgdnVsbmVyYWJpbGl0aWVzLiBVc2VycyBvZiBlYXJsaWVyIHVuc3VwcG9ydGVkIHJlbGVhc2VzIGFyZSBhZHZpc2VkIHRvIHVwZ3JhZGUgYXMgc29vbiBhcyBwb3NzaWJsZSBhcyB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoZSBjb250aW51ZWQgYXZhaWxhYmlsaXR5IG9mIHNlY3VyaXR5IGZpeGVzIGZvciB1bnN1cHBvcnRlZCByZWxlYXNlcy4iLCJjdnNzIjp7InNjb3JlIjowLjB9LCJzZXZlcml0eSI6IkxPVyIsImlkZW50aWZpZXJzIjpbeyJ0eXBlIjoiR0hTQSIsInZhbHVlIjoiR0hTQS1qNmdjLTc5Mm0tcWdtMiJ9LHsidHlwZSI6IkNWRSIsInZhbHVlIjoiQ1ZFLTIwMjMtMjI3OTYifV0sInN1bW1hcnkiOiJSZURvUyBiYXNlZCBEb1MgdnVsbmVyYWJpbGl0eSBpbiBBY3RpdmUgU3VwcG9ydCdzIHVuZGVyc2NvcmUifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6ImFjdGl2ZXN1cHBvcnQifSwic2V2ZXJpdHkiOiJMT1ciLCJmaXJzdFBhdGNoZWRWZXJzaW9uIjp7ImlkZW50aWZpZXIiOiI2LjEuNy4xIn0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDYuMS43LjEifX0seyJpZCI6IlJWQV9rd0RPQnptRGdNOEFBQUFCUUhkN2FBIiwibnVtYmVyIjoxMDYsInN0YXRlIjoiT1BFTiIsImNyZWF0ZWRBdCI6IjIwMjQtMDEtMDhUMTY6MjA6NDNaIiwic2VjdXJpdHlBZHZpc29yeSI6eyJkZXNjcmlwdGlvbiI6IiMjIyBJbXBhY3RcblByaW9yIHRvIHZlcnNpb25zIDYuNC4yIGFuZCA1LjYuOCwgcHVtYSBleGhpYml0ZWQgaW5jb3JyZWN0IGJlaGF2aW9yIHdoZW4gcGFyc2luZyBjaHVua2VkIHRyYW5zZmVyIGVuY29kaW5nIGJvZGllcyBpbiBhIHdheSB0aGF0IGFsbG93ZWQgSFRUUCByZXF1ZXN0IHNtdWdnbGluZy5cblxuRml4ZWQgdmVyc2lvbnMgbGltaXQgdGhlIHNpemUgb2YgY2h1bmsgZXh0ZW5zaW9ucy4gV2l0aG91dCB0aGlzIGxpbWl0LCBhbiBhdHRhY2tlciBjb3VsZCBjYXVzZSB1bmJvdW5kZWQgcmVzb3VyY2UgKENQVSwgbmV0d29yayBiYW5kd2lkdGgpIGNvbnN1bXB0aW9uLlxuXG4jIyMgUGF0Y2hlc1xuXG5UaGUgdnVsbmVyYWJpbGl0eSBoYXMgYmVlbiBmaXhlZCBpbiA2LjQuMiBhbmQgNS42LjguXG5cbiMjIyBXb3JrYXJvdW5kc1xuXG5ObyBrbm93biB3b3JrYXJvdW5kcy5cblxuIyMjIFJlZmVyZW5jZXNcblxuKiBbSFRUUCBSZXF1ZXN0IFNtdWdnbGluZ10oaHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L3JlcXVlc3Qtc211Z2dsaW5nKVxuKiBPcGVuIGFuIGlzc3VlIGluIFtQdW1hXShodHRwczovL2dpdGh1Yi5jb20vcHVtYS9wdW1hKVxuKiBTZWUgb3VyIFtzZWN1cml0eSBwb2xpY3ldKGh0dHBzOi8vZ2l0aHViLmNvbS9wdW1hL3B1bWEvc2VjdXJpdHkvcG9saWN5KSIsImN2c3MiOnsic2NvcmUiOjUuOX0sInNldmVyaXR5IjoiTU9ERVJBVEUiLCJpZGVudGlmaWVycyI6W3sidHlwZSI6IkdIU0EiLCJ2YWx1ZSI6IkdIU0EtYzJmNC1jdnFtLTY1dzIifSx7InR5cGUiOiJDVkUiLCJ2YWx1ZSI6IkNWRS0yMDI0LTIxNjQ3In1dLCJzdW1tYXJ5IjoiUHVtYSBIVFRQIFJlcXVlc3QvUmVzcG9uc2UgU211Z2dsaW5nIHZ1bG5lcmFiaWxpdHkifSwic2VjdXJpdHlWdWxuZXJhYmlsaXR5Ijp7InBhY2thZ2UiOnsibmFtZSI6InB1bWEifSwic2V2ZXJpdHkiOiJNT0RFUkFURSIsImZpcnN0UGF0Y2hlZFZlcnNpb24iOnsiaWRlbnRpZmllciI6IjUuNi44In0sInZ1bG5lcmFibGVWZXJzaW9uUmFuZ2UiOiI8IDUuNi44In19XSwidG90YWxDb3VudCI6OTUsInBhZ2VJbmZvIjp7ImVuZEN1cnNvciI6IlkzVnljMjl5T25ZeU9wSFBBQUFBQVVCM2UyZz0iLCJoYXNOZXh0UGFnZSI6ZmFsc2V9fX19fQ==
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"sublime_settings","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1443'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:59 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4985'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '15'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF52:5AD0:77FC6:F665B:659D8656
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/sublime_settings","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"DailyCodingProblems","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1446'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:59 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4984'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '16'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF53:7594:843E0:1109EA:659D8657
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/DailyCodingProblems","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"tmux","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1431'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:45:59 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4983'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '17'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF54:4A8F:7A0A2:FBC15:659D8657
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/tmux","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"HTB-Notes-Private","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1444'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:46:00 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4982'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '18'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF55:4A8F:7A118:FBD0C:659D8657
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/HTB-Notes-Private","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"Hack-The-Box-Walkthroughs","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1452'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:46:00 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4981'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '19'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF56:64AD:9916E:13A449:659D8658
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/Hack-The-Box-Walkthroughs","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"Pentesting-Scripts","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1445'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:46:00 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4980'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '20'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF57:38F3:578A6:B6C1A:659D8658
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/Pentesting-Scripts","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"ftp-user-enum","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1440'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:46:00 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4979'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '21'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF58:6F2D:92438:12C6F6:659D8658
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/ftp-user-enum","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"Rspec-Capybara-Automation-Starter-Project","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1468'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:46:01 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4978'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '22'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF59:4E9E:5EE21:C5048:659D8659
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
- request:
    method: post
    uri: https://api.github.com/graphql
    body:
      encoding: UTF-8
      string: '{"query":"query($repo_name: String!, $repo_owner: String!, $end_cursor:
        String, $page_size: Int!) {\n          repository(name: $repo_name, owner:
        $repo_owner) {\n                url\n                vulnerabilityAlerts(first:
        $page_size, after: $end_cursor, states: [OPEN]) {\n                  nodes
        {\n                    id\n                    number\n                    state\n                    createdAt\n                    securityAdvisory
        {\n                      description\n                      cvss {\n                        score\n                      }\n                      severity\n                      identifiers
        {\n                        type\n                        value\n                      }\n                      summary\n                    }\n                    securityVulnerability
        {\n                      package {\n                        name\n                      }\n                      severity\n                      firstPatchedVersion
        {\n                        identifier\n                      }\n                      vulnerableVersionRange\n                    }\n                  }\n                  totalCount\n                  pageInfo
        {\n                    endCursor\n                    hasNextPage\n                  }\n                }\n              }\n            }","variables":{"repo_name":"advent_of_code_2020","repo_owner":"shotop","end_cursor":null,"page_size":100}}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin23 x86_64) ruby/3.2.2p53
      Content-Type:
      - application/json
      Authorization:
      - Bearer <GITHUB_TOKEN>
      Content-Length:
      - '1446'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Tue, 09 Jan 2024 17:46:01 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      X-Oauth-Scopes:
      - repo
      X-Accepted-Oauth-Scopes:
      - repo
      Github-Authentication-Token-Expiration:
      - 2024-01-14 19:55:58 UTC
      X-Github-Media-Type:
      - github.v4; format=json
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4977'
      X-Ratelimit-Reset:
      - '1704825950'
      X-Ratelimit-Used:
      - '23'
      X-Ratelimit-Resource:
      - graphql
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      X-Frame-Options:
      - deny
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - '0'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Content-Security-Policy:
      - default-src 'none'
      Vary:
      - Accept-Encoding, Accept, X-Requested-With
      X-Github-Request-Id:
      - FF5A:80C8:83D32:10FAE5:659D8659
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"repository":{"url":"https://github.com/shotop/advent_of_code_2020","vulnerabilityAlerts":{"nodes":[],"totalCount":0,"pageInfo":{"endCursor":null,"hasNextPage":false}}}}}'
  recorded_at: Sat, 30 Oct 2021 13:09:10 GMT
recorded_with: VCR 6.2.0
