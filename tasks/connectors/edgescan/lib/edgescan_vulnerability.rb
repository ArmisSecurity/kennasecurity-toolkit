# frozen_string_literal: true

require "resolv"
require "uri"

module Kenna
  module Toolkit
    module Edgescan
      class EdgescanVulnerability
        attr_accessor :asset, :data, :host

        def initialize(asset, vulnerability, host)
          @asset = asset
          @data = vulnerability
          @host = host
        end

        def id
          data["id"]
        end

        def name
          data["name"]
        end

        def location
          data["location"]
        end

        def location_specifier_id
          data["location_specifier_id"]
        end

        def location_specifiers
          asset["location_specifiers"]
        end

        def matching_location_specifier
          @location_specifier ||= location_specifiers.find do |specifier|
            (specifier["id"] == location_specifier_id && not_ip_range?(specifier)) ||
              specifier["location"] == location ||
              (specifier["location"].include?(location) && not_ip_range?(specifier) && same_location_types?(specifier))
          end
        end

        def to_kenna_vulnerability
          {
            "scanner_identifier" => data["definition_id"],
            "vuln_def_name" => name,
            "external_unique_id" => id,
            "scanner_type" => scanner_type,
            "created_at" => data["created_at"],
            "last_seen_at" => data["updated_at"],
            "status" => data["status"],
            "details" => details,
            "scanner_score" => data["threat"] * 2
          }
        end

        def to_kenna_finding
          {
            "scanner_identifier" => data["definition_id"],
            "vuln_def_name" => name,
            "external_unique_id" => id,
            "scanner_type" => scanner_type,
            "created_at" => data["created_at"],
            "last_seen_at" => data["updated_at"],
            "severity" => data["threat"] * 2,
            "additional_fields" => {
              "status" => data["status"],
              "details" => details
            }
          }
        end

        def to_kenna_asset
          location_data = matching_location_specifier.nil? ? vulnerability_data : location_specifier_data
          { **kenna_asset_base, **location_data, **host_information }
        end

        def external_id
          if host
            "ES#{asset['id']} #{host['location']}"
          elsif matching_location_specifier
            "ES#{asset['id']} #{matching_location_specifier['location']}"
          else
            "ES#{asset['id']} #{location}"
          end
        end

        private

        def location_specifier_data
          location_data = {}
          case matching_location_specifier["location_type"]
          when "url"
            location_data = { "url" => matching_location_specifier["location"] }
          when "hostname"
            location_data = { "hostname" => matching_location_specifier["location"] }
          when "ip"
            location_data = { "ip_address" => matching_location_specifier["location"] }
          end
          location_data
        end

        def vulnerability_data
          location_data = {}
          if url?
            location_data = { "url" => location }
          elsif ip_address?
            location_data = { "ip_address" => location }
          else
            location_data = { "hostname" => location }
          end
          location_data
        end

        def kenna_asset_base
          {
            "external_id" => external_id,
            "tags" => asset["tags"],
            "application" => asset_application_id
          }
        end

        def host_information
          return {} unless host

          {
            "ip_address" => host["location"],
            "hostname" => host["hostnames"]&.first,
            "os_version" => host["os_name"]
          }
        end

        def scanner_type
          data["layer"] == "application" ? "EdgescanApp" : "EdgescanNet"
        end

        def details
          "Location: #{location}\n" + data["details"].map { |detail| "#{detail_title(detail)}#{detail['src']}" }
                                                     .join("\n\n====================\n\n")
        end

        def detail_title(detail)
          type = detail["type"]
          return "#{detail['protocol']}:#{detail['port']}\n\n" if type == "service"
          return "Vulnerable #{detail['parameter_type']}: #{detail['parameter_name']}\n\n" if type == "attack_vector"

          ""
        end

        def ip_address?
          !!(location =~ Regexp.union([Resolv::IPv4::Regex, Resolv::IPv6::Regex]))
        end

        def url?
          !!(location =~ URI::DEFAULT_PARSER.make_regexp)
        end

        def not_ip_range?(specifier)
          !["cidr", "block"].include?(specifier["location_type"])
        end

        def asset_application_id
          "#{asset['name']} (ES#{asset['id']})" if asset_application? && url?
        end

        def asset_application?
          asset["type"] == "app"
        end

        def same_location_types?(specifier)
          case specifier["location_type"]
          when "url"
            url?
          when "ip"
            ip_address?
          when "hostname"
            true
          end
          false
        end
      end
    end
  end
end
